<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2015-10-20T17:47:02-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speech Act Classification for Text with Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2015/10/20/speech-act-classification-for-text-with-clojure/"/>
    <updated>2015-10-20T13:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/10/20/speech-act-classification-for-text-with-clojure</id>
    <content type="html"><![CDATA[<p>We humans are quite wonderful.  We do amazing things every day without even realizing it.  One of them, you are doing right now.  You are reading text.  Your brain is taking these jumbles of letters and spaces in this sentence, which in linguist terms is called an <a href="https://en.wikipedia.org/wiki/Utterance">utterance</a>, and making sense out of it.  The individual meanings of sentences might be quite complex.</p>

<p>Take for example the utterance, &ldquo;I like cheese&rdquo;.  To understand it properly, you need to know the meanings of the individual words.  In particular, you would need to know that cheese is a tasty food stuff that is made from milk.  This would be a detailed and full understanding.  But there is a higher level of understanding that we can look at called <a href="https://en.wikipedia.org/wiki/Utterance">Speech Acts</a>.</p>

<p>Speech Acts are way of classifying our communication according to purposes.  We perform speech acts when we ask questions, make statements, requests, promises, or even just say thanks.  These speech acts cross languages.  When I ask a question in English, it is the same speech act as if I ask it in French.  In fact, if we were to travel to another planet with aliens, we can assume if they had a language, it would involve speech acts.  It should be no surprise then, to communicate effectively with machines, it will have to understand speech acts.</p>

<p>To explore this communication we are going to consider only three speech acts:</p>

<ul>
<li>Statements &ndash; &ldquo;I like cheese.&rdquo;</li>
<li>Questions &ndash; &ldquo;How do you make cheese?&rdquo;</li>
<li>Expressives &ndash; &ldquo;Thank you&rdquo;</li>
</ul>


<p><em>Our goal is to have our program be able to tell the difference between these three speech acts &ndash; without punctuation.</em></p>

<p>Why not use punctuation?  If you are having a conversation with a human over Slack or some other chat channel, you may or may not put in a question mark or period.  To have a computer be able to converse as naturally with a human as another human, it will have to understand the speech act without the aid of punctuation.</p>

<p>Generally, we want to have the computer:</p>

<ol>
<li>Read in an utterance/text that may or may not have punctuation.</li>
<li>Classify whether the result is a statement, question, or expressive.</li>
</ol>


<p>To tackle this problem, we are going to have to break this up into two main parts.  The first is <em>parsing</em> the text and annotating it with data.  The second is to classify the text based on the data from the parsing.</p>

<h2>Parsing and Annotating Text with Stanford CoreNLP</h2>

<p>The <a href="http://nlp.stanford.edu/software/corenlp.shtml">Stanford CoreNLP</a> is considering the state of the art for POS, (Part of Speech), tagging and other linguistic annotations.  It also is a Java library, so very easy to use from Clojure.</p>

<p>Here we are using a simple wrapper library called <a href="https://github.com/gigasquid/stanford-talk">stanford-talk</a> to take in some text and process it.  The result is a list of <em>tokens</em> for each word in the <code>:token-data</code> map.  Each token is annotated with the POS tag.  There is a lot more data in the annotations that we can look at to give us insight into this text.  But, to keep things simple, we are just going to look at the POS speech tag at the moment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">process-text</span> <span class="s">&quot;I like cheese&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;{:token-data</span>
</span><span class='line'><span class="c1">; ({:sent-num 0, :token &quot;I&quot;, :pos &quot;PRP&quot;, :net &quot;O&quot;, :lemma &quot;I&quot;, :sentiment &quot;Neutral&quot;}</span>
</span><span class='line'><span class="c1">;  {:sent-num 0, :token &quot;like&quot;, :pos &quot;VBP&quot;, :net &quot;O&quot;, :lemma &quot;like&quot;, :sentiment &quot;Neutral&quot;}</span>
</span><span class='line'><span class="c1">;  {:sent-num 0, :token &quot;cheese&quot;, :pos &quot;NN&quot;, :net &quot;O&quot;, :lemma &quot;cheese&quot;, :sentiment &quot;Neutral&quot;}),</span>
</span><span class='line'><span class="c1">; :refs [[{:sent-num 0, :token &quot;I&quot;, :gender &quot;UNKNOWN&quot;, :mention-type &quot;PRONOMINAL&quot;, :number &quot;SINGULAR&quot;, :animacy &quot;ANIMATE&quot;};]]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the text &ldquo;I like cheese&rdquo; has the following POS tags <a href="https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">list of all POS tags</a>:</p>

<ul>
<li>I = PRP Personal Pronoun</li>
<li>like = VBP Verb, non-3rd person singular present</li>
<li>cheese &ndash; Noun, singular or mass</li>
</ul>


<p>This is great.  We have some data about the text we can analyze.  The next thing to do is to figure out how to classify the text based on this data.</p>

<h2>Classification with Weka</h2>

<p><a href="http://www.cs.waikato.ac.nz/ml/weka/">Weka</a> is a collection of machine learning algorithms.  There is a program for interactive exploration of data sets, as well as a java library so you can use it programatically.  Speaking of data sets, we need some.  Just having one sentence about liking cheese is not going to get us very far with any machine learning.</p>

<p>So where can you go to get conversational questions and statements on the internet?  Well, one place that is pretty good for that is <a href="http://www.answers.com/Q/FAQ/2528-9">answers.com</a>.  We can scrape some pages for questions and answers.  Enough so that we can collect and cleanup some input files of</p>

<ul>
<li>~ 200 statements</li>
<li>~ 200 questions</li>
</ul>


<p>The expressives were a bit more difficult.  Let&rsquo;s just make a list of about 80 of them.</p>

<p>Now, we have a list of text data.  We need to decide on some features and generate some input files to train the classifiers on.</p>

<h3>Choosing Features for Classification</h3>

<p>First, what is a feature?  A feature is some sort of encoding of the data that the computer is going to consider for classification. For example, the number of nouns in a sentence could be a feature.  There is a whole field of study dedicated to figuring out what the best features for data for machine learning are.  Again, to keep things simple, we can take an educated guess on some features based on a good <a href="https://www.cs.utah.edu/~riloff/pdfs/emnlp11-speechacts.pdf">paper</a>:</p>

<ul>
<li>Sentence length</li>
<li>Number of nouns in the sentence (NN, NNS, NNP, NNPS)</li>
<li>If the sentence ends in a noun or adjective (NN, NNS, NNP, NNPS, JJ, JJR, JJS)</li>
<li>If the sentence begins in a verb (VB, VBD, VBG, VBP, VPZ)</li>
<li>The count of the wh, (like who, what) markers (WDT, WRB, WP, WP$)</li>
</ul>


<p>We can now go through our data file, generate our feature data, and output .arff file format to ready it as training file for weka.</p>

<p>Raw question file example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">What</span> <span class="nv">is</span> <span class="nv">floater</span> <span class="nv">exe</span>
</span><span class='line'><span class="nv">Is</span> <span class="nv">bottled</span> <span class="nv">water</span> <span class="nb">or </span><span class="nv">tap</span> <span class="nv">water</span> <span class="nv">better</span> <span class="nb">for </span><span class="nv">your</span> <span class="nv">dog</span>
</span><span class='line'><span class="nv">How</span> <span class="k">do </span><span class="nv">you</span> <span class="nv">treat</span> <span class="nv">lie</span> <span class="nv">bumps</span> <span class="nv">on</span> <span class="nv">the</span> <span class="nv">tongue</span>
</span><span class='line'><span class="nv">Can</span> <span class="nv">caffeine</span> <span class="nv">be</span> <span class="nv">used</span> <span class="nv">in</span> <span class="nv">powder</span> <span class="nv">form</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arff file with features</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="err">@</span><span class="nv">relation</span> <span class="nv">speechacts</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">sen_len</span>            <span class="nv">numeric</span>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">nn_num</span>             <span class="nv">numeric</span>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">end_in_n</span>           <span class="nv">numeric</span>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">begin_v</span>            <span class="nv">numeric</span>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">wh_num</span>             <span class="nv">numeric</span>
</span><span class='line'><span class="err">@</span><span class="nv">attribute</span>       <span class="nv">type</span>               <span class="p">{</span><span class="nv">assertion</span>,<span class="nv">question</span>,<span class="nv">expressive</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nv">data</span>
</span><span class='line'><span class="mi">4</span>,<span class="mi">2</span>,<span class="mi">1</span>,<span class="mi">0</span>,<span class="mi">1</span>,<span class="nv">question</span>
</span><span class='line'><span class="mi">10</span>,<span class="mi">4</span>,<span class="mi">1</span>,<span class="mi">0</span>,<span class="mi">0</span>,<span class="nv">question</span>
</span><span class='line'><span class="mi">9</span>,<span class="mi">3</span>,<span class="mi">1</span>,<span class="mi">0</span>,<span class="mi">1</span>,<span class="nv">question</span>
</span><span class='line'><span class="mi">7</span>,<span class="mi">3</span>,<span class="mi">1</span>,<span class="mi">0</span>,<span class="mi">0</span>,<span class="nv">question</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our input file to training our machine learning algorithms, we can start looking at classifiers.</p>

<h3>Choosing the Classifier</h3>

<p><img src="http://c2.staticflickr.com/6/5794/22338401315_1abf0ffb2d_z.jpg"></p>

<p>Using the weka explorer, we can try out different classification models.  For this data, the best one seems to be the <a href="https://en.wikipedia.org/wiki/Random_forest">Random Forest</a>.  In the explorer, it beat out Naive Bayes and J48.  It is also worth mentioning that we are not using a separate source of test data, we are cross validating on the original training set.  If we wanted to be more rigorous, we could collect more data and cut it in half, using one set for the training and one set for the testing.</p>

<p>Now that we have a classifier, we can create some Clojure code with the java library to use it.</p>

<h3>Using the Weka Classifier from our Clojure Code</h3>

<p>After importing the needed Java classes into our Clojure code, we can create the Random Forest classifier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">classifier</span> <span class="p">(</span><span class="k">new </span><span class="nv">RandomForest</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We then create a function that will load our arff input file as a datasource</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-datasource</span> <span class="p">[</span><span class="nv">fname</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">new </span><span class="nv">ConverterUtils$DataSource</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">.getResourceAsStream</span> <span class="p">(</span><span class="nf">clojure.lang.RT/baseLoader</span><span class="p">)</span> <span class="nv">fname</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And another uses it to train the classifier, returning a map of the <em>evaluator</em> and <em>data</em> that we will need for our predictions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train-classifier</span> <span class="p">[</span><span class="nv">fname</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">source</span> <span class="p">(</span><span class="nf">get-datasource</span> <span class="nv">fname</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nf">.getDataSet</span> <span class="nv">source</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">_</span> <span class="p">(</span><span class="nf">.setClassIndex</span> <span class="nv">data</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">.numAttributes</span> <span class="nv">data</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">.buildClassifier</span> <span class="nv">classifier</span> <span class="nv">data</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">e</span> <span class="p">(</span><span class="k">new </span><span class="nv">Evaluation</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.crossValidateModel</span> <span class="nv">e</span> <span class="nv">classifier</span> <span class="nv">data</span> <span class="p">(</span><span class="nf">.intValue</span> <span class="p">(</span><span class="nb">int </span><span class="mi">10</span><span class="p">))</span> <span class="p">(</span><span class="k">new </span><span class="nv">Random</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">into-array </span><span class="p">[]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">.toSummaryString</span> <span class="nv">e</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:evaluator</span> <span class="nv">e</span>
</span><span class='line'>     <span class="ss">:data</span> <span class="nv">data</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we need to be able to ask about a classification for a particular instance of new data.  This is going to be where we are parsing new text and asking for an answer from our trained model.  To do this, we need to generate an <em>instance</em> for the evaluation to look at.  It is constructed from numbers in the same order as our arff file.  The exception is that we are not going to provide a value for the final field of the speech act type.  We will assign that to the a missing value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">gen-instance</span> <span class="p">[</span><span class="nv">dataset</span> <span class="p">[</span><span class="nv">val0</span> <span class="nv">val1</span> <span class="nv">val2</span> <span class="nv">val3</span> <span class="nv">val4</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="k">new </span><span class="nv">Instance</span> <span class="mi">6</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doto </span><span class="nv">i</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">double </span><span class="nv">val0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">double </span><span class="nv">val1</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">2</span> <span class="p">(</span><span class="nb">double </span><span class="nv">val2</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">3</span> <span class="p">(</span><span class="nb">double </span><span class="nv">val3</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">4</span> <span class="p">(</span><span class="nb">double </span><span class="nv">val4</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setValue</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">Instance/missingValue</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setDataset</span> <span class="nv">dataset</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use this function in a prediction function to get our answer back</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">predict</span> <span class="p">[</span><span class="nv">ev</span> <span class="nv">d</span> <span class="nv">vals</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">v</span>  <span class="p">(</span><span class="nf">.evaluateModelOnce</span> <span class="nv">ev</span> <span class="nv">classifier</span> <span class="p">(</span><span class="nf">gen-instance</span> <span class="nv">d</span> <span class="nv">vals</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">case</span> <span class="nv">v</span>
</span><span class='line'>      <span class="mf">0.0</span> <span class="ss">:statement</span>
</span><span class='line'>      <span class="mf">1.0</span> <span class="ss">:question</span>
</span><span class='line'>      <span class="mf">2.0</span> <span class="ss">:expressive</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the predict function would look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">results</span> <span class="p">(</span><span class="nf">train-classifier</span> <span class="s">&quot;speech-acts-input-all.arff&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">predictor</span> <span class="p">(</span><span class="ss">:evaluator</span> <span class="nv">results</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">data</span> <span class="p">(</span><span class="ss">:data</span> <span class="nv">results</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">predict</span> <span class="nv">predictor</span> <span class="nv">data</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="c1">;; -&gt; :expressive</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the parsing piece and the classification piece, we can put everything together.</p>

<h3>Putting it all together</h3>

<p>We finally have all the details we need write a <code>classify-text</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">classify-text</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">stats</span> <span class="p">(</span><span class="nf">parser/gen-stats</span> <span class="nv">text</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">features</span> <span class="p">[(</span><span class="ss">:sen-len</span> <span class="nv">stats</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="ss">:nn-num</span> <span class="nv">stats</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="ss">:end-in-n</span> <span class="nv">stats</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="ss">:begin-v</span> <span class="nv">stats</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="ss">:wh-num</span> <span class="nv">stats</span><span class="p">)]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">weka/predict</span> <span class="nv">predictor</span> <span class="nv">data</span> <span class="nv">features</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">classify-text</span> <span class="s">&quot;I like cheese&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; :statement</span>
</span><span class='line'><span class="p">(</span><span class="nf">classify-text</span> <span class="s">&quot;How do you make cheese&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; :question</span>
</span><span class='line'><span class="p">(</span><span class="nf">classify-text</span> <span class="s">&quot;Right on&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; :expressive</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yea! It worked.  We finally have something that will read in text and tell us its best guess of a speech act, all without punctuation.  Let&rsquo;s quickly review what we have done.</p>

<h3>Summary</h3>

<ul>
<li>Gather data sets of statements, questions, and expressives</li>
<li>Parse text and annotate it with POS tags using Stanford CoreNLP</li>
<li>Choose features of the data to analyze and generate arff files</li>
<li>Use Weka explorer to try out the best classification algorithims</li>
<li>Programatically use weka to train classifier and predict a new instance</li>
<li>Write a program to tie it all together</li>
</ul>


<p>It&rsquo;s funny how a simple thing like asking whether something is a statement or question gets you knee deep in Natural Language Processing and Machine Learning pretty fast.</p>

<p>We&rsquo;ve learned a lot, now let&rsquo;s have a bit of fun.  Now that we can classify speech acts, we can make a sort of proto chat bot with a really limited responses.</p>

<h3>Proto Chat Bot</h3>

<p>Here we are going to be a bit loose and actually check if a question mark is used.  If it is, we will automatically mark it as a question.  Otherwise, we will classify it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">respond</span> <span class="p">[</span><span class="nv">text</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">question-mark?</span> <span class="p">(</span><span class="nb">re-find </span> <span class="o">#</span><span class="s">&quot;\?$&quot;</span> <span class="nv">text</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">type</span> <span class="p">(</span><span class="k">if </span><span class="nv">question-mark?</span>
</span><span class='line'>               <span class="ss">:question</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">classify-text</span> <span class="nv">text</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">case</span> <span class="nv">type</span>
</span><span class='line'>      <span class="ss">:question</span> <span class="s">&quot;That is an interesting question.&quot;</span>
</span><span class='line'>      <span class="ss">:statement</span> <span class="s">&quot;Nice to know.&quot;</span>
</span><span class='line'>      <span class="ss">:expressive</span> <span class="s">&quot;:)&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just need a quick repl and main function now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">repl</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot;&gt;&gt; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">flush</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">input</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-not </span><span class="p">(</span><span class="nb">= </span><span class="nv">input</span> <span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">try</span> <span class="p">(</span><span class="nf">c/respond</span> <span class="nv">input</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">catch</span> <span class="nv">Exception</span> <span class="nv">e</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Sorry: &quot;</span> <span class="nv">e</span> <span class="s">&quot; - &quot;</span> <span class="p">(</span><span class="nf">.getMessage</span> <span class="nv">e</span><span class="p">)))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">recur</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;Bye!&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">System/exit</span> <span class="mi">0</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello.  Let&#39;s chat.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">flush</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">repl</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing it out with <code>lein run</code>, we can have a little chat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Hello.</span>  <span class="nv">Let</span><span class="ss">&#39;s</span> <span class="nv">chat.</span>
</span><span class='line'><span class="nv">&gt;&gt;</span> <span class="nv">Hi</span>
</span><span class='line'><span class="err">:</span><span class="p">)</span>
</span><span class='line'><span class="nv">&gt;&gt;</span> <span class="nv">Do</span> <span class="nv">you</span> <span class="nv">know</span> <span class="nv">where</span> <span class="nv">I</span> <span class="nv">can</span> <span class="nv">go</span> <span class="nv">to</span> <span class="nv">buy</span> <span class="nv">cheese</span>
</span><span class='line'><span class="nv">That</span> <span class="nv">is</span> <span class="nv">an</span> <span class="nv">interesting</span> <span class="nv">question.</span>
</span><span class='line'><span class="nv">&gt;&gt;</span> <span class="nv">I</span> <span class="nv">am</span> <span class="nv">a</span> <span class="nv">big</span> <span class="nv">cheese</span> <span class="nv">fan</span>
</span><span class='line'><span class="nv">Nice</span> <span class="nv">to</span> <span class="nv">know.</span>
</span><span class='line'><span class="nv">&gt;&gt;</span> <span class="nv">you</span> <span class="nv">are</span> <span class="nv">quite</span> <span class="nv">smart</span>
</span><span class='line'><span class="nv">Nice</span> <span class="nv">to</span> <span class="nv">know.</span>
</span><span class='line'><span class="nv">&gt;&gt;</span> <span class="nv">bye</span>
</span><span class='line'><span class="err">:</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Want more?  Check out the code <a href="https://github.com/gigasquid/speech-acts-classifier">https://github.com/gigasquid/speech-acts-classifier</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic - Part 3]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/25/converstations-with-datomic-3/"/>
    <updated>2015-08-25T10:28:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/25/converstations-with-datomic-3</id>
    <content type="html"><![CDATA[<p><img src="https://avatars0.githubusercontent.com/u/1478702?v=3&s=200"></p>

<p><em>This is a continuation of the <a href="http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/">first</a> and
<a href="http://gigasquidsoftware.com/blog/2015/08/19/conversations-with-datomic-part-2/">second</a> conversations in which topics such as creating databases,
learning facts, querying, and time traveling were discussed.  Today&rsquo;s topics include architecture, caching, and scaling.</em></p>

<p><strong>Human:</strong>  Hello again <a href="http://www.datomic.com/">Datomic</a>. Ready to talk again?</p>

<p><strong>Datomic:</strong> Sure.  I think you wanted to ask me some questions about how I would fit in with your other systems.</p>

<p><strong>Human:</strong> Yes.  Like I was saying earlier, I think your abilities to learn facts, reason about them, and keep track of the history of all those facts is really great.
I am interested in having you work with me every day, but first I want to understand your components so that I can make sure you are a good fit for us.</p>

<p><strong>Datomic:</strong> I would be happy to explain my architecture to you.  Perhaps showing you this picture is the best way to start.</p>

<p><img src="http://c2.staticflickr.com/6/5723/20819693686_f9ec3852c3_z.jpg"></p>

<p>I am made of three main parts: my <em>transactors</em>, my <em>peers</em>, and my <em>storage</em>.</p>

<p><strong>Human</strong>:  What is a <em>peer</em>?</p>

<p><strong>Datomic</strong>:  A <em>peer</em> is an application that is using the peer library.  In our last conversations,  we were talking through the Clojure api with <code>datomic.api</code>.  The application, or process, that is running this api is called a peer.  There can be many of these, all having conversations with me.</p>

<p><strong>Human</strong>: The peers then talk to your <em>transactor</em>?</p>

<p><strong>Datomic</strong> Yes. The peers talk to my transactor whenever you call <code>transact</code> with the peer library.  It is the central coordinator between all the peers and processes the requests using <em>ACID</em> transactions, and then sends the facts off to storage.</p>

<p><strong>Human:</strong>  Could you remind me what <em>ACID</em> stands for again?  I always forget.  The first one is <em>Atomic</em> right?</p>

<p><strong>Datomic:</strong> That is right.  I am <em>Atomic</em> in that every transaction you send to me is all or nothing.  If for some reason, one part of it fails, I will reject the entire transaction and leave my database unchanged.</p>

<p>The C is for <em>Consistency</em>.  This means that I provide every peer with a consistent view of facts over time and transactions.  I provide a global ordering of transactions across all the peers with my transactor and peers will always see all the transactions up to their current time without any gaps.</p>

<p><strong>Human:</strong> What if a peer is behind the global time?  How do they catch up to know about the new facts that were transacted by a different peer?</p>

<p><strong>Datomic:</strong> After one peer sends me a successful transaction with some new facts, I will notify all the peers about them.</p>

<p><strong>Human:</strong> Cool. That takes care of the A and C in ACID. What about the I?</p>

<p><strong>Datomic:</strong> It stands for Isolated.  It makes sure that even through there are many peers having conversations with me, transactions are executed serially.  This happens naturally with my transactor.  Since there is only one transactor, transactions are always executed serially.</p>

<p><strong>Human</strong>:  In the picture, why are there are two transactors then?</p>

<p><strong>Datomic</strong>:  Oh, that is for High Availability.  When I startup my system, I can launch two running transactors, but hold one in reserve.  Just on the off chance something happens to the main one, I will swap in the failover one to keep things running smoothly.</p>

<p>The final D in <em>ACID</em> is for Durability.  Once a transaction has been committed by my transactor, it is shipped off to storage for safe keeping.</p>

<p><strong>Human:</strong> What exactly is this storage?</p>

<p><strong>Datomic:</strong> Instead of storing datoms, I send <em>segments</em>, which are closely related datoms,  to storage.  I have quite a few options for storage:</p>

<ul>
<li>Dev mode &ndash; which just runs within my transactor and writes to the local file system.</li>
<li>SQL database</li>
<li>DynamoDB</li>
<li>Cassandra</li>
<li>Riak</li>
<li>Couchbase</li>
<li>Infinispan memory cluster</li>
</ul>


<p><strong>Human:</strong> Which one is the best to use?</p>

<p><strong>Datomic:</strong> <em>The best one to use is the one that you are already have in place at work</em>.  This way, I can integrate seamlessly with your other systems.</p>

<p><strong>Human:</strong> Oh, we didn&rsquo;t really talk about caching.  Can you explain how you do that?</p>

<p><strong>Datomic:</strong> Certainly.  It is even worth another picture.</p>

<p><img src="http://c2.staticflickr.com/6/5630/20852217305_90506481fe.jpg"></p>

<p>Each peer has a its own <em>working set</em> of recent datoms along with a index to all the rest of the datoms in storage in memory.  When the peer has a query for a datom, it first checks to see if it has it locally in its memory cache.  If it can&rsquo;t find it there, then it will ask for a segment of that datom from storage.  Storage will return that datom along with other related datoms in that segment so that the peer can cache that in memory to make it faster for the next query.</p>

<p><strong>Human:</strong> That seems really different from other databases, where the client constantly requests queries from a server.</p>

<p><strong>Datomic:</strong> Yes.  When most questions can be answered from the local memory, responses are really fast.  You don&rsquo;t need to hit storage unless you really need too.  You can even add an extra layer of caching with memcached.</p>

<p><strong>Human:</strong> That sounds great.  I can&rsquo;t wait tell you about all of our data.  We talked a bit about your querying ability earlier, can you do the same queries that our other standard relational databases do, like joins?</p>

<p><strong>Datomic:</strong> Oh yes.  In fact, with me, you don&rsquo;t need to specify your joins explicitly.  I use <em>Datalog</em>, which is based on logic, so my joins are implicit.  I will figure out exactly what I need to put together to answer your query without you having to spell it out for me.</p>

<p><strong>Human:</strong> Ok.  I know that I can map some of my data that is already in other database tables to you.  What about other types of irregular data, like graphs, or sparse data.</p>

<p><strong>Datomic:</strong> I am actually very proud of my data model.  It is extremely flexible.  Since I store things on such a granular datom level, you don&rsquo;t need to map your logical data model to my physical model.  I can handle <em>rectangular</em> table shaped data quite happily along with graph data, sparse data, or other <em>non-rectangular</em> data.</p>

<p><strong>Human:</strong> That sounds great.  What do I need to know about your scaling?</p>

<p><strong>Datomic:</strong> I really excel at reads.  All you have to do is elastically add another peer to me for querying.  I am not really a good fit for write scale, like big data, or log file analysis.  You will find me most happy with data that is valuable information of record and has history that is important, like transaction, medical, or inventory data.  I am also really good at being flexible for development and operations since I can use many different types of storage.  I have worked with many web and cloud apps.</p>

<p><strong>Human:</strong> Thanks for answering all my questions.  I think you might fit in quite well with our other systems.</p>

<p><strong>Datomic:</strong> Great!</p>

<p><strong>Human:</strong> One more thing, this conversation has been great, but do you have any training resources for me and my other human coworkers?</p>

<p><strong>Datomic:</strong> Sure thing. There are a few really good resources on the <a href="http://www.datomic.com/training.html">Datomic Training Site</a>.  I would suggest watching the videos there and pairing them with:</p>

<ul>
<li><a href="https://github.com/stuarthalloway/presentations/blob/master/Nov2014/DayOfDatomicNov2014.pdf?raw=true">The slides for the videos</a> which have the labs to work through form the videos.</li>
<li><a href="https://github.com/Datomic/day-of-datomic">The Day of Datomic Repo</a> which has lots of great examples to play with.</li>
<li><a href="http://docs.datomic.com/">Tne Datomic Development Resources</a>, which include the docs on the <a href="http://docs.datomic.com/clojure/index.html">Clojure API</a></li>
</ul>


<p>Also, if you want to confirm that your data is good fit for me, I suggest you describe your data to the <a href="https://groups.google.com/forum/#!forum/datomic">Datomic Google Group</a>.  They are nice and knowledgeable group of humans.</p>

<p><strong>Human:</strong> Thanks again Datomic!  I will grab another cookie and check it out!</p>

<p><strong>Datomic:</strong> What is it with humans and cookies?&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic Part 2]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/19/conversations-with-datomic-part-2/"/>
    <updated>2015-08-19T08:56:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/19/conversations-with-datomic-part-2</id>
    <content type="html"><![CDATA[<p><img src="https://avatars0.githubusercontent.com/u/1478702?v=3&s=200"></p>

<p><em>The following is a continuation of the first <a href="http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/">conversation</a> which touched on schema creation and querying.  This conversation includes learning new facts, time, and the sometimes unfortunate reality of lawyers.</em></p>

<p><strong>Human:</strong>  Hi <a href="http://www.datomic.com/">Datomic</a>.  I am back from my tea and cookies break.  I really enjoyed talking with you, could we continue our conversation?</p>

<p><strong>Datomic:</strong> Certainly.  Let me see, where did we leave off?</p>

<p><strong>Human:</strong> Let me check my <a href="https://gist.github.com/gigasquid/92a1effb14fe4f6ced59">notes</a>.  Oh yes, we had created a database and filled it with facts about some dogs and owners.  You showed me how to ask you things about the facts, like which dogs liked cheese.</p>

<p><strong>Datomic:</strong> Ah yes.  We were just getting to the really interesting part about how I learn new facts without forgetting the past ones.</p>

<p><strong>Human:</strong> Can you please explain a bit more about how you learn new facts?</p>

<p><strong>Datomic:</strong> Sure.  I learn facts when you tell me to <em>add</em> a new fact about some entity, or to <em>retract</em> a fact about it.  It will probably make more sense with an example.  Let&rsquo;s take the dog with the name &ldquo;Tiny&rdquo; that I know about.  Could you please ask me about the dog and all of the attributes?</p>

<p><strong>Human:</strong> Alright.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045423</span>
</span><span class='line'> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>
</span><span class='line'> <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span>
</span><span class='line'> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is an entity (dog) with the name &ldquo;Tiny&rdquo; who is a Great Dane and his favorite-treat is Cheese.  I am not really sure why the Cheese is capitalized, but I am sure it makes sense to a human.</p>

<p><strong>Human:</strong> Oh right.  Well, now that you mention it, I am not really sure about the cheese thing either. Can I just remove that fact?</p>

<p><strong>Datomic:</strong> Well, you can tell me to <em>retract</em> that fact by sending me a transaction in the form of <code>[:db/retract entity-id attribute value]</code>.  In the case of the dog, since the name attribute is unique, you can just give me the selector for Tiny like this <code>[:dog/name "Tiny"]</code>.</p>

<p><strong>Human:</strong> Like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="p">[[</span><span class="ss">:db/retract</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">]</span> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong> Exactly.  I have retracted that fact about &ldquo;Tiny&rdquo;.  Go ahead and ask me about all of Tiny&rsquo;s attributes again.</p>

<p><strong>Human:</strong>  Ok.  I use <code>(d/db conn)</code> for the current database value right?</p>

<p><strong>Datomic:</strong> Yes. But if you are going to be asking me multiple questions about this database value, you should not repeat the <code>(d/db conn)</code> all the time.</p>

<p><strong>Human:</strong> Oh. What should I do instead?</p>

<p><strong>Datomic:</strong> The connection with me is like a ref.  Just like other refs, you should deref it once to get the database value and then use the value repeatedly. This single database value will provide consistency for all your queries.</p>

<p><strong>Human:</strong> That makes sense.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">db-tiny-no-cheese</span> <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="nv">db-tiny-no-cheese</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045423</span>, <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>, <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tiny is a Great Dane.</p>

<p><strong>Human:</strong> So you don&rsquo;t know anything about the <code>:dog/favorite-treat</code> for &ldquo;Tiny&rdquo;?</p>

<p><strong>Datomic:</strong> At this particular time, I do not have anything to assert about the favorite-treat of Tiny.  However, I still remember everything about all the facts that you have told me.  For each transaction that you send me, I have a notion of a point in time like <em>t0</em>, <em>t1</em>, <em>t2</em>.  I have a complete database value for each one of those points in time.  In fact, you can look at <em>all</em> of my assertions and retractions that I have learned about using the <code>d/history</code> function on the database value.  This asks me to expose my history, which is normally hidden in favor of the <em>present</em>. I will return back a special database containing all the assertions and retractions across time.  Any queries that you ask me will have a fifth <em>datom</em> field to help you distinguish the difference.</p>

<p><strong>Human:</strong>  A fifth datom field?</p>

<p><strong>Datomic:</strong> A <em>datom</em> consists of the following parts: the entity, the attribute, the value, transaction, and an operation which tells you if the fact was added or retracted (e a v tx op).  Why don&rsquo;t you try using the <code>d/history</code> function to ask me about all the facts having to do with Tiny?  I suggest using the datalog query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="nv">?e</span> <span class="nv">?a</span> <span class="nv">?v</span> <span class="nv">?tx</span> <span class="nv">?op</span>
</span><span class='line'>  <span class="ss">:in</span> <span class="nv">$</span>
</span><span class='line'>  <span class="ss">:where</span> <span class="p">[</span><span class="nv">?e</span> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">]</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">?e</span> <span class="nv">?a</span> <span class="nv">?v</span> <span class="nv">?tx</span> <span class="nv">?op</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>which will return all the entity, attribute, value, transaction, and operation facts I ever knew about Tiny.</p>

<p><strong>Human:</strong> Ok.  Here goes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/q</span> <span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="nv">?e</span> <span class="nv">?a</span> <span class="nv">?v</span> <span class="nv">?tx</span> <span class="nv">?op</span>
</span><span class='line'>       <span class="ss">:in</span> <span class="nv">$</span>
</span><span class='line'>       <span class="ss">:where</span> <span class="p">[</span><span class="nv">?e</span> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">]</span>
</span><span class='line'>       <span class="p">[</span><span class="nv">?e</span> <span class="nv">?a</span> <span class="nv">?v</span> <span class="nv">?tx</span> <span class="nv">?op</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">d/history</span> <span class="nv">db-tiny-no-cheese</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span><span class="p">{[</span><span class="mi">17592186045423</span> <span class="mi">63</span> <span class="s">&quot;Tiny&quot;</span>       <span class="mi">13194139534314</span> <span class="nv">true</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">17592186045423</span> <span class="mi">64</span> <span class="s">&quot;Great Dane&quot;</span> <span class="mi">13194139534314</span> <span class="nv">true</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">17592186045423</span> <span class="mi">65</span> <span class="s">&quot;Cheese&quot;</span>     <span class="mi">13194139534314</span> <span class="nv">true</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">17592186045423</span> <span class="mi">65</span> <span class="s">&quot;Cheese&quot;</span>     <span class="mi">13194139534320</span> <span class="nv">false</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>During one transaction, you told me to add three facts about an entity:</p>

<ul>
<li>The <code>:dog/name</code> attribute, (which I refer to as 63), has the value of &ldquo;Tiny&rdquo;.</li>
<li>The <code>:dog/breed</code> attribute, (which I refer to as 64), has the value of &ldquo;Great Dane&rdquo;.</li>
<li>The <code>:dog/favorite-treat</code> attribute, (which I refer to as 65), has the value of &ldquo;Cheese&rdquo;.</li>
</ul>


<p>During another transaction, you told me to retract a fact regarding the attribute <code>:dog/favorite-treat</code> about the same entity.</p>

<p><strong>Human:</strong> Wow, that is really cool.  Is there a way that I can <em>travel back in time</em> to see the world as it was during that first transaction?</p>

<p><strong>Datomic:</strong> Yes.  I am practically a Tardis.  You can use the <code>d/as-of</code> function with a database value and the transaction number and you can time travel.  Using that <em>time traveled</em> database value, you can ask me about all the facts I knew as of that time.</p>

<p><strong>Human:</strong> I can&rsquo;t wait to try this.  Ok, let&rsquo;s go back to the time when I first asserted the fact that Tiny liked cheese.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="p">(</span><span class="nf">d/as-of</span> <span class="nv">db-tiny-no-cheese</span> <span class="mi">13194139534314</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong>  Hold on.  We are time traveling!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045423</span>
</span><span class='line'> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>
</span><span class='line'> <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span>
</span><span class='line'> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tiny is a Great Dane whose favorite treat is Cheese.</p>

<p><strong>Human:</strong> Fantastic! Let&rsquo;s go back to the future now, ummm I mean present. Time is a bit wibbly wobbly.</p>

<p><strong>Datomic:</strong> Just take the <code>as-of</code> function off of the database value and you will be back in the <em>present</em>.</p>

<p><strong>Human:</strong> Hmmm&hellip; Do I have to do a <em>retract</em> every time I want to change a value?  For example, the dog named Fido has a favorite treat of a Bone right now, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="nv">db-tiny-no-cheese</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045421</span>
</span><span class='line'> <span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span>
</span><span class='line'> <span class="ss">:dog/breed</span> <span class="s">&quot;Mix&quot;</span>
</span><span class='line'> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Bone&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it is a &ldquo;Bone&rdquo;.</p>

<p><strong>Human:</strong> So, if I want to change it to be &ldquo;Eggs&rdquo;,  do I need to retract the current value of &ldquo;Bone&rdquo; first and then add the fact of &ldquo;Eggs&rdquo;?</p>

<p><strong>Datomic:</strong> You certainly could do that and I would understand you perfectly.  However, if you simply assert a new value for an existing attribute, I will automatically add the retraction for you.</p>

<p><strong>Human:</strong> Cool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span><span class="p">]</span>
</span><span class='line'>                   <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Eggs&quot;</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045421</span>
</span><span class='line'> <span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span>
</span><span class='line'> <span class="ss">:dog/breed</span> <span class="s">&quot;Mix&quot;</span>
</span><span class='line'> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Eggs&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fido now has a favorite-treat of &ldquo;Eggs&rdquo;.</p>

<p><strong>Human:</strong> This is really neat.  You <em>never</em> forget any facts?</p>

<p><strong>Datomic:</strong> Nope. Well, except in really exceptional circumstances that usually involve lawyers.</p>

<p><strong>Human:</strong> Lawyers?</p>

<p><strong>Datomic:</strong> Sigh.  Yes, well in some unique situations, you might be under a legal obligation to really <em>forget</em> certain facts and totally remove them from the database. There is a special tool that you can use to <em>excise</em> the data.  However, I will store a fact that <em>something</em> was deleted at that time. I just won&rsquo;t be able to remember <em>what</em>.</p>

<p><strong>Human:</strong> That doesn&rsquo;t sound fun.</p>

<p><strong>Datomic:</strong> I prefer to keep all my facts intact.</p>

<p><strong>Human:</strong> I can definitely see that. Well, on a happier subject, I have been very impressed with you during our conversations.  Having a time traveling database that can reason about facts seems like a really useful thing.  Also, you are also really nice.</p>

<p><strong>Datomic:</strong> Awww shucks, thanks.  For a human, you are really nice too.</p>

<p><strong>Human:</strong> I was thinking about the possibility of you coming and working with me every day. Would you mind chatting some more to me about your architecture?  I want to understand how your would fit with our other systems.</p>

<p><strong>Datomic:</strong> Certainly. I would love that.  Do you want to talk about it now, or have another cookie break first?</p>

<p><strong>Human:</strong> Now that you mention cookies&hellip; Let&rsquo;s take a short break and we will talk again soon.</p>

<p><em>(P.S. Humans, there are some great <a href="http://www.datomic.com/training.html">Datomic Training Videos</a> if you want to learn more)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/15/conversations-with-datomic/"/>
    <updated>2015-08-15T10:29:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/15/conversations-with-datomic</id>
    <content type="html"><![CDATA[<p><img src="https://avatars0.githubusercontent.com/u/1478702?v=3&s=200"></p>

<p><strong>Human:</strong> Hi <a href="http://www.datomic.com/">Datomic</a>.   I have been hearing good things about you.  I would like to talk to you and get to know you.  Is that alright?</p>

<p><strong>Datomic:</strong> Sure!  I would be happy to talk with you.  What language would you like to converse in?</p>

<p><strong>Human:</strong>  I like Clojure.</p>

<p><strong>Datomic:</strong>  That is one of my favorites too.  You know how to setup a Leiningen project right?</p>

<p><strong>Human:</strong> Oh yes.  What dependency should I use?</p>

<p><strong>Datomic:</strong> Just use <code>[com.datomic/datomic-free "0.9.5206"]</code>.</p>

<p><strong>Human:</strong> Got it.  Do you mind if I record our conversation in a namespaced file, so that I can refer back to it later?</p>

<p><strong>Datomic:</strong>  Not a problem.  Make sure to require <code>datomic.api</code> when you set it up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">conversations.datomic</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">datomic.api</span> <span class="ss">:as</span> <span class="nv">d</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  All right.  I am all setup up.  I don&rsquo;t really know where to start, so maybe you can tell me a little about yourself.</p>

<p><strong>Datomic:</strong>  I would be happy to.  I am a database of facts.  Would you like to create a database with me?</p>

<p><strong>Human:</strong>  Sure.  How do I do that?</p>

<p><strong>Datomic:</strong> For a casual conversation like this, we can use a in memory database with a uri like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">uri</span> <span class="s">&quot;datomic:mem://first-conversation&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can create the database and simply connect to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/create-database</span> <span class="nv">uri</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">conn</span> <span class="p">(</span><span class="nf">d/connect</span> <span class="nv">uri</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong> So, being a database, obviously you store things.  What sort of things to you store?</p>

<p><strong>Datomic:</strong>  I store facts about things, which I call <em>datoms</em>.</p>

<p><strong>Human:</strong>  That sound neat.  How do I tell you a fact to store?  For example, what if I want you to store a fact about a dog, like its name?</p>

<p><strong>Datomic:</strong>  Ah.  Well the name of a dog is an attribute.  First, you need to tell me about the name attribute, so that I can use it to store the fact for you .  You can describe the attribute in the form of a map like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:dog/name</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/unique</span> <span class="ss">:db.unique/identity</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;Name of the Dog&quot;</span>
</span><span class='line'> <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> This map is a set of facts, (called <em>datoms</em>),  about an entity.  In this
 case, the entity is an attribute. Attributes, in turn, can be used to describe other entities, like a dog. I will explain the different parts to you.</p>

<ul>
<li><code>db/id</code> is the internal id of the fact. With <code>(d/tempid :db.part/db)</code>, I will generate it for you, so you don&rsquo;t have to worry about it.</li>
<li><code>db/ident</code> is the human readable reference for it. While I am fine just referring to the attribute by an id, humans prefer text.  This says that you can refer to this attribute by the namespaced keyword <code>:dog/name</code>.</li>
<li><code>db/valueType</code> tells me the type of the attribute.  The dog&rsquo;s name is a string.</li>
<li><code>db/cardinality</code> lets me know if there is a one-to-one relationship with the entity or not. In our case, a dog has only one name.</li>
<li><code>db/unique</code> is if that attribute is unique for an entity.  In our example case, we are saying that a dog can be uniquely identified by its name.</li>
<li><code>db/doc</code> is some documentation for humans that explains a bit more about the attribute.</li>
<li><code>db.install/_attribute</code> tells me that this is an schema attribute that I should store with the other things like it.</li>
</ul>


<p><strong>Human:</strong> I think I understand. Let me try one out for myself.  So dog breed would be this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:dog/breed</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;Breed of the Dog&quot;</span>
</span><span class='line'> <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong>  Yes!  I think you got it.  Let&rsquo;s try one more.</p>

<p><strong>Human:</strong> Ok.  How about the dog&rsquo;s favorite treat?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'> <span class="ss">:db/ident</span> <span class="ss">:dog/favorite-treat</span>
</span><span class='line'> <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'> <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'> <span class="ss">:db/doc</span> <span class="s">&quot;Dog&#39;s Favorite Treat to Eat&quot;</span>
</span><span class='line'> <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong> You got it.  Now, that you have these attributes, you can give them to me using a transaction with the connection.</p>

<p><strong>Human:</strong> Ok.  Do you want that in a specific format?</p>

<p><strong>Datomic:</strong>  Yes.  Please send it to me using the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="p">[</span><span class="nv">....facts....</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong> Sounds good.  I will put the dog schema datoms we discussed in a vector and call it <code>dog-schema</code> and then send it to you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dog-schema</span>  <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'>                   <span class="ss">:db/ident</span> <span class="ss">:dog/name</span>
</span><span class='line'>                   <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'>                   <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'>                   <span class="ss">:db/unique</span> <span class="ss">:db.unique/identity</span>
</span><span class='line'>                   <span class="ss">:db/doc</span> <span class="s">&quot;Name of the Dog&quot;</span>
</span><span class='line'>                   <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span><span class='line'>                  <span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'>                   <span class="ss">:db/ident</span> <span class="ss">:dog/breed</span>
</span><span class='line'>                   <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'>                   <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'>                   <span class="ss">:db/doc</span> <span class="s">&quot;Breed of the Dog&quot;</span>
</span><span class='line'>                   <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span><span class='line'>                  <span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'>                   <span class="ss">:db/ident</span> <span class="ss">:dog/favorite-treat</span>
</span><span class='line'>                   <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'>                   <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'>                   <span class="ss">:db/doc</span> <span class="s">&quot;Dog&#39;s Favorite Treat to Eat&quot;</span>
</span><span class='line'>                   <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="nv">dog-schema</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong> The transaction was fine.  I know all about those dog attributes now.</p>

<p><strong>Human:</strong>  I would like to also add a schema for owners for the dogs now.  I think I know how to describe the name of the owner, but I don&rsquo;t know how to express how the owner has dogs.</p>

<p><strong>Datomic:</strong> Ah. I that case you can specify the <code>db:valueType</code> as a <code>ref</code> type.  This lets me know that it references another entity.</p>

<p><strong>Human:</strong>  Do I need to tell you that is a type of dog somehow?</p>

<p><strong>Datomic:</strong> No.  I am pretty smart that way.  I will figure it out
  once you try to tell me about some real entities.  In fact, entities don&rsquo;t have types. A ref attribute can reference <em>any</em> entity.</p>

<p><strong>Human:</strong>  Cool.  Well, in that case, here is the owner schema.  The owner has a name and some dogs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">owner-schema</span> <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'>                    <span class="ss">:db/ident</span> <span class="ss">:owner/name</span>
</span><span class='line'>                    <span class="ss">:db/valueType</span> <span class="ss">:db.type/string</span>
</span><span class='line'>                    <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/one</span>
</span><span class='line'>                    <span class="ss">:db/unique</span> <span class="ss">:db.unique/identity</span>
</span><span class='line'>                    <span class="ss">:db/doc</span> <span class="s">&quot;Name of the Owner&quot;</span>
</span><span class='line'>                    <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}</span>
</span><span class='line'>                   <span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/db</span><span class="p">)</span>
</span><span class='line'>                    <span class="ss">:db/ident</span> <span class="ss">:owner/dogs</span>
</span><span class='line'>                    <span class="ss">:db/valueType</span> <span class="ss">:db.type/ref</span>
</span><span class='line'>                    <span class="ss">:db/cardinality</span> <span class="ss">:db.cardinality/many</span>
</span><span class='line'>                    <span class="ss">:db/doc</span> <span class="s">&quot;Dogs of the Owner&quot;</span>
</span><span class='line'>                    <span class="ss">:db.install/_attribute</span> <span class="ss">:db.part/db</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="nv">owner-schema</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong>  The transaction is fine.  I now know about the attributes that dogs and owners have.  Would you like to tell me some facts about specific dogs and owners?</p>

<p><strong>Human:</strong>  Yes. Bob is an owner.  He has two dogs. Fluffy is a poodle whose favorite treat is cheese, and Fido is a mixed breed, whose favorite treat is a bone.  Lucy is also an owner who has one dog named Tiny.  Tiny is a Great Dane whose favorite treat is cheese.</p>

<p>I am a bit confused how to represent the dogs of the owners. How do I do that?</p>

<p><strong>Datomic:</strong>  That is easy, just nest the datoms for dogs under the <code>:owner/dogs</code> attribute. You just need to create datoms for them.  Each dog or owner will by its own map.  Use <code>:db/id</code> set to <code>(d/tempid :db.part/user)</code> so I can generate it for you.  Then use each attribute from the schema as the key and let me know the value.</p>

<p><strong>Human:</strong>  Like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/transact</span> <span class="nv">conn</span> <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/user</span><span class="p">)</span>
</span><span class='line'>                   <span class="ss">:owner/name</span> <span class="s">&quot;Bob&quot;</span>
</span><span class='line'>                   <span class="ss">:owner/dogs</span> <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/user</span><span class="p">)</span>
</span><span class='line'>                                 <span class="ss">:dog/name</span> <span class="s">&quot;Fluffy&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/breed</span> <span class="s">&quot;Poodle&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">}</span>
</span><span class='line'>                                <span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/user</span><span class="p">)</span>
</span><span class='line'>                                 <span class="ss">:dog/name</span> <span class="s">&quot;Fido&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/breed</span> <span class="s">&quot;Mix&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Bone&quot;</span><span class="p">}]}</span>
</span><span class='line'>                  <span class="p">{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/user</span><span class="p">)</span>
</span><span class='line'>                   <span class="ss">:owner/name</span> <span class="s">&quot;Lucy&quot;</span>
</span><span class='line'>                   <span class="ss">:owner/dogs</span> <span class="p">[{</span><span class="ss">:db/id</span> <span class="p">(</span><span class="nf">d/tempid</span> <span class="ss">:db.part/user</span><span class="p">)</span>
</span><span class='line'>                                 <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span>
</span><span class='line'>                                 <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">}]}])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong>  Exactly right.  I now know the facts about Bob and Lucy and their dogs.</p>

<p><strong>Human:</strong>  Umm, how do I query you about the facts that your know?  For example, how do I ask you about the dog named Tiny?</p>

<p><strong>Datomic:</strong>  There are a couple a ways to inquire about facts I know.  To find out about the attributes of a specific dog, or entity, I would recommend using <code>d/pull</code>.  You can ask me in the form of this to get all the attributes for a given dog name.  Note that this works since the dog name is a way to uniquely identify the dog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  What is the <code>(d/db conn)</code> all about?</p>

<p><strong>Datomic:</strong>  That function returns the current database value of the connection. The facts I know change during time.  Every time there is a transaction, I consider the time to be different and there is a new database value.  The <code>d/db</code> function gives you the most recent value that I know about.</p>

<p><strong>Human:</strong> I am assuming the <code>[*]</code> is a wildcard that means give me all the attributes for that dog?</p>

<p><strong>Datomic:</strong>  Exactly right.</p>

<p><strong>Human:</strong> Ok.  Tell me about Tiny.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/pull</span> <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">*</span><span class="p">]</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:db/id</span> <span class="mi">17592186045424</span>
</span><span class='line'> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>
</span><span class='line'> <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span>
</span><span class='line'> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tiny is a Great Dane that has a favorite treat of Cheese.</p>

<p><strong>Human:</strong>  This is fun.  What about more complicated questions.  How do I ask about the name of the owner of the dog &ldquo;Tiny&rdquo;?</p>

<p><strong>Datomic:</strong>  For that I would ask using the <em>datalog</em> query <code>d/q</code>.  It uses logic to unify your query with all of my facts and give you the result.  The query itself would be a vector with logic statements inside like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="nv">?owner-name</span>
</span><span class='line'>  <span class="ss">:where</span> <span class="p">[</span><span class="nv">?dog</span> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">]</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/dogs</span> <span class="nv">?dog</span><span class="p">]</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/name</span> <span class="nv">?owner-name</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  Whoa.  What is the deal with those question marks?</p>

<p><strong>Datomic:</strong> The things with the question marks are considered as variables that we will <em>unify</em> to find the answer.  For example, we are looking for something that we are going to call <code>?owner-name</code>. I am going the use the following constraints with my facts to try to find the answer:</p>

<ul>
<li>There is an entity that we are going to call <code>?dog</code> that has the attribute <code>:dog/name</code> that is &ldquo;Tiny&rdquo;</li>
<li>There is an entity that we are going to call <code>?owner</code> that has an attribute <code>:owner/dogs</code> that is the same as the <code>?dog</code> entity</li>
<li>That same <code>?owner</code> entity also has an attribute <code>:owner/name</code> that has the value <code>?owner-name</code></li>
</ul>


<p><strong>Human:</strong>  Alright, so when I ask for this query, do I need to give you a database value too?</p>

<p><strong>Datomic:</strong>  Yes.  They should have the form of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/q</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">datalog-query</span><span class="p">]</span> <span class="nv">db-value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember, to get the current db value use <code>(d/db conn)</code>.</p>

<p><strong>Human:</strong>  Ok.  Here we go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/q</span> <span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="nv">?owner-name</span>
</span><span class='line'>       <span class="ss">:where</span> <span class="p">[</span><span class="nv">?dog</span> <span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/dogs</span> <span class="nv">?dog</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/name</span> <span class="nv">?owner-name</span><span class="p">]]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong></p>

<p>The answer is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span><span class="p">{[</span><span class="s">&quot;Lucy&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  What if I want to pass the dog name as a parameter?  How do I communicate that to you?</p>

<p><strong>Datomic:</strong>  You will need to use an <code>in</code> clause in the query like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="p">[</span><span class="nv">blah</span><span class="p">]</span>
</span><span class='line'>   <span class="ss">:in</span> <span class="nv">$</span> <span class="nv">?dog-name</span>
</span><span class='line'>   <span class="ss">:where</span> <span class="p">[</span><span class="nv">blah</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The $ is shorthand for the database value and the <code>?dog-name</code> is what you will pass in as a parameter in the query after the db-value.</p>

<p><strong>Human:</strong>  Like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/q</span> <span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="nv">?owner-name</span>
</span><span class='line'>       <span class="ss">:in</span> <span class="nv">$</span> <span class="nv">?dog-name</span>
</span><span class='line'>       <span class="ss">:where</span> <span class="p">[</span><span class="nv">?dog</span> <span class="ss">:dog/name</span> <span class="nv">?dog-name</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/dogs</span> <span class="nv">?dog</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="nv">?owner</span> <span class="ss">:owner/name</span> <span class="nv">?owner-name</span><span class="p">]]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">)</span> <span class="s">&quot;Tiny&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong>  Exactly right.  The answer is Lucy again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span><span class="p">{[</span><span class="s">&quot;Lucy&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  I think I am getting the hang of this!  Another quick question.  How would I go about asking you which dogs have cheese as their favorite treat?  I would want the dog&rsquo;s name and breed back.</p>

<p><strong>Datomic:</strong>  You would simply construct another datalog query.  This time I would recommend that you combine the <code>pull</code> syntax within the <code>find</code> part of the query.  The <code>pull</code> syntax is great at selecting attributes from an entity.  So the <code>find</code> part would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[(</span><span class="nf">pull</span> <span class="nv">?dog</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="ss">:dog/breed</span><span class="p">])</span> <span class="nv">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return the attributes of the <code>:dog/name</code> and the <code>:dog/breed</code>.  The three dots on the end will let me know that you want a collection returned, so I will give you back a simple vector with the entity attributes requested, instead of the set of vectors I normally give back.</p>

<p>The <code>where</code> section of the query is going to look for the <code>?dog</code> entity that matches the <code>:dog/favorite-treat</code> attribute with &ldquo;Cheese&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="p">[(</span><span class="nf">pull</span> <span class="nv">?dog</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="ss">:dog/breed</span><span class="p">])</span> <span class="nv">...</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:where</span> <span class="p">[</span><span class="nv">?dog</span> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  Then I put it together with the current database value in a <code>d/q</code> function?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">d/q</span> <span class="o">&#39;</span><span class="p">[</span><span class="ss">:find</span> <span class="p">[(</span><span class="nf">pull</span> <span class="nv">?dog</span> <span class="p">[</span><span class="ss">:dog/name</span> <span class="ss">:dog/breed</span><span class="p">])</span> <span class="nv">...</span><span class="p">]</span>
</span><span class='line'>       <span class="ss">:where</span> <span class="p">[</span><span class="nv">?dog</span> <span class="ss">:dog/favorite-treat</span> <span class="s">&quot;Cheese&quot;</span><span class="p">]]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">d/db</span> <span class="nv">conn</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Datomic:</strong> Yup.  The answer is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[{</span><span class="ss">:dog/name</span> <span class="s">&quot;Fluffy&quot;</span>, <span class="ss">:dog/breed</span> <span class="s">&quot;Poodle&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:dog/name</span> <span class="s">&quot;Tiny&quot;</span>, <span class="ss">:dog/breed</span> <span class="s">&quot;Great Dane&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Human:</strong>  Thanks so much.  I think I beginning to get the hang of schemas and queries.  What other things do I need to know about you?</p>

<p><strong>Datomic:</strong>  Well, you have just scratched the surface really.  One of the most interesting things about me is that I never forget facts.  You can add new facts, like Tiny&rsquo;s favorite food is now hotdogs, but I won&rsquo;t forget that he liked cheese at another point in time.</p>

<p><strong>Human:</strong> That sounds really interesting.  I think I need some tea and cookies before I delve into that.  Let&rsquo;s take a short break and talk again soon.</p>

<p><strong>Datomic:</strong>  My pleasure.  I look forward to it.</p>

<p><em>Special thanks to <a href="https://twitter.com/ohpauleez">Paul deGrandis</a> for
the conversation idea :)</em></p>

<p><em>(P.S. Humans, there are some great <a href="http://www.datomic.com/training.html">Datomic Training Videos</a> if you want to learn more)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wild Horses, Things, and Creativity]]></title>
    <link href="http://gigasquid.github.io/blog/2015/05/30/wilds-horses-things-and-creativity/"/>
    <updated>2015-05-30T10:53:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/05/30/wilds-horses-things-and-creativity</id>
    <content type="html"><![CDATA[<p><img src="https://nmbdesigner.files.wordpress.com/2012/05/where-the-wild-things-are-2.jpeg"></p>

<p>Sometimes I want to create something and I run into a limitation or
constraint. It is at this point where I am tempted to give up and say
that I just <em>can&rsquo;t</em> do that.</p>

<p>At this time,  I remember Maurice Sendak and the origins of <em>Where
the Wild Things Are</em>.  In this <a href="http://www.pbs.org/now/arts/sendak.html">interview with Bill Moyers</a>, he explains
how the book was originally titled <em>Where the Wild Horses Are</em>, but he
couldn&rsquo;t draw horses.</p>

<blockquote><p>She was this torrential woman, passionate woman, who could spot talent 10 miles away. I had no education. I did not go to art school. My drawing was so crude. I had shines on shoes like in Mutt &lsquo;n&rsquo; Jeff in Walt Disney. And she saw through that monstrous crudity and cultivated me, really made me grow up. And then, it was time to do my own picture book.</p>

<p>And I came to her with a title that was &ldquo;Where the Wild Horses Are.&rdquo; And she just loved that. It was so poetic and evocative. And she gave me a contract based on &ldquo;Where the Wild Horses Are.&rdquo; And then, it turned out after some very few months to her chagrin and anger, I couldn&rsquo;t draw horses. The whole book would have to be full of horses to make the book make sense.</p>

<p>And when I tried a number of things, I remember the acid tones. She said, &ldquo;Maurice, what can you draw?&rdquo; Okay. Cause she was investing in a full color picture book. That was an enormous thing back then.</p>

<p>And so, I thought well things, things.</p></blockquote>

<p>Limits or constraints cannot hold back creativity.  But it can help
mold it in surprising directions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Panic While Writing a Clojure Book]]></title>
    <link href="http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book/"/>
    <updated>2015-05-22T09:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book</id>
    <content type="html"><![CDATA[<p>I made it to that magical moment when the Clojure book I had been working on so long was published and I could actually hold it in my hand.</p>

<p><img src="https://pbs.twimg.com/media/CDWsQPCUgAERViK.jpg"></p>

<p>It was an immense project and I am very happy that it is finally done.  Since then, I met some people that are interested in writing books as well.
They asked if I had any insights or tips having gone through the process as a first time author.  I have collected them in this post in hopes that they will be helpful to those going through the process themselves.</p>

<p>The very first thing to do is to get an outline for your book.</p>

<h3>Start with an Outline</h3>

<p>Ideas are soft and squishy.  They drift into different shapes like clouds, and can melt away just as quickly.  One of the hardest things to do was trying to arrange all those ideas in my head into an initial form that would serve as the structure for the entire book.  I would pick up a pen and paper, start feeling overwhelmed, and suddenly remember I had something else very pressing to do.  I successfully avoided starting a book for quite a while, until one day I cornered myself.  I decided that I write my book outline on a long plane flight.  With salted peanuts as fuel, and nowhere to escape, I finally wrote an outline.  It wasn&rsquo;t perfect but it was a start and looking back and it was not too far off.  Here it is in all of its original roughness.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Title: Living Clojure
</span><span class='line'>
</span><span class='line'>From beginning steps to thriving in a functional world
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>(Each Chapter will follow quotes from Alice in Wonderland and very use ideas from some examples)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Book 1 - Beginner steps
</span><span class='line'>
</span><span class='line'>Chapter 1 - Are you comfortable?  Talk about how OO is comfortable but there is another world out there and new way of thinking functionally.
</span><span class='line'>            White Rabbit goes by
</span><span class='line'>Chapter 2 - Forms & Functions - Falling down the rabbit hole
</span><span class='line'>Chapter 3 - Functional Transformations - Growing bigger and smaller - Key to thinking functionally is about transforming data from one shape to another shape.
</span><span class='line'>            Map & Reduce
</span><span class='line'>Chapter 4 - Embracing side effects  - Clojure is impure functional language (The rabbit's glove)  - Cover do and io stuff. Also basic stuff about 
</span><span class='line'>            STM atoms and agents/ Protocols
</span><span class='line'>Chapter 5 - Libraries, Libraries  - - how to use Leiningen
</span><span class='line'>            build system. Where to find clojure libraries, how to use
</span><span class='line'>            Serpents - camel-snake-kebab
</span><span class='line'>Chapter 6 - core.asyc - Tea Party introduction to the core.async library
</span><span class='line'>Chapter 7 - Clojure web - Chesire cat  - introduction to Ring, Cheshire library, ClojureScript and OM 
</span><span class='line'>
</span><span class='line'>Book 2 - From here to there - thriving in a functional world
</span><span class='line'>
</span><span class='line'>Training plan for thriving in a functional world.
</span><span class='line'>
</span><span class='line'>Chapter 8 - Join the community - Surround yourself with other Clojure enthusiats
</span><span class='line'>  - Twitter clojure
</span><span class='line'>  - Github account
</span><span class='line'>  - Clojure mailing list
</span><span class='line'>  - Prismatic clojure news
</span><span class='line'>  - Meetup for local community group.  If there is not one in your area. start one!
</span><span class='line'>  - Attend a Clojure conj
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Chatpter 9 - Practice and build up 
</span><span class='line'>Like Couch to 5K 7 week training program to work up to
</span><span class='line'>practicing Clojure
</span></code></pre></td></tr></table></div></figure>


<p>Now that I had an outline.  I just needed to figure out how long it would take me to write the book.</p>

<h3>However Long You Think It Will Take &ndash; You Are Wrong</h3>

<p>Having never written a book before, I had <em>no idea</em> how much work it would be.  The closest thing I had to compare it to was writing a blog post.  I figured writing a chapter would be roughly equivalent to writing a blog post.  If I could go back in time, this is the moment where my future self would pour a glass of ice water on my past self.  Writing a book is nothing like that.  It is a lot of time and work.  If I <em>had</em> to compare it now to writing blog posts, the process would be this.</p>

<pre><code>- You write a blog post.
- You rewrite the blog post.
- You write a second blog post.
- You rewrite that blog post and the first one too.
- You write another blog post.
- You rewrite all three post .....
</code></pre>

<p>So, if you have to commit to deadlines, make sure you remember how hard it will be, and then double the number.</p>

<p>Speaking of deadlines, they suck, but you should have them.</p>

<h3>Make Deadlines</h3>

<p>Deadlines are not fun.  In fact, deadlines might even be a source of potential panic.  But for me, they were necessary evil.  There were a few beautiful times when inspiration came knocking at my door and I couldn&rsquo;t wait to start writing.  But most of the time, inspiration was off somewhere else eating biscuits.  The only thing that actually moved the book along was me knowing that I needed to get the next chunk done by a certain date.</p>

<p>I found the best thing to do was to set aside a small bit of time on a daily basis to write something.</p>

<h3>Routine, Routine, Routine</h3>

<p>A daily routine was the most crucial thing for me.  Life is really busy with work and family.  It is so easy to get overwhelmed with daily life.  I decided that mornings would work best for me.  So I would stumble in to my computer an hour before work, with a hot cup of tea in hand, and write something.  Some days I actually did quite a bit.  Other days, I would write one sentence and declare it done.  But, I would always do <em>something</em>.  Even though those small slices of time didn&rsquo;t seem like a lot, they added up over the course of a week.</p>

<p>Another curious thing happens when you do something, even a little bit, day after day.  You start to get better at it.</p>

<h3>Writing is a Different Skill from Coding</h3>

<p>I was used to writing code all day.  I found that the code writing skills are not the same as writing about code.  In fact, I found it really hard to do at the start.  But, just like writing code, you get better with practice.  And to get better at anything, feedback is really important.</p>

<h3>Get and Trust Feedback</h3>

<p>After each chapter, I would get feedback from my editor.  She was awesome and provided ways for me to improve the experience for the reader.  I lost track of how many times I rewrote that first chapter, but each time it would get a bit better and I would improve as well.  After the book was about half done it was sent out to others for technical review.  They provided feedback not only on the writing style but also the technical content, making sure that it all made sense.</p>

<p>The feedback loop is much slower for writing a book than writing code, but it is just as vital.  The great people providing feedback are you closest partners in this.  You need to trust them.  Especially during the roughest time, the middle of the book.</p>

<h3>The Middle Bit is the Hardest</h3>

<p>I found the hardest time was about halfway through the book.  The initial excitement of the new endeavor had long since worn off.  It seemed like such a mountain of a task, with no end in sight.  I questioned my decision to continue with it daily.  My routine and deadlines kept me moving forward.  But my circle of friends and family kept me sane.  It was great to have an outlet, not only to vent my frustration with my slow progress, but to get kind encouragement to keep my spirits up.</p>

<p>During these dark days, I also ate cheese.</p>

<h3>Celebrate Your Small Victories</h3>

<p>At the end of every chapter or deadline I would fix myself a nice plate of cheese and crackers.  You have to celebrate the small wins.  Cheese is also very tasty.</p>

<p>When the book was finally done.  I had a really tasty plate, complete with Stilton, Brie, and a dependable Cheddar.  I was incredibly happy to be finished. But I knew that I definitely could have not done it without the help of others.</p>

<h3>Thank Everyone that Supported You</h3>

<p>Writing a book is a huge undertaking that is utterly impossible to do alone.  I could have not done it without the help and support of my editor, reviewers, family, friends, as well as the entire Clojure Community.  I am so thankful to all of you that helped my in this project.  You are great.</p>

<p>So, should you go ahead and write that book?</p>

<h3>Do It</h3>

<p>Yes, you should write that book and share your knowledge.  Don&rsquo;t panic, remember to breathe, get some cheese and tea, and go for it!  It will be awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition with Game of Thrones Pugs]]></title>
    <link href="http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs/"/>
    <updated>2015-01-26T18:55:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs</id>
    <content type="html"><![CDATA[<p>Clojure&rsquo;s <em>partition</em> and <em>partition-all</em> functions are very useful.
However, I have been bitten a few times using <em>partition</em> when I
really wanted <em>partition-all</em>.  So to help myself and all of you to
remember it, I have made some diagrams with <a href="http://www.designswan.com/archives/the-pugs-of-westeros-cute-pugs-dressed-up-like-characters-in-game-of-thrones.html">pugs from the Game of Thrones</a></p>

<p>In code, <a href="http://clojuredocs.org/clojure.core/partition">partition</a> takes a collection and returns a lazy sequence of
lists, each containing n items.</p>

<p>To demonstrate this with pugs, we will partition 5 pugs into groups of
twos.</p>

<p><img src="https://c4.staticflickr.com/8/7301/15757758964_570d260a31_c.jpg"></p>

<p>This partition will give you two groups of two pugs.</p>

<p><img src="https://c4.staticflickr.com/8/7350/16380203235_91c8c4e9ee_c.jpg"></p>

<p>Notice, (and here is the important part), the last pug is missing.  The Joffrey pug is not included because <em>partition</em> will not include items that do not make a complete partition.  In this case, because there is no group of 2 pugs for the Joffrey pug to be in, it gets dropped.</p>

<p><em>This is the thing that has bitten me in the past.</em></p>

<p>A common use for wanting to partition things is to control the number
of things that you process at one time.  An example of this is sending only 500 items to be processed in a batch job at one time.  If you have a few thousand items to be processed, partitioning them is a good way of chuncking.  However, if you have an arbitrary number of items, you most certainly want to process them <em>all</em> and not drop any.  This is where you should use <em>partition-all</em> instead.</p>

<p><a href="http://clojuredocs.org/clojure.core/partition-all">Partition-all</a> chunks the items as well, but also includes any leftovers.  Demonstrating again with pugs.</p>

<p><img src="https://c4.staticflickr.com/8/7427/15757758884_20bfd014eb_c.jpg"></p>

<p>This <em>partition-all</em> will give you three groups of pugs.</p>

<p><img src="https://c4.staticflickr.com/8/7323/16193980179_229343f7f3_c.jpg"></p>

<p>This time pug Joffrey is not left out!</p>

<p>Remember, think carefully before using <em>partition</em>.  Don&rsquo;t leave a pug out.</p>

<p>By the way, I can&rsquo;t wait till the next season of Game of Thrones.  Until then ..</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('2EoQCtPR2-I');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/2EoQCtPR2-I?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/2EoQCtPR2-I/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=2EoQCtPR2-I" id="2EoQCtPR2-I" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gigasquid's Radar 2014]]></title>
    <link href="http://gigasquid.github.io/blog/2014/12/17/gigasquids-radar-2014/"/>
    <updated>2014-12-17T20:55:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/12/17/gigasquids-radar-2014</id>
    <content type="html"><![CDATA[<p><img src="https://c4.staticflickr.com/8/7554/16045999682_b4658620c1_c.jpg"></p>

<p>It&rsquo;s that time of year for <em>radars</em> to be published.  So this year, I thought I would publish one of my own. Here is what is on my radar.</p>

<h2>Languages</h2>

<ul>
<li><em>Adopt</em>: Clojure &ndash; It is fantastic language. Really.</li>
<li><em>Trial</em>: <a href="https://github.com/pixie-lang/pixie">Pixie</a> &ndash; The promise of a really fast startup Clojure inspired language.  I am impressed already and it is only a few months old.</li>
<li><em>Assess</em>: <a href="http://www.idris-lang.org/">Idris</a> &ndash; I have only seen this lang briefly, but was impressed by the typing and proofing abilities.</li>
<li><em>Hold</em>: JavaScript &ndash; I don&rsquo;t have to say more, you know what I mean.</li>
</ul>


<h2>Cute Animals</h2>

<ul>
<li><em>Adopt</em>: <a href="http://www.llamas.org/imgs/corner.jpg">Llamas</a></li>
<li><em>Trial</em>: <a href="http://www.preciousanimals.com/wp-content/plugins/woo-tumblog/functions/thumb.php?src=wp-content/uploads/2012/03/Cute-Animals-4e41e26ba45d7.jpg&amp;w=530&amp;h=&amp;zc=1&amp;q=90">Alpacas</a></li>
<li><em>Assess</em>: <a href="http://i.dailymail.co.uk/i/pix/2014/08/27/article-0-20D869FB00000578-191_634x758.jpg">Wombats</a></li>
<li><em>Hold</em>: <a href="http://4.bp.blogspot.com/-expAkvezlsw/UjJIGE3EqMI/AAAAAAAABoo/UcCeUo7ALtc/s1600/cute-hedgehog-dino-toy.jpg">Hedgehogs</a></li>
</ul>


<h2>Robots</h2>

<ul>
<li><em>Adopt</em>: <a href="http://ardrone2.parrot.com/">Parrot AR Drone</a> Hackable flying drone with sonar and cameras. Doesn&rsquo;t injure your fingers too much when you get them caught in the blades.</li>
<li><em>Trial</em>: <a href="http://gigasquidsoftware.com/blog/2014/03/20/world-domination-with-hexapods-and-clojure/">PhantomX Hexapod</a> A bit pricey and delicate, but built from kit and is super cool when you get it going.</li>
<li><em>Assess</em>: <a href="https://www.thalmic.com/en/myo/">Myo Armband</a> Control things with a flick of your wrist.  Mine finally arrived after a year and a half wait.  I haven&rsquo;t had time to play with it, but I have high hopes for it.</li>
<li><em>Hold</em>: Roombas &ndash; I love my Roombas, but I am not sure the latest models have an ROI port to hack :(</li>
</ul>


<h2>Tasty Food</h2>

<ul>
<li><em>Adopt</em>: <a href="http://upload.wikimedia.org/wikipedia/commons/3/38/Buttered_crumpet2.jpg">Crumpets</a> &ndash; Put lots of butter on them toasted. Yum!</li>
<li><em>Trial</em>: <a href="http://www.aussiefoodshop.com/i/peppe%20biscuits/dark_choc_mint.JPG">Mint Tim Tams</a>&ndash;  Minty, just the right amount of crunch. Hard to find in the US, but a treat when you do.</li>
<li><em>Assess</em>: <a href="http://en.wikipedia.org/wiki/Raclette">Raclette</a> &ndash; I have never actually had it, but it is melted cheese, it has to be incredible.</li>
<li><em>Hold</em>: Egg Nog &ndash; Don&rsquo;t drink it directly from the bowl.</li>
</ul>


<p>Happy Holidays Everyone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure FizzBuzz without Conditionals]]></title>
    <link href="http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals/"/>
    <updated>2014-11-13T21:43:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals</id>
    <content type="html"><![CDATA[<p><img src="https://c1.staticflickr.com/5/4136/4825113119_9630b7927f.jpg"></p>

<p>Sure you may have done FizzBuzz before.  Maybe you have even done it
in Clojure.  But have you done it without the use of <em>any</em>
conditionals?</p>

<p>As your brain starts to work on the <em>how</em> this we be done, you might
be wondering <em>why</em> you should do this in the first place?</p>

<p>There are two very good reasons for this.  The first is that it is a
<em>kata</em>.</p>

<h2>Katas build your code practice</h2>

<p><img src="https://c4.staticflickr.com/4/3552/3434757877_711709da58_b.jpg"></p>

<p>Code katas build your skill through practice.  It doesn&rsquo;t matter if
you are a beginner or an expert.  Just, like in all those martial arts
movies with the swordsman practicing, so must we.  We stretch and
flex our coding muscles with katas to grow them and keep them in shape.</p>

<p>Yes, you may code every day at work.  But it is not the same as kata
practice.  So much of <em>day to day</em> work involves complexity
with large interconnected concerns.  Our  kata practice cuts the extra
complexity out and leaves you alone with a focused small problem.</p>

<p>The second reason involves why you
should try it, this time,  <em>without conditionals</em>.  The answer is <em>creativity</em>.</p>

<h2>Constraints build creativity.</h2>

<p>It turns out that constraints are a
<a href="http://www.forbes.com/sites/groupthink/2013/07/12/creativity-how-constraints-drive-genius/">key way to drive creativity</a>.
Programming does not only require technical skills, but also
creativity. We are seldom asked to build software without constraints.
It drives design.  Sure, it can be annoying when we have to communicate with
a server that is only active on Tuesday and emits its response in
Morse Code.  But it gives us boundaries to unleash our creative
spirit.</p>

<p>So go for it.</p>

<h2>Give it a try</h2>

<p>Ready?  Here are the details.</p>

<ul>
<li>Given a number, if it number is divisible by 3 return &ldquo;fizz&rdquo;.</li>
<li>If it is divisible by 5 return &ldquo;buzz&rdquo;.</li>
<li>If it is divisible by 3 and 5 return &ldquo;fizzbuzz&rdquo;.</li>
<li>Otherwise, just return the number.</li>
<li>Don&rsquo;t use any conditionals like <em>if</em> <em>else</em> <em>case</em> <em>cond</em>.</li>
</ul>


<p>When you are done, you can check out some of the other solutions. Try
not to peek until you have done your version first though.</p>

<p>(There are some really awesome ones so far).</p>

<p><em>Feel free to link to yours in the comments too</em> :)</p>

<h2>Solutions</h2>

<p><a href="https://twitter.com/adereth/status/530740818420957184">From @aderth</a></p>

<p><a href="https://twitter.com/IamDrowsy/status/530900853855899648">From @IamDrowsy</a></p>

<p><a href="https://twitter.com/bryanwoods/status/530822584963584000">From @Bryanwoods</a></p>

<p><a href="https://twitter.com/defndaines/status/532368201472950272">From @defndaines</a></p>

<p><a href="https://gist.github.com/gigasquid/dc4686e8245154482be8">From <em>me</em></a></p>

<p><a href="https://twitter.com/hyPiRion/status/530718638064828416">From @hyPiRion</a> &ndash;
a couple of notes for this one is that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">+</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">*</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And once you think about that, you might want to read <a href="https://gist.github.com/igstan/c3797e51aa0784a5d275">this</a> :)</p>

<p>Happy Clojure Kataing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Five Stages of Writing a Book]]></title>
    <link href="http://gigasquid.github.io/blog/2014/11/10/the-five-stages-of-writing-a-book/"/>
    <updated>2014-11-10T08:37:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/11/10/the-five-stages-of-writing-a-book</id>
    <content type="html"><![CDATA[<p><img src="http://c1.staticflickr.com/9/8078/8314929977_28fd740070_c.jpg"></p>

<ol>
<li><em>Denial</em>: I am not really writing a book.</li>
<li><em>Anger</em>: Why did I ever decide to write a book?</li>
<li><em>Bargaining</em>: If I just finish this book, I promise never to write another one.</li>
<li><em>Depression</em>: I am never going to finish this book.</li>
<li><em>Resolution</em>: I am writing a book and I am going to give it my <em>frigging all</em>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes and Tips on Working from Home]]></title>
    <link href="http://gigasquid.github.io/blog/2014/10/31/notes-and-tips-on-working-from-home/"/>
    <updated>2014-10-31T08:16:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/10/31/notes-and-tips-on-working-from-home</id>
    <content type="html"><![CDATA[<p><img src="http://c4.staticflickr.com/8/7538/15671394561_261bf74b95.jpg"></p>

<p>Recently, I switched from a traditional, &ldquo;go to an office&rdquo;
job,
to working from my home.  It took some time to setup my home
work space and get used to working remotely, but I finally have a
system working for me.  In this post, I thought I would share some things that I
found useful.</p>

<h3>Window Seat Please</h3>

<p>If at all possible, locate your home work space near a window.  The
natural light does wonders for you mood and being able to glance up
and look at trees and real life is a refreshing break from staring at
code all day.</p>

<h3>A Door is Great</h3>

<p>Having a door to your workspace is a real advantage.  It enables you
to close off noise and other activity that might be going on in the
house. It is also <em>incredibly</em> useful if you have small children.  For
my kids, if the door is closed, then it is a sign that Mommy is
working &ndash; do not disturb.</p>

<h3>Invest in a good chair.</h3>

<p>Backs are very important.  I started working from home with just my
kitchen chair &ndash; big mistake.  After a day or two, my back was crying
out for something better. I did some research on good chairs to get
and I ended up with a <a href="http://store.steelcase.com/brochures/leap/">Steelcase Leap Chair</a>.  They are not cheap.
But, I was able to get a refurb one that was considerably less than
new, and my back loves it.</p>

<h3>Don&rsquo;t Sit All the Time</h3>

<p>Even with my great chair, it is not the best to sit constantly.  I had
tried a straight standing desk a while back and I found that standing
<em>all</em> the time was not the best for me.  I prefer to mix it up.  I got
a adjustable <a href="http://www.geekdesk.com/">Geek Desk</a>.  I generally stand
up in the morning and sit in the afternoons.</p>

<h3>Freedom from a Headset with a Good Mic</h3>

<p>I have used a headset before when doing remote calls.  They work fine,
but after a while, I found it annoying to have on my head all day.
I switched to a <a href="http://www.bluemic.com/snowball/">Blue Snowball Mic</a>
at home and am really happy with it.  My voice comes in clear and I am
headset free.</p>

<h3>Dual Monitors for the Win</h3>

<p>I use two Thunderbolt displays.  One monitor I use for communications,
it has my email, chat, and video on it.  The other monitor I use for
the codez.  It works out pretty well to switch back and forth.</p>

<h3>Good Software for Communication</h3>

<p>Good communication is a must for working remotely. Someone cannot just
wander over to your desk and ask you a question.  Here is a list of
communication tools I use at work:</p>

<ul>
<li><a href="https://slack.com/">Slack</a> &ndash; for team communication.</li>
<li>Google Docs</li>
<li><a href="http://zoom.us/">Zoom</a> &ndash; for video and screen sharing.  It is way
better than Google hangouts in terms of video quality.</li>
<li>Apple&rsquo;s Screen sharing &ndash; for pair code development.  This let&rsquo;s
people use whatever editor they are comfortable with, yet you can
see the code and still share control.</li>
</ul>


<h3>Pair Programming is Awesome</h3>

<p>At work, we do pair programming most of the time.  I really like to
work this way.  One of the things that I was concerned about in
switching to remote work was being lonely. Pair programming really
helps in this.  I am usually working with someone during
the day, with one monitor going with video and voice, while the other
monitor has the code we are working on.  For me, it has all the advantages of
idea sharing and group problem solving.  I realize that working this
way is not for everyone, but I am digging it.</p>

<h3>Routine is Everything</h3>

<p>When working for home, I have found it is crucial to have a good
routine.  Since we do a lot of pair programming at work, we all
generally keep the same hours.  Being a distributed team over North
America, this means I start work at around 10am EST.  I have found
that having a routine a sticking to it helps structure my day.  I get
up, get dressed, eat breakfast, just like I was going to work.  Then, I
usually hack for a bit on personal stuff in the morning until it is
time for work.  Then at lunch, I go for a run or work out.  Finally,
and most importantly, in the evening, I leave the computer behind and
devote time to family.</p>

<h3>Don&rsquo;t Forget to Visit with Other Humans</h3>

<p>The downside of working from home is that it is very easy to <em>not</em>
leave home.  At one point, I realized that I had not left the house
for a week.  Not good. I try go to a social event where I will
meet with other developers and friends every week.  There is a nice
developer <a href="https://teamgaslight.com/coffee">coffee group</a> that meets on Fridays.  I also help run our
<a href="https://cincyfp.wordpress.com/">Cincinnati Functional Programmer&rsquo;s
Group</a> here in town.  In general,
I find that if I am driving somewhere and see people walking on the
street and start thinking, &ldquo;Look Humans!&rdquo;, it is time to get out and
socialize a bit more.  Working remotely, makes going to conferences
and being with other developers in person even more fun.</p>

<h3>Summary (with a Dog Pic)</h3>

<p>I have found working remotely to be quite enjoyable so far.  It does
take an extra effort to keep your life structured and communication
flowing properly, but it is worth it.</p>

<p>My next challenge, since it is getting colder, is to get my dog
to sleep on my feet while I work.  No luck so far.</p>

<p>If anyone has
any tips, let me know.</p>

<p><img src="https://c4.staticflickr.com/8/7480/15053352894_a2ac5db294.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Green Eggs and Transducers]]></title>
    <link href="http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers/"/>
    <updated>2014-09-06T15:47:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers</id>
    <content type="html"><![CDATA[<p><img src="http://upload.wikimedia.org/wikipedia/en/c/c2/Greenegg.gif"></p>

<p>A quick tour of Clojure Transducers with core.async with Dr. Seuss as a guide.</p>

<p>Follow along at home by:</p>

<ul>
<li><code>lein new green-eggs</code></li>
<li>modify your project.clj to include the following:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">green-eggs</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;try them&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;http://en.wikipedia.org/wiki/Green_Eggs_and_Ham&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.7.0-alpha1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/core.async</span> <span class="s">&quot;0.1.338.0-5c5012-alpha&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Start up a repl and hack in!</li>
</ul>


<h2>Green Eggs and Ham</h2>

<p>Transducers are a new feature of Clojure 1.7.  Instead of trying to explain them with words, let&rsquo;s take a look of them in action.  First we need some data.  Let&rsquo;s def a vector of all the places you could try green eggs and ham.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">green-eggs.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.async</span> <span class="ss">:as</span> <span class="nv">async</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">green-eggs-n-ham</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&quot;in the rain&quot;</span>
</span><span class='line'>   <span class="s">&quot;on a train&quot;</span>
</span><span class='line'>   <span class="s">&quot;in a box&quot;</span>
</span><span class='line'>   <span class="s">&quot;with a fox&quot;</span>
</span><span class='line'>   <span class="s">&quot;in a house&quot;</span>
</span><span class='line'>   <span class="s">&quot;with a mouse&quot;</span>
</span><span class='line'>   <span class="s">&quot;here or there&quot;</span>
</span><span class='line'>   <span class="s">&quot;anywhere&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s create a function that will transform the places into a &ldquo;I would not eat them &hellip;&rdquo; sentence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">i-do-not-like-them</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;I would not eat them %s.&quot;</span> <span class="nv">s</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">i-do-not-like-them</span> <span class="s">&quot;in the rain&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; &quot;I would not eat them in the rain.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need a function to take this result and actually try the green eggs and ham.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">try-them</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">clojure.string/replace</span> <span class="nv">s</span>  <span class="o">#</span><span class="s">&quot; not&quot;</span> <span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">try-them</span> <span class="s">&quot;I would not eat them in the rain.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; &quot;I would eat them in the rain.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have two transformations that we can apply to the vector of green-eggs-n-ham strings.
One of the really nice things about transducers is that you can describe and compose this transformation without a data structure present.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">sam-i-am-xform</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">comp</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">map </span><span class="nv">i-do-not-like-them</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">map </span><span class="nv">try-them</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can run the transformation of the transducers against the data in a few ways.</p>

<ul>
<li><em>into</em>: Non-lazy turn the transformation into a collection</li>
<li><em>sequence</em>: Same thing but lazy</li>
<li><em>transduce</em>: Acts like reduce on the all the transformed elements</li>
<li>With <em>core.async</em> channels doing the transformations.</li>
</ul>


<p>Let&rsquo;s look at the green eggs and ham example for each one of these ways:</p>

<h3>Into</h3>

<p>Into takes a transducer and collection to work on and returns the vector we asked for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">sam-i-am-xform</span> <span class="nv">green-eggs-n-ham</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; [&quot;I would eat them in the rain.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them on a train.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them in a box.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them with a fox.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them in a house.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them with a mouse.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them here or there.&quot;</span>
</span><span class='line'><span class="c1">;;     &quot;I would eat them anywhere.&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sequence</h3>

<p>Sequence takes similar arguments, but as promised, returns a lazy sequence that we can interact with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">class </span><span class="p">(</span><span class="nf">sequence</span> <span class="nv">sam-i-am-xform</span> <span class="nv">green-eggs-n-ham</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; -&gt; clojure.lang.LazyTransformer</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">1</span> <span class="p">(</span><span class="nf">sequence</span> <span class="nv">sam-i-am-xform</span> <span class="nv">green-eggs-n-ham</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; -&gt; (&quot;I would eat them in the rain.&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transduce</h3>

<p>If we want to finally arrange all our sentences in the vectors into one string, we would use reduce.  The way to do this with transducers is to use <em>transduce</em>.  It takes a function of two arguments to perform the reduce, as well as an initial data input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">transduce</span> <span class="nv">sam-i-am-xform</span> <span class="o">#</span><span class="p">(</span><span class="nb">str </span><span class="nv">%1</span> <span class="nv">%2</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="s">&quot;&quot;</span> <span class="nv">green-eggs-n-ham</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; -&gt; &quot;I would eat them in the rain.</span>
</span><span class='line'><span class="c1">;;     I would eat them on a train.</span>
</span><span class='line'><span class="c1">;;     I would eat them in a box.</span>
</span><span class='line'><span class="c1">;;     I would eat them with a fox.</span>
</span><span class='line'><span class="c1">;;     I would eat them in a house.</span>
</span><span class='line'><span class="c1">;;     I would eat them with a mouse.</span>
</span><span class='line'><span class="c1">;;     I would eat them here or there.</span>
</span><span class='line'><span class="c1">;;     I would eat them anywhere.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;_note: In  1.7.0-alpha2, transduce changed and you need to use a</span>
</span><span class='line'><span class="c1">;;(transduce sam-i-am-xform (completing #(str %1 %2 &quot; &quot;)) &quot;&quot; green-eggs-n-ham)</span>
</span><span class='line'><span class="c1">;;instead.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Core.async</h3>

<p>Core.async has a really nice way to define channels with a transducer that will transform each element on the channel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">sam-i-am-chan</span> <span class="p">(</span><span class="nf">async/chan</span> <span class="mi">1</span> <span class="nv">sam-i-am-xform</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s define another channel to reduce the results of the sam-i-am-chan to a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">result-chan</span> <span class="p">(</span><span class="nf">async/reduce</span> <span class="o">#</span><span class="p">(</span><span class="nb">str </span><span class="nv">%1</span> <span class="nv">%2</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="s">&quot;&quot;</span> <span class="nv">sam-i-am-chan</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&rsquo;s actually put the green-eggs-n-ham data onto the sam-i-am-chan and let the data transformations flow&hellip;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">async/onto-chan</span> <span class="nv">sam-i-am-chan</span> <span class="nv">green-eggs-n-ham</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At last,
we can get our result off the result channel and revel in the beauty of asynchronous data transducers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">i-like-them</span> <span class="p">(</span><span class="nf">async/&lt;!!</span> <span class="nv">result-chan</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">i-like-them</span>
</span><span class='line'><span class="c1">;; -&gt; &quot;I would eat them in the rain.</span>
</span><span class='line'><span class="c1">;;     I would eat them on a train.</span>
</span><span class='line'><span class="c1">;;     I would eat them in a box.</span>
</span><span class='line'><span class="c1">;;     I would eat them with a fox.</span>
</span><span class='line'><span class="c1">;;     I would eat them in a house.</span>
</span><span class='line'><span class="c1">;;     I would eat them with a mouse.</span>
</span><span class='line'><span class="c1">;;     I would eat them here or there.</span>
</span><span class='line'><span class="c1">;;     I would eat them anywhere.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transducers are elegant and powerful, just like the rest of Clojure.  Try them, you will like them :)</p>

<p><img src="http://ecx.images-amazon.com/images/I/51JqhoQCtgL.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Proper Pronunciation of Clojure's Assoc]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc/"/>
    <updated>2014-07-28T20:27:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc</id>
    <content type="html"><![CDATA[<p>Sometimes I pause before talking to someone about Clojure code. Not because I am unsure of the code, but because I am unsure of
how to pronounce the code.  The particular code in question is
Clojure&rsquo;s <em>assoc</em>.  I have heard it pronounced two ways. One is
&ldquo;assosh&rdquo;, the other is &ldquo;assok&rdquo;.  So, to determine it, I decided to conduct a
scientific poll of the Clojure community.</p>

<p>I posted the poll on
<a href="https://twitter.com/gigasquid/status/493891057906896896">twitter</a> to
the Cojure community who follow me.  The control group poll was not viewed
by those who do not follow me, and/or, are not on twitter.</p>

<p>The results were startling.</p>

<p><img src="https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg"></p>

<ul>
<li>assosh &ndash; 10</li>
<li>assok  &ndash; 8</li>
<li>assose &ndash; 2</li>
<li>Jeremy &ndash; 1</li>
<li>asoaksh &ndash; 1</li>
</ul>


<p>The community is clearly deeply divided on this important question.</p>

<p>After sifting through the raw data, I remembered my statistical analysis and threw out the extremes.</p>

<p><img src="https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg"></p>

<p>The conclusion was still a stark reality.</p>

<p><em>We do not as a community know how to pronounce assoc.</em></p>

<h2>Solution</h2>

<p>I can only see one way forward.  We must address this as a community.
I propose that the community documentation of <a href="http://clojuredocs.org/">Clojure Docs</a>
and <a href="http://grimoire.arrdem.com/">Grimoire</a> modify their sites to include audio pronunciation like <a href="http://www.macmillandictionary.com/us/media/british/uk_pron/l/lla/llama/llama_British_English_pronunciation.mp3">this</a>.</p>

<p>Remember, I&rsquo;m pulling for you.  We are all in this together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure X-Men]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/27/clojure-x-men/"/>
    <updated>2014-07-27T20:12:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/27/clojure-x-men</id>
    <content type="html"><![CDATA[<p><img src="https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg"></p>

<p>Nobody knows how it happened.  Some people think it was due to the rapid expansion and adoption of Clojure.  Other people say that the language itself was caused by something deeper and more magical.  No one knows for sure.  All that we really know is that people starting being born with extraordinary powers.  Powers that no human had had before.  They were strange and unique to each person they touched.  The only thing that they all had in common, was that each was an aspect of the Clojure programming language.</p>

<h2>Luke (AKA Lazy Luke)</h2>

<p>Luke was a teenager when his powers came to him.  His mother always complained that he was lazy.  It was true, he did prefer to sleep until noon.  He also had a habit of putting everything off to the last minute, like saving all his papers for the night before they were due.  One day, though, he noticed something very strange.  He could start to see the future.  Well not really “see” it.  But he could see the infinite possibilities  of the future.  Not very far into the future, but enough.  It was a few milliseconds at first.  But now it was up to a full second.  He checked the Clojure Docs as soon as he realized his gift.  It was lazy evaluation and power to deal with infinite sequences.</p>

<h2>Spress</h2>

<p>Spress, whose real name is Emily, came into her power early.  She was
only 5 years old.  Her mother had taken her to a farm to visit with
the animals.  Her mother had pointed at the cow and told her daughter
that it said “Moo”.  Then, at the horse, saying “Neigh”.  Spress
smiled and  pointed at a bucket and said “cow”.  Her mother shook her head at her, but Spress only smiled bigger.  She said “cow” again.  Then, suddenly, the bucket went “Moo”.  She was immediately taken to the Clojure X-Men school, where they identified her power as protocols.  She trained her power and now is so good at solving the “expression problem”, she is known as “Spress”.</p>

<h2>Multi</h2>

<p>Nobody knows Multi’s background.  He came to notice in his early twenties with his powers.  Ordinary humans process sensory input, (like sight, touch, and sound), in an asynchronous fashion.  However, when it gets processed in the brain, it runs into a single pipeline bottleneck  &ndash; consciousness.  Multi’s power is that he can concurrently process his higher level consciousness and reasoning to all this sensory input.  The result is that he can move, think, and perform super fast  and in a super smart way.
He got the power of Clojure’s concurrency.</p>

<h2>Dot</h2>

<p>Dot always had a way with animals.  She had many pets growing up.  Later, she would go into the forest and the animals would seek her out.  She would be found resting by a tree surrounded by deer and birds.  One time, on her walk, she fell down a ditch and had her leg trapped under a log.  Her mother arrived, after searching for her, to see a Bear reach down and gently remove the log.   She stood dumbfounded, as her daughter thanked the bear and it nodded in reply as it turned away.   She could talk with animals effortlessly.  She had the power of Clojure’s Interop.</p>

<h2>Bob</h2>

<p>Bob is the leader of the Clojure X-Men.  He seeks out people with the
power of Clojure and helps train and educate them.  He also is the
most powerful.  He can come into any argument, problem, or challenge
and immediately separate out what is most important to focus on.  He
always knows the right thing to do, without getting bogged down in
unnecessary details .  His power is Clojure’s simplicity.</p>

<p>There might be others out there, we don’t know.  We can only hope, that they are found by Bob and the Clojure X-Men and use their powers for good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love Songs Through History and Why You Should Create]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/06/love-songs-through-history-and-why-you-should-create/"/>
    <updated>2014-07-06T19:52:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/06/love-songs-through-history-and-why-you-should-create</id>
    <content type="html"><![CDATA[<p><img src="http://news.nationalgeographic.com/news/2001/02/lovesong.gif"></p>

<h2>The Earliest Known Love Song</h2>

<p>The earliest known love song was found in an <a href="http://news.nationalgeographic.com/news/2001/02/0213_1stlovesong.html">Egyptian tomb</a>.  The
fragment found in the 4,300 year old tomb read:</p>

<pre><code>I love and admire your beauty. I am under it.
</code></pre>

<h2>Medieval Love Songs</h2>

<p><img src="http://www.luminarium.org/medlit/manasseh.jpg"></p>

<p>Moving forward in history to Medieval times, there are many examples
of love songs. One of them from a great composer in the 14th century,
named <a href="http://public.wsu.edu/~brians/love-in-the-arts/medieval.html">Guillaume de Machaut</a>:, went something like
this:</p>

<pre><code>You are the true sapphire
that can heal and end all my sufferings,
the emerald which brings rejoicing,
the ruby to brighten and comfort the heart.
</code></pre>

<h2>Love Songs from this Summer</h2>

<p><img src="http://upload.wikimedia.org/wikipedia/en/8/8d/Coldplay_-_A_Sky_Full_of_Stars_%28Single%29.png"></p>

<p>Love songs abound on the radio and internet today. One was
released by Coldplay recently, called &ldquo;A Sky Full of Stars&rdquo;.
The lyrics go something like this:</p>

<pre><code>Cause you're a sky
Cause you're a sky full of stars
I'm going to give you my heart
Cause you're a sky
Cause you're a sky full of stars
And cause you light up the path
</code></pre>

<h2>Why Create?</h2>

<h3>I have nothing to say that has not been said</h3>

<p>These are the whispering excuses that I hear in the back of my head when
I sit down at a blank text editor:</p>

<ul>
<li>Someone has already said this.</li>
<li>Someone has already built this algorithm.</li>
<li>Someone has already built this library.</li>
<li>I have nothing to say that has not been said before.</li>
</ul>


<h3>But it has not been said by you.</h3>

<p>Love is a universal human emotion.  We have evidence that people have
been writing about it and singing about it for at least 4,000 years.</p>

<p>Hasn&rsquo;t everything already been said about it?</p>

<p>No.</p>

<p>We still want to hear it again.  We still want to hear it new, said by
another. It means something slightly different, feels different
when said again by someone else with different experiences, from a
different life, from a different perspective..</p>

<p>The same goes for your writing, your code, your library, and your creation.</p>

<p>So open up your favorite editor and brush aside your fears. It is a
blank canvas, ready for your thoughts and code.</p>

<p>Say it loud</p>

<p>Say it strong</p>

<p>Create</p>

<p>Don&rsquo;t worry if it has been said before</p>

<p>It is new because it is said by you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of the Star Programming Language]]></title>
    <link href="http://gigasquid.github.io/blog/2014/06/11/a-taste-of-the-star-programming-language/"/>
    <updated>2014-06-11T10:38:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/06/11/a-taste-of-the-star-programming-language</id>
    <content type="html"><![CDATA[<p>A while ago, I was <a href="http://gigasquidsoftware.com/blog/2013/05/01/growing-a-language-with-haskell-and-instaparse/">exploring creating a programming language with
Instaparse</a>.
I ended up exploring some concepts of Speech Acts proposed by John
McCarthy by creating my first toy language called
<a href="http://gigasquidsoftware.com/blog/2013/06/04/babar-a-little-language-with-speech-acts-for-machines/">Babar</a>.
Shortly after posting a blog about it, I got an email from someone
saying that I might be interested in a full blown, real programming
language that also incorporated Speech Acts.  I happily started
composing an reply to the email that started off with</p>

<pre><code>That is so cool! ...
</code></pre>

<p>Then I realized that the author of the email and language was none
other than
Frank McCabe,
one of the designers of the
<a href="http://bit.ly/1pJtG0x">Go! programming language</a>
(not to be confused with Google Go).  My brain froze
while it was thinking</p>

<pre><code>"OMG!!!! Frank McCabe, a real language designer, just emailed me!".
</code></pre>

<p>This unfortunately, made the rest of my email reply sound something like
this</p>

<pre><code>Frank,
That is so cool!  herp derp derp Speech Acts herp derp John
McCarthy derp...
</code></pre>

<p>His programming language is the Star
Programming Language.  It was originally developed for use at a company that he
worked at called Starview.  It has since been open sourced and moved
to <a href="https://github.com/fmccabe/star">git</a>.  I finally had a bit a
spare time and I had been itching to give
Star a look.  To my pleasant surprise, despite my initial fumbling
email impression,  Frank was open a friendly to
get me started in it.
I have only scratched the surface in exploring the language, but I
wanted to share my initial impressions, as well as point you to some
<a href="https://github.com/gigasquid/star-lang-katas">beginner katas</a> that I
put together, so that you could join in the fun.</p>

<h2>Crash Overview</h2>

<p>Star is a strongly typed, functional language. It is not a pure
functional language because is allows assignment and stateful objects,
but the language is designed in a way that immutable functional
programming is encouraged. The feel of the language is concise but
human readable.</p>

<blockquote><p>Star is a coherent, general-purpose programming language that<br/>    combines elements from a wide variety of existing languages as<br/>    well as adding innovative elements of its own. Star inherits func-<br/>    tional programming in general, a Haskell-style type system, an F#-<br/>    style monad for parallel computations, and Concurrent ML for or-<br/>    chestrating concurrent and parallel applications.</p><footer><strong>Feel different on the Java platform: the star programming language</strong> <cite><a href='http://dl.acm.org/citation.cfm?id=2500837&dl=ACM&coll=DL&CFID=354902651&CFTOKEN=90319052'>dl.acm.org/&hellip;</a></cite></footer></blockquote>


<h3>Hello World</h3>

<p>The best way to get a feel for it is to look at a few examples.  Of
course, let&rsquo;s start off with Hello World.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span><span class="nb">()</span> <span class="kr">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way of doing our Hello World is in a worksheet.
This feature is still in the works, but it will likely turn into a
replacement for a REPL, being integrated into the editor.  The import
statement will also soon not be required.  But a nice feature of using
the worksheeet is that is a combined module and transcript of the
session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">worksheet</span>
</span><span class='line'>
</span><span class='line'><span class="nf">worksheet</span><span class="p">{</span>
</span><span class='line'>  <span class="n">show</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what the output looks like:</p>

<pre><code>Jun 11, 2014 11:21:09 AM  
INFO: "hello world" -&gt; "hello world" at 4
info: execution took 0.053684428
</code></pre>

<h3>Pattern Matching</h3>

<p>Let&rsquo;s take a look at another example.  This time a naive fib function
with pattern matching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">worksheet</span>
</span><span class='line'>
</span><span class='line'><span class="nf">worksheet</span><span class="p">{</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">is</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="n">is</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="ow">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="ow">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="ow">=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="ow">=</span><span class="mi">55</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the fib function is defined with pattern matching.  Also
how the keyword &ldquo;is&rdquo; is used instead of an &ldquo;=&rdquo; to make the code flow
more readable (IMO).</p>

<p>The output of running the program is:</p>

<pre><code>Jun 11, 2014 3:32:38 PM  
INFO: fib(0) = 0 ok at 9
Jun 11, 2014 3:32:38 PM  
INFO: fib(1) = 1 ok at 10
Jun 11, 2014 3:32:38 PM  
INFO: fib(3) = 2 ok at 11
Jun 11, 2014 3:32:38 PM  
INFO: fib(10) = 55 ok at 12
info: execution took 0.039725132
</code></pre>

<h3>Pattern Matching with Guards</h3>

<p>The declaration of pattern matching for functions can also include
guards like in this fizzbuzz example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fizzbuzz</span> <span class="n">has</span> <span class="kr">type</span> <span class="p">(</span><span class="n">integer</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">string</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">3</span><span class="ow">=</span><span class="mi">0</span> <span class="n">and</span> <span class="kt">N</span><span class="o">%</span><span class="mi">5</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;fizzbuzz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">3</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;fizz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">5</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;buzz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">default</span> <span class="n">is</span> <span class="s">&quot;$N&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note the type declaration.  The type declaration is optional.
The complier is smart enough to figure it out.  Sometimes it is more
readable to include the type declaration.  But, it can be left out for
more concise code.</p>

<h3>Cons Lists</h3>

<p>One of the important collection types are cons lists. These are lists
that you add to the front of and are destructed as the first element
and then the rest of the list. To construct a cons list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">testNumbers</span> <span class="n">is</span> <span class="n">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="p">;</span><span class="mi">5</span><span class="p">;</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="p">;</span><span class="mi">8</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span><span class="mi">10</span><span class="p">;</span><span class="mi">11</span><span class="p">;</span><span class="mi">12</span><span class="p">;</span><span class="mi">13</span><span class="p">;</span><span class="mi">14</span><span class="p">;</span><span class="mi">15</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a cons list in a function with pattern matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">listFizzBuzz</span> <span class="n">has</span> <span class="kr">type</span> <span class="p">(</span><span class="n">cons</span> <span class="kr">of</span> <span class="n">integer</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">cons</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'><span class="nf">listFizzBuzz</span><span class="p">(</span><span class="n">nil</span><span class="p">)</span> <span class="n">is</span> <span class="n">nil</span>
</span><span class='line'><span class="nf">listFizzBuzz</span><span class="p">(</span><span class="n">cons</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xs</span><span class="p">))</span> <span class="n">is</span> <span class="n">cons</span><span class="p">(</span><span class="n">fizzbuzz</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">listFizzBuzz</span><span class="p">(</span><span class="n">xs</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function listFizzBuzz takes in a list of integers and turns it
into a list of strings using the fizzbuzz function. If we evaluate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">testNumbers</span> <span class="n">is</span> <span class="n">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="p">;</span><span class="mi">5</span><span class="p">;</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="p">;</span><span class="mi">8</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span><span class="mi">10</span><span class="p">;</span><span class="mi">11</span><span class="p">;</span><span class="mi">12</span><span class="p">;</span><span class="mi">13</span><span class="p">;</span><span class="mi">14</span><span class="p">;</span><span class="mi">15</span><span class="p">}</span>
</span><span class='line'><span class="nf">result</span> <span class="n">is</span> <span class="n">listFizzBuzz</span><span class="p">(</span><span class="n">testNumbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result will look like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="s">&quot;1&quot;</span><span class="p">;</span><span class="s">&quot;2&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;4&quot;</span><span class="p">;</span><span class="s">&quot;buzz&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;7&quot;</span><span class="p">;</span><span class="s">&quot;8&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;buzz&quot;</span><span class="p">;</span><span class="s">&quot;11&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;13&quot;</span><span class="p">;</span><span class="s">&quot;14&quot;</span><span class="p">;</span><span class="s">&quot;fizzbuzz&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are other collection types such as arrays and relations, (which
are really cool &ndash; you can do queries on them like a database), but I haven&rsquo;t explored them well enough to really
talk about yet.</p>

<h3>Actors and Speech Acts</h3>

<p>Star has actors that use three Speech Acts: Notify, Request, and
Query.  The actors themselves can also be concurrent. I explored the
Speech Act/ Actor model with an example from John McCarthy&rsquo;s
<a href="http://www-formal.stanford.edu/jmc/elephant/elephant.html">Elephant 2000 paper</a>,
which is a Airline Reservation system.</p>

<p>To use the notify speech act, you need to define what type the
notifications are on the actors channel.  In my case, the
notifications are either going to be a book(string) method, or a
cancel(string) method.  To book a reservation for a person or cancel
it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="n">tx</span> <span class="n">is</span> <span class="n">book</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="n">or</span> <span class="n">cancel</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actor is defined using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">flight</span><span class="p">((</span><span class="kt">FlightName</span> <span class="n">has</span> <span class="kr">type</span> <span class="n">string</span><span class="p">),</span> <span class="p">(</span><span class="kt">MaxPeople</span> <span class="n">has</span> <span class="kr">type</span> <span class="n">integer</span><span class="p">))</span> <span class="n">is</span> <span class="n">actor</span><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">flightStatus</span> <span class="kt">:=</span> <span class="s">&quot;open&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setFlightStatus</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="kr">do</span> <span class="p">{</span> <span class="n">flightStatus</span> <span class="kt">:=</span> <span class="n">s</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span><span class="s">&quot;booking $pname on #FlightName&#39;s flight: max #MaxPeople current $(size(plist))&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">size</span><span class="p">(</span><span class="n">plist</span><span class="p">)</span> <span class="o">&lt;</span> <span class="kt">MaxPeople</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">extend</span> <span class="n">plist</span> <span class="n">with</span> <span class="n">pname</span><span class="p">;</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">size</span><span class="p">(</span><span class="n">plist</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="kt">MaxPeople</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;sorry .. the flight is full&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">flightStatus</span> <span class="o">!=</span> <span class="s">&quot;open&quot;</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;sorry .. the flight is no longer open&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on</span> <span class="n">cancel</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">delete</span> <span class="p">(</span><span class="kt">X</span> <span class="kr">where</span> <span class="kt">X</span> <span class="ow">=</span> <span class="n">pname</span><span class="p">)</span> <span class="kr">in</span> <span class="n">plist</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">getPassengerList</span> <span class="n">has</span> <span class="kr">type</span> <span class="nb">()</span> <span class="ow">=&gt;</span> <span class="n">list</span> <span class="kr">of</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">getPassengerList</span><span class="nb">()</span> <span class="n">is</span> <span class="n">plist</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is some extra things in the code, but for right now, look at the
book and cancel methods.  These are the functions that will be called
when the actor is notified like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">F</span> <span class="n">is</span> <span class="n">flight</span><span class="p">(</span><span class="s">&quot;flight123&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nf">notify</span> <span class="kt">F</span> <span class="n">with</span> <span class="n">book</span><span class="p">(</span><span class="s">&quot;Carin&quot;</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span>
</span><span class='line'><span class="nf">notify</span> <span class="kt">F</span> <span class="n">with</span> <span class="n">book</span><span class="p">(</span><span class="s">&quot;Bob&quot;</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span>
</span></code></pre></td></tr></table></div></figure>


<p>To query the actor we use :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">x</span> <span class="n">is</span> <span class="n">query</span> <span class="kt">F&#39;s</span> <span class="n">getPassengerList</span> <span class="n">with</span> <span class="n">getPassengerList</span><span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a request with the actor we use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">request</span> <span class="kt">F&#39;s</span> <span class="n">setFlightStatus</span> <span class="n">to</span> <span class="n">setFlightStatus</span><span class="p">(</span><span class="s">&quot;closed&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Go Explore</h2>

<p>I have only scratched the surface of the language, but I have had a
great time.  I invite you to come take a look.</p>

<p>Warning.  Only the brave need apply.  There is no StackOverflow.
There is no user group or IRC channel yet.  These are green fields to
be discovered in the Open Source world.  If it appeals to you as much
as me, jump on in.  Here are a few resources to get you going:</p>

<ul>
<li><p><a href="https://github.com/gigasquid/star-lang-katas">Star-Lang Katas</a>:
Clone the repo or fork the repos.  It has a shell script
to compile and run the star programs.  It also has a emacs mode
plugin and a reference pdf. The most important part is that it has a
template of katas ready for your to solve.  Your challenge:
uncomment the assertion and make the code pass.  My solutions are in
the solutions branch when you are done.  If you finish all of them
and want more, consider creating some and submitting a pull request :)</p></li>
<li><p>I mentioned it earlier, but there is a great overview paper on the
language itself
<a href="http://www.deinprogramm.de/sperber/papers/star.pdf">here</a>.</p></li>
<li><p>Finally, here is the repo of the Star Language itself
<a href="https://github.com/fmccabe/star">https://github.com/fmccabe/star</a>.
Checkout out the tests.  There are tons of sample star programs
that cover the language&rsquo;s features.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[World Domination with Hexapods and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure/"/>
    <updated>2014-03-20T21:00:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure</id>
    <content type="html"><![CDATA[<p>Once you have your <a href="http://gigasquidsoftware.com/blog/2014/03/19/walking-with-hexapods/">hexapod assembled and running using the hand held
controller</a>,
of course, your thoughts naturally turn to world domination.</p>

<h2>The most powerful tool in the world is the Clojure REPL</h2>

<p>World domination requires the most powerful tools available.  That of
course calls for Clojure and the Clojure REPL.  I recommend Emacs
as the editor of choice of such an endeavor.  However, it if you are
content with city, state, or single country domination, other editors
that support Clojure are also fine.</p>

<h2>Connect the XBee to your computer</h2>

<p>First, we need to get the computer to talk to the hexapod wirelessly.
We can do this with a <a href="http://www.trossenrobotics.com/uartsbee">USB to Serial adapter</a>
that uses the paired XBee from the handheld commander.</p>

<p>Take the XBee from the handheld commander</p>

<p><img src="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg"></p>

<p>and move it to the USB to serial adapter</p>

<p><img src="http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg"></p>

<p>Now plug the usb into your computer.</p>

<h2>Get your Clojure ready</h2>

<p>In your clojure project, the only magic you need is the <a href="https://github.com/samaaron/serial-port">Serial Port library</a>. Import the library and list your serial ports.  Then open the one that shows up for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">clj-hexapod.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">serial-port</span> <span class="ss">:as</span> <span class="nv">serial</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Use this command to see what port your serial port</span>
</span><span class='line'><span class="c1">;; is assinged to</span>
</span><span class='line'><span class="p">(</span><span class="nf">serial/list-ports</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; replace the USB0 with whater it shows</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">port</span> <span class="p">(</span><span class="nf">serial/open</span> <span class="s">&quot;/dev/ttyUSB0&quot;</span> <span class="mi">38400</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are going to be talking to the hexapod.  We need to send the commands in the same format that it is expecting. Basically, a packet of where the postions of the joystick are, as well as what buttons are pushed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">checksum</span> <span class="p">[</span><span class="nv">v</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">- </span><span class="mi">255</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">v</span><span class="p">))</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">vec-&gt;bytes</span> <span class="p">[</span><span class="nv">v</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">byte-array</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">%</span> <span class="p">(</span><span class="nf">Integer.</span><span class="p">)</span> <span class="p">(</span><span class="nf">.byteValue</span><span class="p">)</span> <span class="p">(</span><span class="nf">byte</span><span class="p">))</span> <span class="nv">v</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">build-packet</span> <span class="p">[</span><span class="nv">r-vert</span> <span class="nv">r-horz</span> <span class="nv">l-vert</span> <span class="nv">l-horz</span> <span class="nv">buttons</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">255</span> <span class="c1">;header</span>
</span><span class='line'>   <span class="nv">r-vert</span>
</span><span class='line'>   <span class="nv">r-horz</span>
</span><span class='line'>   <span class="nv">l-vert</span>
</span><span class='line'>   <span class="nv">l-horz</span>
</span><span class='line'>   <span class="nv">buttons</span>
</span><span class='line'>   <span class="mi">0</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">checksum</span> <span class="p">[</span><span class="nv">r-vert</span> <span class="nv">r-horz</span> <span class="nv">l-vert</span> <span class="nv">l-horz</span> <span class="nv">buttons</span><span class="p">])])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">send </span><span class="p">[</span><span class="nv">packet</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">serial/write</span> <span class="nv">port</span> <span class="p">(</span><span class="nf">vec-&gt;bytes</span> <span class="nv">packet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, we can simply make functions for the joystick controls to go up and down</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;values between 129-254</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">up </span><span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;joystick up for speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">good-range?</span> <span class="nv">speed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">+ </span><span class="mi">129</span> <span class="p">(</span><span class="nb">* </span><span class="mi">125</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">speed</span> <span class="mf">100.0</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">CENTER</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;values between 0 and 125</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">down </span><span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;joystick down speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">good-range?</span> <span class="nv">speed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">- </span><span class="mi">125</span> <span class="p">(</span><span class="nb">* </span><span class="mi">125</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">speed</span> <span class="mf">100.0</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">CENTER</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can do things like walk, turn, and change the gait</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-forward</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk forward speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-backwards</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk backwards speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-right</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-left</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">turn-right</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;turn right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">turn-left</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;turn left speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">change-gait</span> <span class="p">[</span><span class="nv">gait-key</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">gait-num</span> <span class="p">(</span><span class="nf">gait-key</span> <span class="nv">gaits</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">gait-num</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">stop</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;stop hexapod&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can control it from the REPL with some simple commands</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">walk-forward</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-backwards</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-right</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-left</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">turn-right</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">turn-left</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:ripple-smooth</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:tripod-normal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:ripple</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:amble</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">stop</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to see the code, it is out on github as <a href="https://github.com/gigasquid/clj-hexapod">clj-hexapod</a>.  Please keep in mind that it is early days still, and I am still just exploring.</p>

<h2>Phoneix Code Firmware</h2>

<p>It is worth noting the the above code was meant to run with the default hexapod firmware.  That is the &ldquo;Nuke&rdquo; firmware.  There is another firmware, the <a href="https://github.com/KurtE/Arduino_Phoenix_Parts">Phoenix code</a>, that gives the hexapod more lifelike moves and allows it to twist and shift is rather creepy ways.</p>

<p>I just loaded it on the hexapod yesterday.  The commander software changed too, so I will of course need to revisit the code, to add in the new moves.  But here is a sneak preview of what it can do:</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('PmBGt9T-yvI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/PmBGt9T-yvI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/PmBGt9T-yvI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=PmBGt9T-yvI" id="PmBGt9T-yvI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>


<p><em>That is my daughter singing in the background</em></p>

<h2>That&rsquo;s all for now</h2>

<p>I hope I have given you pointers for getting started on your own world domination with Clojure and Hexapods. Remember to practice your laugh &hellip;. Muhahaha :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Walking with Hexapods]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods/"/>
    <updated>2014-03-19T21:06:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods</id>
    <content type="html"><![CDATA[<p><img src="http://farm4.staticflickr.com/3804/13278398783_0bedfa7b40.jpg"></p>

<p>Here we see the <a href="http://www.trossenrobotics.com/phantomx-ax-hexapod.aspx">PhantomX Hexapod</a> thriving in the natural habitat of a
cozy, climate controlled, modern house. But there was a time before
the hexapod.  In particular, there was a time of many hexapod parts
and a high level software developer that somehow, despite her natural
lack of mechanical skills, managed to bring it to life. This blog post
endeavors to chronicle the high and low points of this journey. And
perhaps, will make it easier for any other brave souls that would like
to bring the <em>Age of Hexapods</em> into their homes.</p>

<h2>Oh My! So Many Parts</h2>

<p>I wasn&rsquo;t really mentally prepared for the vast amounts of parts in the
kit.  Here is a sampling:</p>

<ul>
<li>18 AX-12A Servos</li>
<li>Top/ Bottom Body Plate</li>
<li>20 Brackets</li>
<li>Arbotix Board</li>
<li>2 Xbees</li>
<li>Lipo Battery &amp; Charger</li>
<li>Arbotix programmer</li>
<li>19 Cables</li>
<li><strong>50,000 nuts and screws </strong> (Really only about 850 &ndash; but you get my
 point)</li>
</ul>


<h2>First Things First</h2>

<p>The very first thing to do is to make sure that you have all the
parts.  Once I went through the checklist and double counted all my
screws, I was relieved to go onto the next task of programming the
Arbotix and assign ids to servos and center them. These steps
consisted of:</p>

<ul>
<li>Getting the Arduino IDE going</li>
<li>Loading the Drivers and Libraries</li>
<li>Loading the ROS (Robot Operating System) on the Arbotix Board, so
that it could be used to program the servos.</li>
</ul>


<p>Each of the servos have to be assigned a number. This will let the
program know which part of the leg is which, so that it will
eventually &ndash; hopefully, be able to walk. Once the id is given, a
sticker is labeled on the servo for future use. Centering the servos
is a VERY important step not to overlook.  If you do not center the
servos, you will get into the unfortunate circumstance of having to
dissemble the robot, cry, recenter the servos, and then reassemble the
robot. Please avoid.</p>

<h2>Putting It Together</h2>

<p>The assembly starts with the feet and legs first.
I was so pleased when I got the feet assembled, that I considered
knitting little baby hexapod booties.</p>

<p><img src="http://farm8.staticflickr.com/7298/13278059445_562bb9ce4b.jpg"></p>

<p>Next a servo and the tibia is added</p>

<p><img src="http://farm8.staticflickr.com/7311/13278197583_599f030bab.jpg"></p>

<p>Another servo and the tibia and femur is assembled</p>

<p><img src="http://farm8.staticflickr.com/7185/13278392294_8986c14e5b.jpg"></p>

<p>Finally, another servo and the whole leg is assembled</p>

<p><img src="http://farm8.staticflickr.com/7033/13278197683_cfd9a4870f.jpg"></p>

<h2>Newbie Advice</h2>

<p>I would like to pause for a minute to share some advice from my trial
and errors in assembly thus far:</p>

<ul>
<li><strong>Don&rsquo;t overtighten screws </strong> &ndash; More is not better. It makes things
like plexiglass frames crack and break.</li>
<li><strong>Seating nuts in servos is hard</strong> &ndash; This isn&rsquo;t really advice. Just
moral support in your struggle.  There are 18 servos and up to 20
nuts to seat in each servo.</li>
</ul>


<p><img src="http://farm4.staticflickr.com/3833/13278059175_91699a9704_n.jpg"></p>

<h2>Assembling the body</h2>

<p>The body is where the board, battery and and cables go.</p>

<p><img src="http://farm4.staticflickr.com/3755/13278197953_44717aea96.jpg"></p>

<p>At long last, the legs can be attached to the body &ndash; with 120 screws
of course.</p>

<h2>Round two of Newbie Advice</h2>

<ul>
<li>For those who have never stripped wires and attached them to power
supplies, like me, please mind that the wires are twisted so that
the edges don&rsquo;t fray out and short out everything requiring you to
re-assign all the servos that lost their ids and much unscrewing,
crying, and reassembling.</li>
<li>When programming the Arbotix board.  You must remove the Xbee, or it
will not work.</li>
<li>Also, did I mention not over-tightening screws? Also, the order in
which you tighten the screws is important too.  Try to tighten them
all loosely in order, so you don&rsquo;t stress the fiberglass parts and
have something like this happen.</li>
</ul>


<p><img src="http://farm4.staticflickr.com/3749/13278392754_cde8d9e10f_n.jpg"></p>

<h2>It is Alive!</h2>

<p>Finally, the moment of truth. The hexapod is assembled and it is time
to upload a test check on the board to make sure that everything is
working alright.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('i9St8kDuyqU');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/i9St8kDuyqU?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/i9St8kDuyqU/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=i9St8kDuyqU" id="i9St8kDuyqU" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>


<h2>Walking with Hexapods</h2>

<p>The kit comes with a commander that you assemble of course.  You can
use it to control the hexapod with hand-held joysticks.</p>

<p><img src="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg"></p>

<p>The moment of truth, when it finally took its very first steps, and the Age of Hexapods began.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('pUrZeJ39xjs');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/pUrZeJ39xjs?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/pUrZeJ39xjs/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=pUrZeJ39xjs" id="pUrZeJ39xjs" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>


<p><em>Stay tuned for the next post of how to control the hexapod with your
Clojure code and loading the Phoenix firmware that gives it a
life-like moves</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remembering Jim]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/22/remembering-jim/"/>
    <updated>2014-02-22T11:02:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/22/remembering-jim</id>
    <content type="html"><![CDATA[<p><img src="https://newcontext-production.s3.amazonaws.com/portrait/jim-weirich/medium_78048abb24eadb2017034c5ee10826f9.jpg"></p>

<p>You don&rsquo;t really understand how important someone is in your life
until they are suddenly gone. I have had the honor and privilege of
working, playing, and laughing alongside Jim Weirich for the last few
years.  He was an amazing man.  I miss him dearly.</p>

<h2>Think</h2>

<p>Jim taught us how to think about computer programming. I once had a
Physics professor tell me not to worry so
much about the formulas and math. The most important thing was how to
<strong>think</strong>.
Everything thing after that would
naturally fall into place.  Jim embodied that philosophy for
programming.  The languages and algorithms poured almost
effortlessly from his masterful fingers.  He knew how to <strong>think</strong> about
the problem, observe from a multitude of angles.  Finally, bringing his
experience, creativity, and humility to bear on it, he would shape it into
a beautiful piece of code.</p>

<h2>Make</h2>

<p>Jim showed us how to make. He was a master craftsman and a maker. The
care and joy that infused his work was inspiring.  He loved the
process of Test Driven Development. Green tests were always a
celebration. The surprise of beautiful code emerging from a
refactoring was treated as a gift.  He is best known for his
<a href="https://github.com/jimweirich/rake">Rake</a> build tool, but his testing
library <a href="https://github.com/jimweirich/rspec-given">rspec-given</a> is
one that reminds me most of him and the way that he loved to craft code.</p>

<h2>Care</h2>

<p>Jim showed us how to care.  Jim cared deeply about each and every
person.  While flying his drone in the office hallway, he would wave
down a passing building maintenance worker and ask if they wanted to
fly it.  Over the course of the next few minutes, Jim would put them
completely at ease and chat happily with them.  He was like that to
<strong>everyone</strong>.  In the few days after
his passing, many building workers, and people from other offices, that
I only ever nodded at in passing, stopped by to give their sincere
condolences his loss. He is without a doubt, the kindest person I have
ever known.  He took great joy in his faith and in his family.  He
would talk about his family all the time and how much they enjoyed
each others company.  He is without a doubt, one of the personally richest men I have ever known.</p>

<h2>Share</h2>

<p>Jim taught us how to share. Jim wanted to share his knowledge.  He was
a great teacher and presenter. He gave engaging presentations that
took people on a journey with him, not only imparting knowledge, but
becoming friends with him in the process.  He was a pillar in the local
Cincinnati technical community. He is the reason why myself and
countless others were drawn to Ruby and the Ruby community.</p>

<h2>Dream</h2>

<p>Jim dreamed with us.  He was a creative. He was also a singer, song
writer, musician, and artist.  He brought that creative spirit,
curiosity, and love of learning to the technical world. I will cherish
our lunches spent together flying our AR Drones, sometimes crashing
them into walls and each other, while trying to find creative ways of
controlling them with code.  He was just lately exploring with the
micro-quadcopters like the
<a href="http://www.amazon.com/Estes-4606-Proto-Quadcopter-Black/dp/B00G924W98">Proto-X</a>.
We had plans to make all our Spheros, Roombas, big drones, and little
drones dance to live coded music. We were both auditing on
<a href="https://www.edx.org/course/ethx/ethx-amrx-autonomous-mobile-robots-1342">Autonomous Mobile Robots</a>
to see what we could learn to help us with our robot dreams.</p>

<p>I miss him dearly.  I will cherish my memories of him and I am so
grateful for all the ways he has enriched my life.  I will remember
that when I dream in code, he is still there with me.</p>

<p>Until that day when we will fly our friendly robots together again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Clojure has a New Home]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home/"/>
    <updated>2014-02-16T14:57:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home</id>
    <content type="html"><![CDATA[<p>The Hitchhiker&rsquo;s Guide to Clojure posts now have a new home to make it
easier to read them in a chronological fashion.</p>

<p><a href="http://hitchhikersclojure.com/">http://hitchhikersclojure.com/</a></p>

<p>There is also a public <a href="https://github.com/gigasquid/hitchhikers-clojure">repo</a> &ndash; feel free to contribute spelling and
grammar fixes, or your great ideas.</p>
]]></content>
  </entry>
  
</feed>
