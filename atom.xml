<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2020-01-10T20:45:58-05:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hugging Face GPT With Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure/"/>
    <updated>2020-01-10T19:33:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure</id>
    <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/65535/49364554561_6e4f4d0a51_w.jpg" alt="" /></p>

<p>A new age in Clojure has dawned. We now have interop access to any python library with <a href="https://github.com/cnuernber/libpython-clj">libpython-clj</a>.</p>

<p>Let me pause a minute to repeat.</p>

<p><strong> You can now interop with ANY python library. </strong></p>

<p>I know. It&rsquo;s overwhelming. It took a bit for me to come to grips with it too.</p>

<p>Let&rsquo;s take an example of something that I&rsquo;ve <em>always</em> wanted to do and have struggled with mightly finding a way to do it in Clojure:<br/>
I want to use the latest cutting edge GPT2 code out there to generate text.</p>

<p>Right now, that library is <a href="https://github.com/huggingface/transformers">Hugging Face Transformers</a>.</p>

<p>Get ready. We will wrap that sweet hugging face code in Clojure parens!</p>

<h3>The setup</h3>

<p>The first thing you will need to do is to have python3 installed and the two libraries that we need:</p>

<ul>
<li>pytorch &ndash; <code>sudo pip3 install torch</code></li>
<li>hugging face transformers &ndash; <code>sudo pip3 install transformers</code></li>
</ul>


<p>Right now, some of you may not want to proceed. You might have had a bad relationship with Python in the past. It&rsquo;s ok, remember that some of us had bad relationships with Java, but still lead a happy and fulfilled life with Clojure and still can enjoy it from interop. The same is true with Python. Keep an open mind.</p>

<p>There might be some others that don&rsquo;t want to have anything to do with Python and want to keep your Clojure pure. Well, that is a valid choice. But you are missing out on what the big, vibrant, and chaotic Python Deep Learning ecosystem has to offer.</p>

<p>For those of you that are still along for the ride, let&rsquo;s dive in.</p>

<p>Your deps file should have just a single extra dependency in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:deps</span> <span class="p">{</span><span class="nv">org.clojure/clojure</span> <span class="p">{</span><span class="ss">:mvn/version</span> <span class="s">&quot;1.10.1&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="nv">cnuernber/libpython-clj</span> <span class="p">{</span><span class="ss">:mvn/version</span> <span class="s">&quot;1.30&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Diving Into Interop</h3>

<p>The first thing that we need to do is require the libpython library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">gigasquid.gpt2</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">libpython-clj.require</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">require-python</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">libpython-clj.python</span> <span class="ss">:as</span> <span class="nv">py</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It has a very nice <code>require-python</code> syntax that we will use to load the python libraries so that we can use them in our Clojure code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require-python</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">transformers</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">require-python</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">torch</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are going to follow along with the OpenAI GPT-2 tutorial and translate it into interop code.
The original tutorial is <a href="https://huggingface.co/transformers/quickstart.html">here</a></p>

<p>Let&rsquo;s take the python side first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">torch</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">GPT2Tokenizer</span><span class="p">,</span> <span class="n">GPT2LMHeadModel</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Load pre-trained model tokenizer (vocabulary)</span>
</span><span class='line'><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">GPT2Tokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">&#39;gpt2&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is going to translate in our interop code to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tokenizer</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">transformers/GPT2Tokenizer</span> <span class="nv">from_pretrained</span> <span class="s">&quot;gpt2&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>py/$a</code> function is used to call attributes on a Python object. We get the <code>transformers/GPTTokenizer</code> object that we have available to use and call <code>from_pretrained</code> on it with the string argument <code>"gpt2"</code></p>

<p>Next in the Python tutorial is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Encode a text inputs</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;Who was Jim Henson ? Jim Henson was a&quot;</span>
</span><span class='line'><span class="n">indexed_tokens</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Convert indexed tokens in a PyTorch tensor</span>
</span><span class='line'><span class="n">tokens_tensor</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">([</span><span class="n">indexed_tokens</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is going to translate to Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">text</span> <span class="s">&quot;Who was Jim Henson ? Jim Henson was a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; encode text input</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">indexed-tokens</span>  <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">tokenizer</span> <span class="nv">encode</span> <span class="nv">text</span><span class="p">))</span>
</span><span class='line'><span class="nv">indexed-tokens</span> <span class="c1">;=&gt;[8241, 373, 5395, 367, 19069, 5633, 5395, 367, 19069, 373, 257]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; convert indexed tokens to pytorch tensor</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tokens-tensor</span> <span class="p">(</span><span class="nf">torch/tensor</span> <span class="p">[</span><span class="nv">indexed-tokens</span><span class="p">]))</span>
</span><span class='line'><span class="nv">tokens-tensor</span>
</span><span class='line'><span class="c1">;; ([[ 8241,   373,  5395,   367, 19069,  5633,  5395,   367, 19069,   373,</span>
</span><span class='line'><span class="c1">;;    257]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are again using <code>py/$a</code> to call the <code>encode</code> method on the text. However, when we are just calling a function, we can do so directly with <code>(torch/tensor [indexed-tokens])</code>. We can even directly use vectors.</p>

<p>Again, you are doing this in the REPL, so you have full power for inspection and display of the python objects. It is a great interop experience &ndash; (cider even has doc information on the python functions in the minibuffer)!</p>

<p>The next part is to load the model itself. This will take a few minutes, since it has to download a big file from s3 and load it up.</p>

<p>In Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Load pre-trained model (weights)</span>
</span><span class='line'><span class="n">model</span> <span class="o">=</span> <span class="n">GPT2LMHeadModel</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">&#39;gpt2&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Load pre-trained model (weights)</span>
</span><span class='line'><span class="c1">;;; Note: this will take a few minutes to download everything</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">model</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">transformers/GPT2LMHeadModel</span> <span class="nv">from_pretrained</span> <span class="s">&quot;gpt2&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next part is to run the model with the tokens and make the predictions.</p>

<p>Here the code starts to diverge a tiny bit.</p>

<p>Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Set the model in evaluation mode to deactivate the DropOut modules</span>
</span><span class='line'><span class="c"># This is IMPORTANT to have reproducible results during evaluation!</span>
</span><span class='line'><span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If you have a GPU, put everything on cuda</span>
</span><span class='line'><span class="n">tokens_tensor</span> <span class="o">=</span> <span class="n">tokens_tensor</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s">&#39;cuda&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">model</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s">&#39;cuda&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Predict all tokens</span>
</span><span class='line'><span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span><span class='line'>    <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">tokens_tensor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">predictions</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># get the predicted next sub-word (in our case, the word &#39;man&#39;)</span>
</span><span class='line'><span class="n">predicted_index</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:])</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span><span class='line'><span class="n">predicted_text</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">indexed_tokens</span> <span class="o">+</span> <span class="p">[</span><span class="n">predicted_index</span><span class="p">])</span>
</span><span class='line'><span class="k">assert</span> <span class="n">predicted_text</span> <span class="o">==</span> <span class="s">&#39;Who was Jim Henson? Jim Henson was a man&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And Clojure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Set the model in evaluation mode to deactivate the DropOut modules</span>
</span><span class='line'><span class="c1">;;; This is IMPORTANT to have reproducible results during evaluation!</span>
</span><span class='line'><span class="p">(</span><span class="nf">py/$a</span> <span class="nv">model</span> <span class="nv">eval</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Predict all tokens</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">predictions</span> <span class="p">(</span><span class="nf">py/with</span> <span class="p">[</span><span class="nv">r</span> <span class="p">(</span><span class="nf">torch/no_grad</span><span class="p">)]</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">model</span> <span class="nv">tokens-tensor</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; get the predicted next sub-word&quot;</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">predicted-index</span> <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">last-word-predictions</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">predictions</span> <span class="nb">first </span><span class="nv">last</span><span class="p">)</span>
</span><span class='line'>                           <span class="nv">arg-max</span> <span class="p">(</span><span class="nf">torch/argmax</span> <span class="nv">last-word-predictions</span><span class="p">)]</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">arg-max</span> <span class="nv">item</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">predicted-index</span> <span class="c1">;=&gt;582</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">py/$a</span> <span class="nv">tokenizer</span> <span class="nv">decode</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="nv">indexed-tokens</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">conj </span><span class="nv">predicted-index</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;=&gt; &quot;Who was Jim Henson? Jim Henson was a man&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main differences is that we are obviously not using the python array syntax in our code to manipulate the lists. For example, instead of using <code>outputs[0]</code>, we are going to use <code>(first outputs)</code>. But, other than that, it is a pretty good match, even with the <code>py/with</code>.</p>

<h3>Doing Longer Sequences</h3>

<p>The next example in the tutorial goes on to cover generating longer text.</p>

<p>Python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tokenizer</span> <span class="o">=</span> <span class="n">GPT2Tokenizer</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">&quot;gpt2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">model</span> <span class="o">=</span> <span class="n">GPT2LMHeadModel</span><span class="o">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="s">&#39;gpt2&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">generated</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;The Manhattan bridge&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">context</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">([</span><span class="n">generated</span><span class="p">])</span>
</span><span class='line'><span class="n">past</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output</span><span class="p">,</span> <span class="n">past</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">past</span><span class="o">=</span><span class="n">past</span><span class="p">)</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">generated</span> <span class="o">+=</span> <span class="p">[</span><span class="n">token</span><span class="o">.</span><span class="n">tolist</span><span class="p">()]</span>
</span><span class='line'>    <span class="n">context</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sequence</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">generated</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And Clojure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tokenizer</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">transformers/GPT2Tokenizer</span> <span class="nv">from_pretrained</span> <span class="s">&quot;gpt2&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">model</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">transformers/GPT2LMHeadModel</span> <span class="nv">from_pretrained</span> <span class="s">&quot;gpt2&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">generated</span> <span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">tokenizer</span> <span class="nv">encode</span> <span class="s">&quot;The Manhattan bridge&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">context</span> <span class="p">(</span><span class="nf">torch/tensor</span> <span class="p">[</span><span class="nv">generated</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-sequence-step</span> <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">generated-tokens</span> <span class="nv">context</span> <span class="nv">past</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">output</span> <span class="nv">past</span><span class="p">]</span> <span class="p">(</span><span class="nf">model</span> <span class="nv">context</span> <span class="ss">:past</span> <span class="nv">past</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">token</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">torch/argmax</span> <span class="p">(</span><span class="nb">first </span><span class="nv">output</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">new-generated</span>  <span class="p">(</span><span class="nb">conj </span><span class="nv">generated-tokens</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">token</span> <span class="nv">tolist</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:generated-tokens</span> <span class="nv">new-generated</span>
</span><span class='line'>     <span class="ss">:context</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">token</span> <span class="nv">unsqueeze</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">:past</span> <span class="nv">past</span>
</span><span class='line'>     <span class="ss">:token</span> <span class="nv">token</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">decode-sequence</span> <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">generated-tokens</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">tokenizer</span> <span class="nv">decode</span> <span class="nv">generated-tokens</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">step</span> <span class="p">{</span><span class="ss">:generated-tokens</span> <span class="nv">generated</span>
</span><span class='line'>             <span class="ss">:context</span> <span class="nv">context</span>
</span><span class='line'>             <span class="ss">:past</span> <span class="nv">nil</span><span class="p">}</span>
</span><span class='line'>       <span class="nv">i</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">pos? </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">generate-sequence-step</span> <span class="nv">step</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">decode-sequence</span> <span class="nv">step</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;=&gt; &quot;The Manhattan bridge\n\nThe Manhattan bridge is a major artery for&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The great thing is once we have it embedded in our code, there is no stopping. We can create a nice function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-text</span> <span class="p">[</span><span class="nv">starting-text</span> <span class="nv">num-of-words-to-predict</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tokens</span> <span class="p">(</span><span class="nb">into </span><span class="p">[]</span> <span class="p">(</span><span class="nf">py/$a</span> <span class="nv">tokenizer</span> <span class="nv">encode</span> <span class="nv">starting-text</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">context</span> <span class="p">(</span><span class="nf">torch/tensor</span> <span class="p">[</span><span class="nv">tokens</span><span class="p">])</span>
</span><span class='line'>        <span class="nv">result</span> <span class="p">(</span><span class="nf">reduce</span>
</span><span class='line'>                <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">r</span> <span class="nv">i</span><span class="p">]</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">println </span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">generate-sequence-step</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">{</span><span class="ss">:generated-tokens</span> <span class="nv">tokens</span>
</span><span class='line'>                 <span class="ss">:context</span> <span class="nv">context</span>
</span><span class='line'>                 <span class="ss">:past</span> <span class="nv">nil</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">(</span><span class="nb">range </span><span class="nv">num-of-words-to-predict</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">decode-sequence</span> <span class="nv">result</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally we can generate some fun text!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">generate-text</span> <span class="s">&quot;Clojure is a dynamic, general purpose programming language, combining the approachability and interactive&quot;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;=&gt; &quot;Clojure is a dynamic, general purpose programming language, combining the approachability and interactive. It is a language that is easy to learn and use, and is easy to use for anyone&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Clojure is a dynamic, general purpose programming language, combining the approachability and interactive. It is a language that is easy to learn and use, and is easy to use for anyone</strong></p>

<p>So true GPT2! So true!</p>

<h3>Wrap-up</h3>

<p>libpython-clj is a really powerful tool that will allow Clojurists to better explore, leverage, and integrate Python libraries into their code.</p>

<p>I&rsquo;ve been really impressed with it so far and I encourage you to check it out.</p>

<p>There is a <a href="https://github.com/gigasquid/libpython-clj-examples">repo with the examples</a> out there if you want to check them out. There is also an example of doing MXNet MNIST classification there as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Deep Learning With clojure.spec]]></title>
    <link href="http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec/"/>
    <updated>2019-10-11T13:51:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec</id>
    <content type="html"><![CDATA[<p>clojure.spec allows you to write specifications for data and use them for validation. It also provides a generative aspect that allows for robust testing as well as an additional way to understand your data through manual inspection. The dual nature of validation and generation is a natural fit for deep learning models that consist of paired discriminator/generator models.</p>

<br>


<p><strong><strong>TLDR: In this post we show that you can leverage the dual nature of clojure.spec&rsquo;s validator/generator to incorporate a deep learning model&rsquo;s classifier/generator.</strong></strong></p>

<br>


<p>A common use of clojure.spec is at the boundaries to validate that incoming data is indeed in the expected form. Again, this is boundary is a fitting place to integrate models for the deep learning paradigm and our traditional software code.</p>

<p>Before we get into the deep learning side of things, let&rsquo;s take a quick refresher on how to use clojure.spec.</p>

<h2>quick view of clojure.spec</h2>

<p>To create a simple spec for keywords that are cat sounds, we can use <code>s/def</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/def</span> <span class="ss">::cat-sounds</span> <span class="o">#</span><span class="p">{</span><span class="ss">:meow</span> <span class="ss">:purr</span> <span class="ss">:hiss</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>To do the validation, you can use the <code>s/valid?</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::cat-sounds</span> <span class="ss">:meow</span><span class="p">)</span> <span class="c1">;=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::cat-sounds</span> <span class="ss">:bark</span><span class="p">)</span> <span class="c1">;=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the generation side of things, we can turn the spec into generator and sample it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="p">(</span><span class="nf">s/gen</span> <span class="ss">::cat-sounds</span><span class="p">))</span>
</span><span class='line'><span class="c1">;=&gt;(:hiss :hiss :hiss :meow :meow :purr :hiss :meow :meow :meow)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is the ability to compose specs by adding them together with <code>s/and</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/def</span> <span class="ss">::even-number</span> <span class="p">(</span><span class="nf">s/and</span> <span class="nv">int?</span> <span class="nv">even?</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="p">(</span><span class="nf">s/gen</span> <span class="ss">::even-number</span><span class="p">))</span>
</span><span class='line'><span class="c1">;=&gt; (0 0 -2 2 0 10 -4 8 6 8)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also control the generation by creating a custom generator using <code>s/with-gen</code>.
In the following the spec is only that the data be a general string, but using the custom generator, we can restrict the output to only be a certain set of example cat names.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/def</span> <span class="ss">::cat-name</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">s/with-gen</span>
</span><span class='line'>    <span class="nv">string?</span>
</span><span class='line'>    <span class="o">#</span><span class="p">(</span><span class="nf">s/gen</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;Suki&quot;</span> <span class="s">&quot;Bill&quot;</span> <span class="s">&quot;Patches&quot;</span> <span class="s">&quot;Sunshine&quot;</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::cat-name</span> <span class="s">&quot;Peaches&quot;</span><span class="p">)</span> <span class="c1">;=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="p">(</span><span class="nf">s/gen</span> <span class="ss">::cat-name</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (&quot;Patches&quot; &quot;Sunshine&quot; &quot;Sunshine&quot; &quot;Suki&quot; &quot;Suki&quot; &quot;Sunshine&quot;</span>
</span><span class='line'><span class="c1">;;  &quot;Suki&quot; &quot;Patches&quot; &quot;Sunshine&quot; &quot;Suki&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For further information on clojure.spec, I whole-heartedly recommend the <a href="https://clojure.org/guides/spec">spec Guide</a>. But, now with a basic overview of spec, we can move on to creating specs for our Deep Learning models.</p>

<h2>Creating specs for Deep Learning Models</h2>

<p>In previous posts, we covered making <a href="https://gigasquidsoftware.com/blog/2019/08/16/simple-autoencoder/">simple autoencoders for handwritten digits</a>.</p>

<p><img src="http://live.staticflickr.com/65535/48647524478_ca35bef78f_n.jpg" alt="handwritten digits" /></p>

<p>Then, we made models that would:</p>

<ul>
<li>Take an image of a digit and give you back the string value (ex: &ldquo;2&rdquo;) &ndash; <a href="https://gigasquidsoftware.com/blog/2019/08/30/focus-on-the-discriminator/">post</a></li>
<li>Take a string number value and give you back a digit image. &ndash; <a href="https://gigasquidsoftware.com/blog/2019/09/06/focus-on-the-generator/">post</a></li>
</ul>


<p>We will use both of the models to make a spec with a custom generator.</p>

<br>


<p><em>Note: For the sake of simplicity, some of the supporting code is left out. But if you want to see the whole code, it is on <a href="(https://github.com/gigasquid/clojure-mxnet-autoencoder/blob/master/src/clojure_mxnet_autoencoder/model_specs.clj">github</a>)</em></p>

<br>


<p>With the help of the trained discriminator model, we can make a function that takes in an image and returns the number string value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">discriminate</span> <span class="p">[</span><span class="nv">image</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/forward</span> <span class="nv">discriminator-model</span> <span class="p">{</span><span class="ss">:data</span> <span class="p">[</span><span class="nv">image</span><span class="p">]})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/outputs</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">ffirst</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">ndarray/argmax-channel</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">ndarray/-&gt;vec</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">first</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">int</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s test it out with a test-image:</p>

<p><img src="http://live.staticflickr.com/65535/48881532151_251e30840e_s.jpg" alt="test-discriminator-image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">discriminate</span> <span class="nv">my-test-image</span><span class="p">)</span> <span class="c1">;=&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Likewise, with the trained generator model, we can make a function that takes a string number and returns the corresponding image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate</span> <span class="p">[</span><span class="nv">label</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/forward</span> <span class="nv">generator-model</span> <span class="p">{</span><span class="ss">:data</span> <span class="p">[(</span><span class="nf">ndarray/array</span> <span class="p">[</span><span class="nv">label</span><span class="p">]</span> <span class="p">[</span><span class="nv">batch-size</span><span class="p">])]})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/outputs</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">ffirst</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Giving it a test drive as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">generated-test-image</span> <span class="p">(</span><span class="nf">generate</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;generated-image&quot;</span>
</span><span class='line'>             <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span>
</span><span class='line'>           <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="nv">generated-test-image</span> <span class="p">[</span><span class="nv">batch-size</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48881532451_023de68ddb_s.jpg" alt="generated-test-image" /></p>

<p>Great! Let&rsquo;s go ahead and start writing specs. First let&rsquo;s make a quick spec to describe a MNIST number &ndash; which is a single digit between 0 and 9.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/def</span> <span class="ss">::mnist-number</span> <span class="p">(</span><span class="nf">s/and</span> <span class="nv">int?</span> <span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="nv">%</span> <span class="mi">9</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::mnist-number</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">;=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::mnist-number</span> <span class="mi">11</span><span class="p">)</span> <span class="c1">;=&gt; false</span>
</span><span class='line'><span class="p">(</span><span class="nf">gen/sample</span> <span class="p">(</span><span class="nf">s/gen</span> <span class="ss">::mnist-number</span><span class="p">))</span>
</span><span class='line'><span class="c1">;=&gt; (0 1 0 3 5 3 7 5 0 1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now have both parts to validate and generate and can create a spec for it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/def</span> <span class="ss">::mnist-image</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">s/with-gen</span>
</span><span class='line'>      <span class="o">#</span><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::mnist-number</span> <span class="p">(</span><span class="nf">discriminate</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>      <span class="o">#</span><span class="p">(</span><span class="nf">gen/fmap</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">ndarray/copy</span> <span class="p">(</span><span class="nf">generate</span> <span class="nv">n</span><span class="p">))))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">s/gen</span> <span class="ss">::mnist-number</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>::mnist-number</code> spec is used for the validation after the <code>discriminate</code> model is used. On the generator side, we use the generator for the <code>::mnist-number</code> spec and feed that into the deep learning generator model to get sample images.</p>

<p>We have a test function that will help us test out this new spec, called <code>test-model-spec</code>. It will return a map with the following form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:spec</span> <span class="nv">name-of-the-spec</span>
</span><span class='line'> <span class="ss">:valid?</span> <span class="nv">whether</span> <span class="nb">or not </span><span class="nv">the</span> <span class="o">`</span><span class="nv">s/valid?</span><span class="o">`</span> <span class="nv">called</span> <span class="nv">on</span> <span class="nv">the</span> <span class="nb">test </span><span class="nv">value</span> <span class="nv">is</span> <span class="nv">true</span> <span class="nb">or </span><span class="nv">not</span>
</span><span class='line'> <span class="ss">:sample-values</span> <span class="nv">This</span> <span class="nv">calls</span> <span class="nv">the</span> <span class="nv">discriminator</span> <span class="nv">model</span> <span class="nv">on</span> <span class="nv">the</span> <span class="nv">generated</span> <span class="nv">values</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will also write an image of all the sample images to a file named <code>sample-spec-name</code></p>

<p>Let&rsquo;s try it on our test image:</p>

<p><img src="http://live.staticflickr.com/65535/48881532151_251e30840e_s.jpg" alt="test-discriminator-image" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/valid?</span> <span class="ss">::mnist-image</span> <span class="nv">my-test-image</span><span class="p">)</span> <span class="c1">;=&gt; true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">test-model-spec</span> <span class="ss">::mnist-image</span> <span class="nv">my-test-image</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; {:spec &quot;mnist-image&quot;</span>
</span><span class='line'><span class="c1">;;  :valid? true</span>
</span><span class='line'><span class="c1">;;  :sample-values [0 0 0 1 3 1 0 2 7 3]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48882235262_1e0dd7b758_q.jpg" alt="sample-mnist-image" /></p>

<p>Pretty cool!</p>

<p>Let&rsquo;s do some more specs. But first, our spec is going to be a bit repetitive, so we&rsquo;ll make a quick macro to make things easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">def-model-spec</span> <span class="p">[</span><span class="nv">spec-key</span> <span class="nv">spec</span> <span class="nv">discriminate-fn</span> <span class="nv">generate-fn</span><span class="p">]</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">s/def</span> <span class="o">~</span><span class="nv">spec-key</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">s/with-gen</span>
</span><span class='line'>         <span class="o">#</span><span class="p">(</span><span class="nf">s/valid?</span> <span class="o">~</span><span class="nv">spec</span> <span class="p">(</span><span class="o">~</span><span class="nv">discriminate-fn</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>         <span class="o">#</span><span class="p">(</span><span class="nf">gen/fmap</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n#</span><span class="p">]</span>
</span><span class='line'>                      <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">ndarray/copy</span> <span class="p">(</span><span class="o">~</span><span class="nv">generate-fn</span> <span class="nv">n#</span><span class="p">))))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">s/gen</span> <span class="o">~</span><span class="nv">spec</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More Specs &ndash; More Fun</h3>

<p>This time let&rsquo;s define an even mnist image spec</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="nf">def-model-spec</span> <span class="ss">::even-mnist-image</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">s/and</span> <span class="ss">::mnist-number</span> <span class="nv">even?</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">discriminate</span>
</span><span class='line'>    <span class="nv">generate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">test-model-spec</span> <span class="ss">::even-mnist-image</span> <span class="nv">my-test-image</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; {:spec &quot;even-mnist-image&quot;</span>
</span><span class='line'>  <span class="c1">;;  :valid? true</span>
</span><span class='line'>  <span class="c1">;;  :sample-values [0 0 2 0 8 2 2 2 0 0]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48882253157_02e45d3132_q.jpg" alt="sample-even-mnist-image" /></p>

<p>And Odds</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">def-model-spec</span> <span class="ss">::odd-mnist-image</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">s/and</span> <span class="ss">::mnist-number</span> <span class="nv">odd?</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">discriminate</span>
</span><span class='line'>    <span class="nv">generate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">test-model-spec</span> <span class="ss">::odd-mnist-image</span> <span class="nv">my-test-image</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; {:spec &quot;odd-mnist-image&quot;</span>
</span><span class='line'>  <span class="c1">;;  :valid? false</span>
</span><span class='line'>  <span class="c1">;;  :sample-values [5 1 5 1 3 3 3 1 1 1]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48881548138_c18850f806_q.jpg" alt="sample-odd-mnist-image" /></p>

<p>Finally, let&rsquo;s do Odds that are over 2!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">def-model-spec</span> <span class="ss">::odd-over-2-mnist-image</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">s/and</span> <span class="ss">::mnist-number</span> <span class="nv">odd?</span> <span class="o">#</span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">%</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">discriminate</span>
</span><span class='line'>    <span class="nv">generate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">test-model-spec</span> <span class="ss">::odd-over-2-mnist-image</span> <span class="nv">my-test-image</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; {:spec &quot;odd-over-2-mnist-image&quot;</span>
</span><span class='line'>  <span class="c1">;;  :valid? false</span>
</span><span class='line'>  <span class="c1">;;  :sample-values [3 3 3 5 3 5 7 7 7 3]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48882089776_6f55416418_q.jpg" alt="sample-odd-over-2-mnist-image" /></p>

<h2>Conclusion</h2>

<p>We have shown some of the potential of integrating deep learning models with Clojure. clojure.spec is a powerful tool and it can be leveraged in new and interesting ways for both deep learning and AI more generally.</p>

<p>I hope that more people are intrigued to experiment and take a further look into what we can do in this area.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Focus on the Generator]]></title>
    <link href="http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator/"/>
    <updated>2019-09-06T18:07:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator</id>
    <content type="html"><![CDATA[<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/smigla-bobinski/19705409981/in/album-72157647756733695/" title="SIMULACRA by Karina Smigla-Bobinski"><img src="https://live.staticflickr.com/330/19705409981_4e0ae93572.jpg" width="500" height="267" alt="SIMULACRA by Karina Smigla-Bobinski"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>In this first post of this series, we took a look at a <a href="https://gigasquidsoftware.com/blog/2019/08/16/simple-autoencoder/">simple autoencoder</a>. It took and image and transformed it back to an image. Then, we <a href="https://gigasquidsoftware.com/blog/2019/08/30/focus-on-the-discriminator/">focused in on the disciminator</a> portion of the model, where we took an image and transformed it to a label. Now, we focus in on the generator portion of the model do the inverse operation: we transform a label to an image. In recap:</p>

<ul>
<li>Autoencoder: image &ndash;> image</li>
<li>Discriminator: image &ndash;> label</li>
<li>Generator: label &ndash;> image (This is what we are doing now!)</li>
</ul>


<p><img src="https://live.staticflickr.com/65535/48689260086_11fe4b089b_b.jpg" alt="generator" /></p>

<h2>Still Need Data of Course</h2>

<p>Nothing changes here. We are still using the MNIST handwritten digit set and have an input and out to our model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def</span>
</span><span class='line'>  <span class="nv">train-data</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mx-io/mnist-iter</span> <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                     <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                     <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>                     <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>                     <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>                     <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">def</span>
</span><span class='line'>  <span class="nv">test-data</span> <span class="p">(</span><span class="nf">mx-io/mnist-iter</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>              <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>              <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>              <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">input</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">output</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input_&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Generator Model</h2>

<p>The model does change to one hot encode the label for the number. Other than that, it&rsquo;s pretty much the exact same second half of the autoencoder model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-symbol</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">as-&gt;</span> <span class="nv">input</span> <span class="nv">data</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/one-hot</span> <span class="s">&quot;onehot&quot;</span> <span class="p">{</span><span class="ss">:indices</span> <span class="nv">data</span> <span class="ss">:depth</span> <span class="mi">10</span><span class="p">})</span>
</span><span class='line'>    <span class="c1">;; decode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;decode1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">50</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid3&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; decode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;decode2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">100</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid4&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;output</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;result&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">784</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid5&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/linear-regression-output</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:label</span> <span class="nv">output</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">data-desc</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">first</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">mx-io/provide-data-desc</span> <span class="nv">train-data</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">label-desc</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">first</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">mx-io/provide-label-desc</span> <span class="nv">train-data</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When binding the shapes to the model, we now need to specify that the input data shapes is the label instead of the image and the output of the model is going to be the image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def</span>
</span><span class='line'>  <span class="nv">model</span>
</span><span class='line'>  <span class="c1">;;; change data shapes to label shapes</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/module</span> <span class="p">(</span><span class="nf">get-symbol</span><span class="p">)</span> <span class="p">{</span><span class="ss">:data-names</span> <span class="p">[</span><span class="s">&quot;input&quot;</span><span class="p">]</span> <span class="ss">:label-names</span> <span class="p">[</span><span class="s">&quot;input_&quot;</span><span class="p">]})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/bind</span> <span class="p">{</span><span class="ss">:data-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">label-desc</span> <span class="ss">:name</span> <span class="s">&quot;input&quot;</span><span class="p">)]</span>
</span><span class='line'>               <span class="ss">:label-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">data-desc</span> <span class="ss">:name</span> <span class="s">&quot;input_&quot;</span><span class="p">)]})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/init-params</span> <span class="p">{</span><span class="ss">:initializer</span>  <span class="p">(</span><span class="nf">initializer/uniform</span> <span class="mi">1</span><span class="p">)})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/init-optimizer</span> <span class="p">{</span><span class="ss">:optimizer</span> <span class="p">(</span><span class="nf">optimizer/adam</span> <span class="p">{</span><span class="ss">:learning-rage</span> <span class="mf">0.001</span><span class="p">})})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-metric</span> <span class="p">(</span><span class="nf">eval-metric/mse</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Training</h2>

<p>The training of the model is pretty straight forward. Just being mindful that we are using hte batch-label, (number label),  as the input and and validating with the batch-data, (image).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train</span> <span class="p">[</span><span class="nv">num-epochs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">epoch-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="nv">num-epochs</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting epoch &quot;</span> <span class="nv">epoch-num</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mx-io/do-batches</span>
</span><span class='line'>     <span class="nv">train-data</span>
</span><span class='line'>     <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>       <span class="c1">;;; change input to be the label</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">model</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/forward</span> <span class="p">{</span><span class="ss">:data</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">batch</span><span class="p">)</span>
</span><span class='line'>                       <span class="ss">:label</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">)})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update-metric</span> <span class="nv">my-metric</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/backward</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;result for epoch &quot;</span> <span class="nv">epoch-num</span> <span class="s">&quot; is &quot;</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">eval-metric/get-and-reset</span> <span class="nv">my-metric</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Results Before Training</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-test-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">test-data</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;;; change to input labels</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">test-labels</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">my-test-batch</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-labels</span><span class="p">}</span> <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;before-training-preds&quot;</span>
</span><span class='line'>               <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span>
</span><span class='line'>               <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">preds</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">test-labels</span> <span class="nb">first </span><span class="nv">ndarray/-&gt;vec</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">;=&gt; (6.0 1.0 0.0 0.0 3.0 1.0 4.0 8.0 0.0 9.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://live.staticflickr.com/65535/48689304281_a41bf39353.jpg" alt="before training" /></p>

<p>Not very impressive&hellip; Let&rsquo;s train</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">train</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">0</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">0</span>  <span class="nv">is</span>
</span><span class='line'><span class="p">[</span><span class="nv">mse</span> <span class="mf">0.0723091</span><span class="p">]</span>
</span><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">1</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">1</span>  <span class="nv">is</span>  <span class="p">[</span><span class="nv">mse</span> <span class="mf">0.053891845</span><span class="p">]</span>
</span><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">2</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">2</span>  <span class="nv">is</span>  <span class="p">[</span><span class="nv">mse</span> <span class="mf">0.05337505</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Results After Training</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="k">def </span><span class="nv">my-test-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">test-data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">test-labels</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">my-test-batch</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-labels</span><span class="p">}))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;after-training-preds&quot;</span>
</span><span class='line'>               <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span>
</span><span class='line'>               <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">preds</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">test-labels</span> <span class="nb">first </span><span class="nv">ndarray/-&gt;vec</span> <span class="p">(</span><span class="nb">take </span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;=&gt;   (9.0 5.0 7.0 1.0 8.0 6.0 6.0 0.0 8.0 1.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://live.staticflickr.com/65535/48689328481_338416ba7c.jpg" alt="after training" /></p>

<p>Cool! The first row is indeed</p>

<p><code>(9.0 5.0 7.0 1.0 8.0 6.0 6.0 0.0 8.0 1.0)</code></p>

<h2>Save Your Model</h2>

<p>Don&rsquo;t forget to save the generator model off &ndash; we are going to use it next time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/save-checkpoint</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:prefix</span> <span class="s">&quot;model/generator&quot;</span> <span class="ss">:epoch</span> <span class="mi">2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy Deep Learning until next time &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Focus on the Discriminator]]></title>
    <link href="http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator/"/>
    <updated>2019-08-30T10:16:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator</id>
    <content type="html"><![CDATA[<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/marcomagrini/698692268/in/photolist-24JYSq-hTTAJN-4gjQW9-9GRKCW-4gfNhz-x2yZ-6Nnwy1-6Lm68p-66BVjW-8hawRk-4sE2Jz-5Z6uvQ-6B4iH3-qzDvGU-aNpvLT-9UFZLh-egKvNt-bMh6PR-ceG9AL-gDqtze-96JhRW-7EWMH6-3MTfDt-9rUJ4W-dFPssj-8LLrys-aDAda3-9rUJ45-7xLAFR-prSHik-7yDFHC-7erqEc-6YJx8e-39SyR4-dkQnGi-7hy6zT-4UokrH-hkMoBr-9tBN3K-jq8Bpu-aDMSk2-pwQdmt-9tFrUD-6TzF6G-WDAsCC-8Mm4tD-8M8hyS-4yzkGK-67MPUw-crfg" title="sunflowers"><img src="https://live.staticflickr.com/1007/698692268_b31d429272.jpg" width="500" height="325" alt="sunflowers"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>In the <a href="https://gigasquidsoftware.com/blog/2019/08/16/simple-autoencoder/">last post</a>, we took a look at a simple autoencoder. The autoencoder is a deep learning model that takes in an image and, (through an encoder and decoder), works to produce the same image. In short:</p>

<ul>
<li>Autoencoder: image &ndash;> image</li>
</ul>


<p>For a discriminator, we are going to focus on only the first half on the autoencoder.</p>

<p><img src="https://live.staticflickr.com/65535/48647347383_9577b7b672_b.jpg" alt="discriminator" /></p>

<p>Why only half? We want a different transformation. We are going to want to take an image as input and then do some <em>discrimination</em> of the image and classify what type of image it is. In our case, the model is going to input an image of a handwritten digit and attempt to decide which number it is.</p>

<ul>
<li>Discriminator: image &ndash;> label</li>
</ul>


<p>As always, with deep learning. To do anything, we need data.</p>

<h3>MNIST Data</h3>

<p>Nothing changes here from the autoencoder code. We are still using the MNIST dataset for handwritten digits.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; Load the MNIST datasets</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">train-data</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mx-io/mnist-iter</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>    <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>    <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>    <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">test-data</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mx-io/mnist-iter</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>    <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>    <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>    <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The model will change since we want a different output.</p>

<h3>The Model</h3>

<p>We are still taking in the image as input, and using the same encoder layers from the autoencoder model. However, at the end, we use a fully connected layer that has 10 hidden nodes &ndash; one for each label of the digits 0-9. Then we use a softmax for the classification output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">input</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">output</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input_&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-symbol</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">as-&gt;</span> <span class="nv">input</span> <span class="nv">data</span>
</span><span class='line'>    <span class="c1">;; encode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;encode1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">100</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; encode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;encode2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">50</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;; this last bit changed from autoencoder</span>
</span><span class='line'>    <span class="c1">;;output</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;result&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">10</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/softmax-output</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:label</span> <span class="nv">output</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the autoencoder, we were never actually using the label, but we will certainly need to use it this time. It is reflected in the model&rsquo;s bindings with the data and label shapes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">model</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/module</span> <span class="p">(</span><span class="nf">get-symbol</span><span class="p">)</span> <span class="p">{</span><span class="ss">:data-names</span> <span class="p">[</span><span class="s">&quot;input&quot;</span><span class="p">]</span> <span class="ss">:label-names</span> <span class="p">[</span><span class="s">&quot;input_&quot;</span><span class="p">]})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/bind</span> <span class="p">{</span><span class="ss">:data-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">data-desc</span> <span class="ss">:name</span> <span class="s">&quot;input&quot;</span><span class="p">)]</span>
</span><span class='line'>                        <span class="ss">:label-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">label-desc</span> <span class="ss">:name</span> <span class="s">&quot;input_&quot;</span><span class="p">)]})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/init-params</span> <span class="p">{</span><span class="ss">:initializer</span> <span class="p">(</span><span class="nf">initializer/uniform</span> <span class="mi">1</span><span class="p">)})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/init-optimizer</span> <span class="p">{</span><span class="ss">:optimizer</span> <span class="p">(</span><span class="nf">optimizer/adam</span> <span class="p">{</span><span class="ss">:learning-rage</span> <span class="mf">0.001</span><span class="p">})})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the evaluation metric, we are also going to use an accuracy metric vs a mean squared error (mse) metric</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-metric</span> <span class="p">(</span><span class="nf">eval-metric/accuracy</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these items in place, we are ready to train the model.</p>

<h3>Training</h3>

<p>The training from the autoencoder needs to changes to use the real label for the the forward pass and updating the metric.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train</span> <span class="p">[</span><span class="nv">num-epochs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">epoch-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="nv">num-epochs</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting epoch &quot;</span> <span class="nv">epoch-num</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mx-io/do-batches</span>
</span><span class='line'>     <span class="nv">train-data</span>
</span><span class='line'>     <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>       <span class="c1">;;; here we make sure to use the label</span>
</span><span class='line'>       <span class="c1">;;; now for forward and update-metric</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">model</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/forward</span> <span class="p">{</span><span class="ss">:data</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">)</span>
</span><span class='line'>                       <span class="ss">:label</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">batch</span><span class="p">)})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update-metric</span> <span class="nv">my-metric</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">batch</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/backward</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">{</span><span class="ss">:epoch</span> <span class="nv">epoch-num</span>
</span><span class='line'>              <span class="ss">:metric</span> <span class="p">(</span><span class="nf">eval-metric/get-and-reset</span> <span class="nv">my-metric</span><span class="p">)})))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Let&rsquo;s Run Things</h3>

<p>It&rsquo;s always a good idea to take a look at things before you start training.</p>

<p>The first batch of the training data looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">my-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">train-data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">images</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">my-batch</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;originals&quot;</span>
</span><span class='line'>               <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span>
</span><span class='line'>               <span class="ss">:x</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">images</span>
</span><span class='line'>                      <span class="nv">first</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">]))})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://live.staticflickr.com/65535/48648000857_fb17f0de66.jpg" alt="training-batch" /></p>

<p>Before training, if we take the first batch from the test data and predict what the labels are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">my-test-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">test-data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">test-images</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">my-test-batch</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;test-images&quot;</span>
</span><span class='line'>               <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span>
</span><span class='line'>               <span class="ss">:x</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">test-images</span>
</span><span class='line'>                      <span class="nv">first</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">]))})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://live.staticflickr.com/65535/48647524478_ca35bef78f.jpg" alt="test-batch" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-images</span><span class="p">}</span> <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">preds</span>
</span><span class='line'>       <span class="nv">first</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">ndarray/argmax-channel</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">ndarray/-&gt;vec</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">take </span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'> <span class="c1">;=&gt; (1.0 8.0 8.0 8.0 8.0 8.0 2.0 8.0 8.0 1.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, not even close. The real first line of the images is <code>6 1 0 0 3 1 4 8 0 9</code></p>

<p>Let&rsquo;s Train!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">train</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; starting epoch  0</span>
</span><span class='line'><span class="c1">;; {:epoch 0, :metric [accuracy 0.83295]}</span>
</span><span class='line'><span class="c1">;; starting epoch  1</span>
</span><span class='line'><span class="c1">;; {:epoch 1, :metric [accuracy 0.9371333]}</span>
</span><span class='line'><span class="c1">;; starting epoch  2</span>
</span><span class='line'><span class="c1">;; {:epoch 2, :metric [accuracy 0.9547667]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the training, let&rsquo;s have another look at the predicted labels.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-images</span><span class="p">}</span> <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">preds</span>
</span><span class='line'>       <span class="nv">first</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">ndarray/argmax-channel</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">ndarray/-&gt;vec</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">take </span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'> <span class="c1">;=&gt; (6.0 1.0 0.0 0.0 3.0 1.0 4.0 8.0 0.0 9.0)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Predicted = <code>(6.0 1.0 0.0 0.0 3.0 1.0 4.0 8.0 0.0 9.0)</code></li>
<li>Actual = <code>6 1 0 0 3 1 4 8 0 9</code></li>
</ul>


<p>Rock on!</p>

<h3>Closing</h3>

<p>In this post, we focused on the first half of the autoencoder and made a discriminator model that took in an image and gave us a label.</p>

<p>Don&rsquo;t forget to save the trained model for later, we&rsquo;ll be using it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">m/save-checkpoint</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:prefix</span> <span class="s">&quot;model/discriminator&quot;</span>
</span><span class='line'>                            <span class="ss">:epoch</span> <span class="mi">2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Until then, here is a picture of Otto the cat in a basket to keep you going.</p>

<p><img src="https://live.staticflickr.com/65535/48647579433_ce703809fa_z.jpg" alt="Otto in basket" /></p>

<p><em>P.S. If you want to run all the code for yourself. It is <a href="https://github.com/gigasquid/clojure-mxnet-autoencoder/blob/master/src/clojure_mxnet_autoencoder/discriminator.clj">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Autoencoder]]></title>
    <link href="http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder/"/>
    <updated>2019-08-16T16:16:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder</id>
    <content type="html"><![CDATA[<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/horlik/2901925672/in/photolist-5qr8pf-qkv3m8-32RwmC-dZBC2B-ja8ch-48vDg-f56TGS-oUfNKn-652ZqG-QnCrbX-y3C828-jeGkmu-dxwE9L-jKaGtZ-haQ6j3-61w8UJ-WmitYz-tLymA-dZCHC4-CGvx3R-CC3GPE-BSxzda-eu625R-vHAgnk-cR7WAE-jZiLgu-BsZwLP-fhfvPT-dN1Rf9-o8Mkby-8zDocw-5DvC7S-CEij58-oaw922-akUgeW-ayQiGU-aay1vS-2fVFske-2eoRpCe-rqwa4o-9VJPtv-opgEcq-MDfFe-9yzUaK-4is9Z9-cutXnm-f9U23-L7hpoe-3i3H-enSJKf" title="Perfect mirror"><img src="https://live.staticflickr.com/3274/2901925672_325f5faeb8.jpg" width="500" height="364" alt="Perfect mirror"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p><em>If you look long enough into the autoencoder, it looks back at you.</em></p>

<p>The Autoencoder is a fun deep learning model to look into. Its goal is simple: given an input image, we would like to have the same output image.</p>

<p>It&rsquo;s sort of an identity function for deep learning models, but it is composed of two parts: an encoder and decoder, with the encoder translating the images to a <em>latent space representation</em> and the encoder translating that back to a regular images that we can view.</p>

<p><img src="https://camo.githubusercontent.com/1ab40362a922059fa3686914cf5cff803ba7dd43/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a4c53594e57356d33544e377852583631425a686f5a412e706e67" alt="" /></p>

<p>We are going to make a simple autoencoder with Clojure MXNet for handwritten digits using the MNIST dataset.</p>

<h3>The Dataset</h3>

<p>We first load up the training data into an iterator that will allow us to cycle through all the images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">train-data</span> <span class="p">(</span><span class="nf">mx-io/mnist-iter</span> <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                   <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                   <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>                                   <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>                                   <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>                                   <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice there the the input shape is 784. We are purposely flattening out our 28x28 image of a number to just be a one dimensional flat array. The reason is so that we can use a simpler model for the autoencoder.</p>

<p>We also load up the corresponding test data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">test-data</span> <span class="p">(</span><span class="nf">mx-io/mnist-iter</span> <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                  <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                  <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>                                  <span class="ss">:batch-size</span> <span class="nv">batch-size</span>
</span><span class='line'>                                  <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>                                  <span class="ss">:shuffle</span> <span class="nv">true</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we are working with deep learning models we keep the training and the test data separate. When we train the model, we won&rsquo;t use the test data. That way we can evaluate it later on the unseen test data.</p>

<h3>The Model</h3>

<p>Now we need to define the layers of the model. We know we are going to have an input and an output. The input will be the array that represents the image of the digit and the output will also be an array which is reconstruction of that image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">input</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">output</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;input_&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-symbol</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">as-&gt;</span> <span class="nv">input</span> <span class="nv">data</span>
</span><span class='line'>    <span class="c1">;; encode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;encode1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">100</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; encode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;encode2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">50</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; decode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;decode1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">50</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid3&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;; decode</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;decode2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">100</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid4&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;output</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;result&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">784</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;sigmoid5&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;sigmoid&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/linear-regression-output</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:label</span> <span class="nv">output</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the model above we can see the input (image) being passed through simple layers of encoder to its latent representation, and then boosted back up from the decoder back into an output (image). It goes through the pleasingly symmetric transformation of:</p>

<p>784 (image) &ndash;> 100 &ndash;> 50 &ndash;> 50 &ndash;> 100 &ndash;> 784 (output)</p>

<p>We can now construct the full model with the <em>module</em> api from clojure-mxnet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">data-desc</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">mx-io/provide-data-desc</span> <span class="nv">train-data</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">model</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/module</span> <span class="p">(</span><span class="nf">get-symbol</span><span class="p">)</span> <span class="p">{</span><span class="ss">:data-names</span> <span class="p">[</span><span class="s">&quot;input&quot;</span><span class="p">]</span> <span class="ss">:label-names</span> <span class="p">[</span><span class="s">&quot;input_&quot;</span><span class="p">]})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/bind</span> <span class="p">{</span><span class="ss">:data-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">data-desc</span> <span class="ss">:name</span> <span class="s">&quot;input&quot;</span><span class="p">)]</span>
</span><span class='line'>                        <span class="ss">:label-shapes</span> <span class="p">[(</span><span class="nb">assoc </span><span class="nv">data-desc</span> <span class="ss">:name</span> <span class="s">&quot;input_&quot;</span><span class="p">)]})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/init-params</span> <span class="p">{</span><span class="ss">:initializer</span>  <span class="p">(</span><span class="nf">initializer/uniform</span> <span class="mi">1</span><span class="p">)})</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">m/init-optimizer</span> <span class="p">{</span><span class="ss">:optimizer</span> <span class="p">(</span><span class="nf">optimizer/adam</span> <span class="p">{</span><span class="ss">:learning-rage</span> <span class="mf">0.001</span><span class="p">})})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that when we are binding the <code>data-shapes</code> and <code>label-shapes</code> we are using only the <code>data</code> from our handwritten digit dataset, (the images), and not the labels. This will ensure that as it trains it will seek to recreate the input image for the output image.</p>

<h3>Before Training</h3>

<p>Before we start our training, let&rsquo;s get a baseline of what the original images look like and what the output of the untrained model is.</p>

<p>To look at the original images we can take the first training batch of 100 images and visualize them. Since we are initially using the flattened <code>[784]</code> image representation. We need to reshape it to the 28x28 image that we can recognize.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">train-data</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">images</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">my-batch</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/shape</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">images</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;originals&quot;</span> <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span> <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">images</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/50581552@N06/48567560737/in/dateposted-public/" title="originals"><img src="https://live.staticflickr.com/65535/48567560737_672d065ac2.jpg" width="420" height="420" alt="originals"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>We can also do the same visualization with the test batch of data images by putting them into the <code>predict-batch</code> and using our model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; before training</span>
</span><span class='line'> <span class="p">(</span><span class="k">def </span><span class="nv">my-test-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">test-data</span><span class="p">))</span>
</span><span class='line'> <span class="p">(</span><span class="k">def </span><span class="nv">test-images</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">my-test-batch</span><span class="p">))</span>
</span><span class='line'> <span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-images</span><span class="p">}</span> <span class="p">))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;before-training-preds&quot;</span> <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span> <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">preds</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/50581552@N06/48567589067/in/dateposted-public/" title="before-training-preds"><img src="https://live.staticflickr.com/65535/48567589067_e44eeda1a9.jpg" width="420" height="420" alt="before-training-preds"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>They are not anything close to recognizable as numbers.</p>

<h3>Training</h3>

<p>The next step is to train the model on the data. We set up a training function to step through all the batches of data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-metric</span> <span class="p">(</span><span class="nf">eval-metric/mse</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train</span> <span class="p">[</span><span class="nv">num-epochs</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">epoch-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="nv">num-epochs</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;starting epoch &quot;</span> <span class="nv">epoch-num</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mx-io/do-batches</span>
</span><span class='line'>     <span class="nv">train-data</span>
</span><span class='line'>     <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">model</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/forward</span> <span class="p">{</span><span class="ss">:data</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">)</span> <span class="ss">:label</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">)})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update-metric</span> <span class="nv">my-metric</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/backward</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">m/update</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;result for epoch &quot;</span> <span class="nv">epoch-num</span> <span class="s">&quot; is &quot;</span> <span class="p">(</span><span class="nf">eval-metric/get-and-reset</span> <span class="nv">my-metric</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each batch of 100 images it is doing the following:</p>

<ul>
<li>Run the forward pass of the model with both the data and label being the image</li>
<li>Update the accuracy of the model with the <code>mse</code> (mean squared error metric)</li>
<li>Do the backward computation</li>
<li>Update the model according to the optimizer and the forward/backward computation.</li>
</ul>


<p>Let&rsquo;s train it for 3 epochs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">0</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">0</span>  <span class="nv">is</span>  <span class="p">[</span><span class="nv">mse</span> <span class="mf">0.06460866</span><span class="p">]</span>
</span><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">1</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">1</span>  <span class="nv">is</span>  <span class="p">[</span><span class="nv">mse</span> <span class="mf">0.033874355</span><span class="p">]</span>
</span><span class='line'><span class="nv">starting</span> <span class="nv">epoch</span>  <span class="mi">2</span>
</span><span class='line'><span class="nv">result</span> <span class="nb">for </span><span class="nv">epoch</span>  <span class="mi">2</span>  <span class="nv">is</span>  <span class="p">[</span><span class="nv">mse</span> <span class="mf">0.027255038</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>After training</h3>

<p>We can check the test images again and see if they look better.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; after training</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-test-batch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">test-data</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">test-images</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">my-test-batch</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-batch</span> <span class="nv">model</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">test-images</span><span class="p">}</span> <span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">viz/im-sav</span> <span class="p">{</span><span class="ss">:title</span> <span class="s">&quot;after-training-preds&quot;</span> <span class="ss">:output-path</span> <span class="s">&quot;results/&quot;</span> <span class="ss">:x</span> <span class="p">(</span><span class="nf">ndarray/reshape</span> <span class="p">(</span><span class="nb">first </span><span class="nv">preds</span><span class="p">)</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">1</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">])})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/50581552@N06/48567523206/in/dateposted-public/" title="after-training-preds"><img src="https://live.staticflickr.com/65535/48567523206_d78480012f.jpg" width="420" height="420" alt="after-training-preds"></a><script async src="http://gigasquid.github.io//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Much improved! They definitely look like numbers.</p>

<h3>Wrap up</h3>

<p>We&rsquo;ve made a simple autoencoder that can take images of digits and compress them down to a latent space representation the can later be decoded into the same image.</p>

<p>If you want to check out the full code for this example, you can find it <a href="https://github.com/gigasquid/clojure-mxnet-autoencoder">here</a>.</p>

<p>Stay tuned. We&rsquo;ll take this example and build on it in future posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure MXNet April Update]]></title>
    <link href="http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update/"/>
    <updated>2019-04-26T15:51:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update</id>
    <content type="html"><![CDATA[<p>Spring is bringing some beautiful new things to the  <a href="http://mxnet.incubator.apache.org/">Clojure MXNet</a>. Here are some highlights for the month of April.</p>

<h2>Shipped</h2>

<p>We&rsquo;ve merged <a href="https://github.com/apache/incubator-mxnet/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed+clojure">10 PRs</a> over the last month. Many of them focus on core improvements to documentation and usability which is very important.</p>

<p>The MXNet project is also preparing a new release <code>1.4.1</code>, so keep on the lookout for that to hit in the near future.</p>

<h2>Clojure MXNet Made Simple Article Series</h2>

<p><a href="https://arthurcaillau.com/about/">Arthur Caillau</a> added another post to his fantastic series &ndash; <a href="https://arthurcaillau.com/mxnet-made-simple-pretrained-models/">MXNet made simple: Pretrained Models for image classification &ndash; Inception and VGG</a></p>

<h2>Cool Stuff in Development</h2>

<h3>New APIs</h3>

<p>Great progress was made on the <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=103092678">new version of the API for the Clojure NDArray and Symbol APIs</a> by <a href="https://github.com/kedarbellare">Kedar Bellare</a>. We now have an experimental new version of the apis that are generated more directly from the C code so that we can have more control over the output.</p>

<p>For example the new version of the generated api for NDArray looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defn</span>
</span><span class='line'> <span class="nv">activation</span>
</span><span class='line'> <span class="s">&quot;Applies an activation function element-wise to the input.</span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  The following activation functions are supported:</span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  - `relu`: Rectified Linear Unit, :math:`y = max(x, 0)`</span>
</span><span class='line'><span class="s">  - `sigmoid`: :math:`y = \\frac{1}{1 + exp(-x)}`</span>
</span><span class='line'><span class="s">  - `tanh`: Hyperbolic tangent, :math:`y = \\frac{exp(x) - exp(-x)}{exp(x) + exp(-x)}`</span>
</span><span class='line'><span class="s">  - `softrelu`: Soft ReLU, or SoftPlus, :math:`y = log(1 + exp(x))`</span>
</span><span class='line'><span class="s">  - `softsign`: :math:`y = \\frac{x}{1 + abs(x)}`</span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  Defined in src/operator/nn/activation.cc:L167</span>
</span><span class='line'><span class="s">  </span>
</span><span class='line'><span class="s">  `data`: The input array.</span>
</span><span class='line'><span class="s">  `act-type`: Activation function to be applied.</span>
</span><span class='line'><span class="s">  `out`: Output array. (optional)&quot;</span>
</span><span class='line'> <span class="p">([</span><span class="nv">data</span> <span class="nv">act-type</span><span class="p">]</span> <span class="p">(</span><span class="nf">activation</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span>, <span class="ss">:act-type</span> <span class="nv">act-type</span><span class="p">}))</span>
</span><span class='line'> <span class="p">([{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">act-type</span> <span class="nv">out</span><span class="p">]</span>, <span class="ss">:or</span> <span class="p">{</span><span class="nv">out</span> <span class="nv">nil</span><span class="p">}</span>, <span class="ss">:as</span> <span class="nv">opts</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">util/coerce-return</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">NDArrayAPI/Activation</span> <span class="nv">data</span> <span class="nv">act-type</span> <span class="p">(</span><span class="nf">util/-&gt;option</span> <span class="nv">out</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>as opposed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defn</span>
</span><span class='line'> <span class="nv">activation</span>
</span><span class='line'> <span class="p">([</span><span class="o">&amp;</span> <span class="nv">nd-array-and-params</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">util/coerce-return</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">NDArray/Activation</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">util/coerce-param</span>
</span><span class='line'>     <span class="nv">nd-array-and-params</span>
</span><span class='line'>     <span class="o">#</span><span class="p">{</span><span class="s">&quot;scala.collection.Seq&quot;</span><span class="p">})))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So much nicer!!!</p>

<h3>BERT (State of the Art for NLP)</h3>

<p>We also have some really exciting examples for BERT in a <a href="https://github.com/apache/incubator-mxnet/pull/14769">PR</a> that will be merged soon. If you are not familiar with BERT, this <a href="http://jalammar.github.io/illustrated-bert/">blog post</a> is a good overview. Basically, it&rsquo;s the state of the art in NLP right now. With the help of exported models from <a href="https://github.com/dmlc/gluon-nlp">GluonNLP</a>, we can do both inference and fine tuning of BERT models in MXNet with Clojure! This is an excellent example of cross fertilization across the GluonNLP, Scala, and Clojure MXNet projects.</p>

<p>There are two examples.</p>

<p>1) BERT question and answer inference based off of a fine tuned model of the <a href="https://rajpurkar.github.io/SQuAD-explorer/">SQuAD Dataset</a> in GluonNLP which is then exported. It allows one to actually do some natural language question and answering like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">Question</span> <span class="nv">Answer</span> <span class="nv">Data</span>
</span><span class='line'><span class="p">{</span><span class="ss">:input-answer</span>
</span><span class='line'> <span class="s">&quot;Rich Hickey is the creator of the Clojure language. Before Clojure, he developed dotLisp, a similar project based on the .NET platform, and three earlier attempts to provide interoperability between Lisp and Java: a Java foreign language interface for Common Lisp, A Foreign Object Interface for Lisp, and a Lisp-friendly interface to Java Servlets.&quot;</span>,
</span><span class='line'> <span class="ss">:input-question</span> <span class="s">&quot;Who created Clojure?&quot;</span>,
</span><span class='line'> <span class="ss">:ground-truth-answers</span> <span class="p">[</span><span class="s">&quot;rich&quot;</span> <span class="s">&quot;hickey&quot;</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">Predicted</span> <span class="nv">Answer</span><span class="err">:</span>  <span class="p">[</span><span class="nv">rich</span> <span class="nv">hickey</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) The second example is using the exported BERT base model and then fine tuning it in Clojure to do a task with sentence pair classification to see if two sentences are equivalent or not.</p>

<p>The nice thing about this is that we were able to convert the existing <a href="https://gluon-nlp.mxnet.io/examples/sentence_embedding/bert.html">tutorial in GluonNLP</a> over to a Clojure Jupyter notebook with the <code>lein-jupyter</code> plugin. I didn&rsquo;t realize that there is a nifty <code>save-as</code> command in Jupyter that can generate a markdown file, which makes for very handy documentation. Take a peek at the tutorial <a href="https://github.com/apache/incubator-mxnet/blob/d062d46f1c351dc9b70a038511b564dab5c43266/contrib/clojure-package/examples/bert/fine-tune-bert.md">here</a>. It might make its way into a blog post on its own in the next week or two.</p>

<h2>Upcoming Events</h2>

<ul>
<li><p>I&rsquo;ll be speaking about Clojure MXNet at the next <a href="https://twitter.com/scicloj">Scicloj Event</a> on May 15th at 10PM UTC. Please join us and get involved in making Clojure a great place for Data Science.</p></li>
<li><p>I&rsquo;m also really excited to attend <a href="https://iclr.cc/">ICLR</a> in a couple weeks. It is a <em>huge conference</em> that I&rsquo;m sure will melt my mind with the latest research in Deep Learning. If anyone else is planning to attend, please say hi :)</p></li>
</ul>


<h2>Get Involved</h2>

<p>As always, we welcome involvement in the true Apache tradition. If you have questions or want to say hi, head on over the the closest #mxnet room on your preferred server. We are on Clojurian&rsquo;s slack and Zulip</p>

<h2>Cat Picture of the Month</h2>

<p>To close out, let&rsquo;s take a lesson from my cats Otto and Pi and don&rsquo;t forget the importance of naps.</p>

<p><img src="https://live.staticflickr.com/65535/47707608431_5c5d0c73f8_c.jpg"></p>

<p>Have a great rest of April!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure MXNet March Update]]></title>
    <link href="http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update/"/>
    <updated>2019-03-22T10:42:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting a monthly update for <a href="http://mxnet.incubator.apache.org/">Clojure MXNet</a>. The goal is to share the progress and exciting things that are happening in the project and our community.</p>

<p>Here&rsquo;s some highlights for the month of March.</p>

<h2>Shipped</h2>

<p>Under the shipped heading, the 1.4.0 release of MXNet has been released, along with the <a href="https://search.maven.org/search?q=clojure%20mxnet">Clojure MXNet Jars</a>. There have been improvements to the JVM memory management and an Image API addition. You can see the full list of changes <a href="https://github.com/apache/incubator-mxnet/releases/tag/1.4.0#clojure">here</a></p>

<h2>Clojure MXNet Made Simple Article Series</h2>

<p><a href="https://arthurcaillau.com/about/">Arthur Caillau</a> authored a really nice series of blog posts to help get people started with Clojure MXNet.</p>

<ul>
<li><a href="https://arthurcaillau.com/mxnet-clojure-aws/">Getting started with Clojure and MXNet on AWS</a></li>
<li><a href="https://arthurcaillau.com/mxnet-made-simple-ndarrays-api/">MXNet made simple: Clojure NDArray API</a></li>
<li><a href="https://arthurcaillau.com/mxnet-made-simple-symbol-api/">MXNet made simple: Clojure Symbol API</a></li>
<li><a href="https://arthurcaillau.com/mxnet-made-simple-module-api/">MXNet made simple: Clojure Module API</a></li>
<li><a href="https://arthurcaillau.com/mxnet-made-simple-symbol-visualization/">MXNet made simple: Clojure Symbol Visualization API</a></li>
<li><a href="https://arthurcaillau.com/mxnet-made-simple-image-manipulation/">MXNet made simple: Image Manipulation with OpenCV and MXNet</a></li>
</ul>


<h2>Lein Template &amp; Docker file</h2>

<p><a href="https://github.com/hellonico/">Nicolas Modrzyk</a> created a Leiningen template that allows you to easily get a MXNet project started &ndash; with a notebook too! It&rsquo;s a great way to take Clojure MXNet for a spin</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># create project
</span><span class='line'>lein new clj-mxnet hello
</span><span class='line'>
</span><span class='line'># run included sample
</span><span class='line'>lein run
</span><span class='line'>
</span><span class='line'># start notebook engine
</span><span class='line'>lein notebook
</span><span class='line'>
</span><span class='line'># open notebook
</span><span class='line'>http://0.0.0.0:10000/worksheet.html?filename=notes/practice.clj
</span><span class='line'># open empty notebook with all namespaces
</span><span class='line'>http://0.0.0.0:10000/worksheet.html?filename=notes/empty.clj</span></code></pre></td></tr></table></div></figure>


<p>There also is a docker file as well</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -it -p 10000:10000 hellonico/mxnet
</span><span class='line'>
</span><span class='line'>After starting the container, you can open the same notebooks as above:
</span><span class='line'>
</span><span class='line'># open notebook
</span><span class='line'>http://0.0.0.0:10000/worksheet.html?filename=notes/practice.clj
</span><span class='line'># open empty notebook with all namespaces
</span><span class='line'>http://0.0.0.0:10000/worksheet.html?filename=notes/empty.clj</span></code></pre></td></tr></table></div></figure>


<h2>Cool Stuff in Development</h2>

<p>There are a few really interesting things cooking for the future.</p>

<p>One is a <a href="https://github.com/apache/incubator-mxnet/pull/14372">PR for memory fixes</a> from the Scala team that is getting really close to merging. This will be a solution to some the the memory problems that were encountered by early adopters of the Module API.</p>

<p>Another, is the <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=103092678">new version of the API for the Clojure NDArray and Symbol APIs</a> that is being spearheaded by Kedar Bellare</p>

<p>Finally, work is being started to create a <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=103089990">Gluon API for the Clojure package</a> which is quite exciting.</p>

<h2>Get Involved</h2>

<p>As always, we welcome involvement in the true Apache tradition. If you have questions or want to say hi, head on over the the closest #mxnet room on your preferred server. We are on Clojurian&rsquo;s slack and Zulip.</p>

<h2>Cat Picture of the Month</h2>

<p>There is no better way to close out an update than a cat picture, so here is a picture of my family cat, Otto, watching birds at the window.</p>

<p><img src="https://farm8.staticflickr.com/7862/46718997174_13bf6e88ea_z.jpg"></p>

<p>Have a great rest of March!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Detection With Clojure MXNet]]></title>
    <link href="http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet/"/>
    <updated>2019-01-19T13:34:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet</id>
    <content type="html"><![CDATA[<p><img src="https://c1.staticflickr.com/8/7837/32928474208_4960caafb3.jpg" alt="" /></p>

<p>Object detection just landed in MXNet thanks to the work of contributors <a href="https://github.com/kedarbellare">Kedar Bellare</a> and <a href="https://github.com/hellonico/">Nicolas Modrzyk</a>. Kedar ported over the <code>infer</code> package to Clojure, making inference and prediction much easier for users and Nicolas integrated in his <a href="https://github.com/hellonico/origami">Origami</a> OpenCV library into the the examples to make the visualizations happen.</p>

<p>We&rsquo;ll walk through the main steps to use the <code>infer</code> object detection which include creating the detector with a model and then loading the image and running the inference on it.</p>

<h3>Creating the Detector</h3>

<p>To create the detector you need to define a couple of things:</p>

<ul>
<li>How big is your image?</li>
<li>What model are you going to be using for object detection?</li>
</ul>


<p>In the code below, we are going to be giving it an color image of size 512 x 512.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">create-detector</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">descriptors</span> <span class="p">[{</span><span class="ss">:name</span> <span class="s">&quot;data&quot;</span>
</span><span class='line'>                      <span class="ss">:shape</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">512</span> <span class="mi">512</span><span class="p">]</span>
</span><span class='line'>                      <span class="ss">:layout</span> <span class="nv">layout/NCHW</span>
</span><span class='line'>                      <span class="ss">:dtype</span> <span class="nv">dtype/FLOAT32</span><span class="p">}]</span>
</span><span class='line'>        <span class="nv">factory</span> <span class="p">(</span><span class="nf">infer/model-factory</span> <span class="nv">model-path-prefix</span> <span class="nv">descriptors</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">infer/create-object-detector</span> <span class="nv">factory</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The shape is going to be <code>[1 3 512 512]</code>.

<ul>
<li>The <code>1</code> is for the batch size which in our case is a single image.</li>
<li>The <code>3</code> is for the channels in the image which for a RGB image is <code>3</code></li>
<li>The <code>512</code> is for the image height and width.</li>
</ul>
</li>
<li>The <code>layout</code> specifies that the shape given is in terms of <code>NCHW</code> which is batch size, channel size, height, and width.</li>
<li>The <code>dtype</code> is the image data type which will be the standard <code>FLOAT32</code></li>
<li>The <code>model-path-prefix</code> points to the place where the trained model we are using for object detection lives.</li>
</ul>


<p>The model we are going to use is the <a href="https://arxiv.org/abs/1512.02325">Single Shot Multiple Box Object Detector (SSD)</a>. You can download the model yourself using this <a href="https://github.com/apache/incubator-mxnet/blob/master/contrib/clojure-package/examples/infer/objectdetector/scripts/get_ssd_data.sh">script</a>.</p>

<h3>How to Load an Image and Run the Detector</h3>

<p>Now that we have a model and a detector, we can load an image up and run the object detection.</p>

<p>To load the image use <code>load-image</code> which will load the image from the path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">infer/load-image-from-file</span> <span class="nv">input-image</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run the detection using <code>infer/detect-objects</code> which will give you the top five predictions by default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">infer/detect-objects</span> <span class="nv">detector</span> <span class="nv">image</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will give an output something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[[{</span><span class="ss">:class</span> <span class="s">&quot;person&quot;</span>,
</span><span class='line'>   <span class="ss">:prob</span> <span class="mf">0.9657765</span>,
</span><span class='line'>   <span class="ss">:x-min</span> <span class="mf">0.021868259</span>,
</span><span class='line'>   <span class="ss">:y-min</span> <span class="mf">0.049295247</span>,
</span><span class='line'>   <span class="ss">:x-max</span> <span class="mf">0.9975169</span>,
</span><span class='line'>   <span class="ss">:y-max</span> <span class="mf">0.9734151</span><span class="p">}</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:class</span> <span class="s">&quot;dog&quot;</span>,
</span><span class='line'>   <span class="ss">:prob</span> <span class="mf">0.17513266</span>,
</span><span class='line'>   <span class="ss">:x-min</span> <span class="mf">0.16772352</span>,
</span><span class='line'>   <span class="ss">:y-min</span> <span class="mf">0.45792937</span>,
</span><span class='line'>   <span class="ss">:x-max</span> <span class="mf">0.55409217</span>,
</span><span class='line'>   <span class="ss">:y-max</span> <span class="mf">0.72507095</span><span class="p">}</span>
</span><span class='line'>   <span class="nv">...</span>
</span><span class='line'><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>which you can then use to draw bounding boxes on the image.</p>

<h3>Try Running the Example</h3>

<p><img src="https://c1.staticflickr.com/8/7804/31862638207_61be3a6e3c_b.jpg" alt="" /></p>

<p>One of the best ways to explore using it is with the <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package/examples/infer/objectdetector">object detection example</a> in the MXNet repo. It will be coming out officially in the <code>1.5.0</code> release, but you can get an early peek at it by building the project and running the example with the nightly snapshot.</p>

<p>You can do this by cloning the <a href="https://github.com/apache/incubator-mxnet">MXNet Repo</a> and changing directory to <code>contrib/clojure-package</code>.</p>

<p>Next, edit the <code>project.clj</code> to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">org.apache.mxnet.contrib.clojure/clojure-mxnet</span> <span class="s">&quot;1.5.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;Clojure package for MXNet&quot;</span>
</span><span class='line'>  <span class="ss">:url</span> <span class="s">&quot;https://github.com/apache/incubator-mxnet&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Apache License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.9.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">t6/from-scala</span> <span class="s">&quot;0.3.0&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="c1">;; To use with nightly snapshot</span>
</span><span class='line'>                 <span class="c1">;[org.apache.mxnet/mxnet-full_2.11-osx-x86_64-cpu &quot;&lt;insert-snapshot-version&gt;&quot;]</span>
</span><span class='line'>                 <span class="c1">;[org.apache.mxnet/mxnet-full_2.11-linux-x86_64-cpu &quot;&lt;insert-snapshot-version&gt;&quot;]</span>
</span><span class='line'>                 <span class="c1">;[org.apache.mxnet/mxnet-full_2.11-linux-x86_64-gpu &quot;&lt;insert-snapshot-version&quot;]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.apache.mxnet/mxnet-full_2.11-osx-x86_64-cpu</span> <span class="s">&quot;1.5.0-SNAPSHOT&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="c1">;;; CI</span>
</span><span class='line'>                 <span class="o">#</span><span class="nv">_</span><span class="p">[</span><span class="nv">org.apache.mxnet/mxnet-full_2.11</span> <span class="s">&quot;INTERNAL&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.clojure/tools.logging</span> <span class="s">&quot;0.4.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.apache.logging.log4j/log4j-core</span> <span class="s">&quot;2.8.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.apache.logging.log4j/log4j-api</span> <span class="s">&quot;2.8.1&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">org.slf4j/slf4j-log4j12</span> <span class="s">&quot;1.7.25&quot;</span> <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">org.slf4j/slf4j-api</span><span class="p">]]]</span>
</span><span class='line'>  <span class="ss">:pedantic?</span> <span class="ss">:skip</span>
</span><span class='line'>  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-codox</span> <span class="s">&quot;0.10.3&quot;</span> <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">org.clojure/clojure</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">lein-cloverage</span> <span class="s">&quot;1.0.10&quot;</span> <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">org.clojure/clojure</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">lein-cljfmt</span> <span class="s">&quot;0.5.7&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:codox</span> <span class="p">{</span><span class="ss">:namespaces</span> <span class="p">[</span><span class="o">#</span><span class="s">&quot;^org\.apache\.clojure-mxnet\.(?!gen).*&quot;</span><span class="p">]}</span>
</span><span class='line'>  <span class="ss">:aot</span> <span class="p">[</span><span class="nv">dev.generator</span><span class="p">]</span>
</span><span class='line'>  <span class="ss">:repositories</span> <span class="p">[[</span><span class="s">&quot;staging&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://repository.apache.org/content/repositories/staging&quot;</span>                  <span class="ss">:snapshots</span> <span class="nv">true</span>
</span><span class='line'>                             <span class="ss">:update</span> <span class="ss">:always</span><span class="p">}]</span>
</span><span class='line'>                 <span class="p">[</span><span class="s">&quot;snapshots&quot;</span> <span class="p">{</span><span class="ss">:url</span> <span class="s">&quot;https://repository.apache.org/content/repositories/snapshots&quot;</span>               <span class="ss">:snapshots</span> <span class="nv">true</span>
</span><span class='line'>                              <span class="ss">:update</span> <span class="ss">:always</span><span class="p">}]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are running on linux, you should change the <code>mxnet-full_2.11-osx-x86_64-cpu</code> to <code>mxnet-full_2.11-linux-x86_64-cpu</code>.</p>

<p>Next, go ahead and do <code>lein test</code> to make sure that everything builds ok. If you run into any trouble please refer to <a href="https://github.com/apache/incubator-mxnet/blob/master/contrib/clojure-package/README.md">README</a> for any missing dependencies.</p>

<p>After that do a <code>lein install</code> to install the <code>clojure-mxnet</code> jar to your local maven. Now you are ready to <code>cd examples/infer/object-detection</code> to try it out. Refer to the README for more details.</p>

<p>If you run into any problems getting started, feel free to reach out in the Clojurian #mxnet slack room or open an issue at the MXNet project. We are a friendly group and happy to help out.</p>

<p>Thanks again to the community for the contributions to make this possible. It&rsquo;s great seeing new things coming to life.</p>

<p>Happy Object Detecting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to GAN a Flan]]></title>
    <link href="http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan/"/>
    <updated>2018-12-18T16:34:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan</id>
    <content type="html"><![CDATA[<p>It&rsquo;s holiday time and that means parties and getting together with friends. Bringing a baked good or dessert to a gathering is a time honored tradition. But what if this year, you could take it to the next level? Everyone brings actual food. But with the help of Deep Learning, you can bring something completely different &ndash;  you can bring the <em>image</em> of baked good! I&rsquo;m not talking about just any old image that someone captured with a camera or created with a pen and paper. I&rsquo;m talking about the computer itself <strong>creating</strong>. This image would be never before seen, totally unique, and crafted by the creative process of the machine.</p>

<p>That is exactly what we are going to do. We are going to create a <em>flan</em></p>

<p><img src="https://c1.staticflickr.com/5/4065/4339500429_aa9c55f246_n.jpg" alt="Photo by Lucia Sanchez on Flickr" /></p>

<p>If you&rsquo;ve never had a flan before, it&rsquo;s a yummy dessert made of a baked custard with caramel sauce on it.</p>

<p>&ldquo;Why a flan?&rdquo;, you may ask. There are quite a few reasons:</p>

<ul>
<li>It&rsquo;s tasty in real life.</li>
<li>Flan rhymes with GAN, <em>(unless you pronounce it &ldquo;Gaaahn&rdquo;)</em>.</li>
<li>Why not?</li>
</ul>


<p>Onto the recipe. How are we actually going to make this work? We need some ingredients:</p>

<ul>
<li><a href="https://clojure.org/">Clojure</a> &ndash; the most advanced programming language to create generative desserts.</li>
<li><a href="https://mxnet.apache.org">Apache MXNet</a> &ndash; a flexible and efficient deep learning library that has a Clojure package.</li>
<li>1000-5000 pictures of flans &ndash; for Deep Learning you need data!</li>
</ul>


<h2>Gather Flan Pictures</h2>

<p>The first thing you want to do is gather your 1000 or more images with a <a href="https://github.com/montoyamoraga/scrapers">scraper</a>. The scraper will crawl google, bing, or instagram and download pictures of <em>mostly</em> flans to your computer. You may have to eyeball and remove any clearly wrong ones from your stash.</p>

<p>Next, you need to gather all these images in a directory and run a tool called <a href="https://github.com/apache/incubator-mxnet/blob/master/tools/im2rec.py">im2rec.py</a> on them to turn them into an <a href="https://mxnet.incubator.apache.org/tutorials/basic/data.html#loading-data-using-image-iterators">image record iterator</a> for use with MXNet. This will produce an optimized format that will allow our deep learning program to efficiently cycle through them.</p>

<p>Run:</p>

<pre><code>python3 im2rec.py --resize 28 root flan
</code></pre>

<p>to produce a <code>flan.rec</code> file with images resized to 28x28 that we can use next.</p>

<h2>Load Flan Pictures into MXNet</h2>

<p>The next step is to import the image record iterator into the MXNet with the <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package">Clojure API</a>. We can do this with the <code>io</code> namespace.</p>

<p>Add this to your require:</p>

<pre><code>[org.apache.clojure-mxnet.io :as mx-io]
</code></pre>

<p>Now, we can load our images:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">flan-iter</span> <span class="p">(</span><span class="nf">mx-io/image-record-iter</span> <span class="p">{</span><span class="ss">:path-imgrec</span> <span class="s">&quot;flan.rec&quot;</span>
</span><span class='line'>                                         <span class="ss">:data-shape</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">28</span> <span class="mi">28</span><span class="p">]</span>
</span><span class='line'>                                         <span class="ss">:batch-size</span> <span class="nv">batch-size</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, that we have the images, we need to create our <code>model</code>. This is what is actually going to do the learning and creating of images.</p>

<h2>Creating a GAN model.</h2>

<p>GAN stands for <em>Generative Adversarial Network</em>. This is a incredibly cool deep learning technique that has two different models pitted against each, yet both learning and getting better at the same time. The two models are a generator and a discriminator. The generator model creates a new image from a random noise vector. The discriminator then tries to tell whether the image is a real image or a fake image. We need to create both of these models for our network.</p>

<p>First, the discriminator model. We are going to use the <code>symbol</code> namespace for the clojure package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">discriminator</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">as-&gt;</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;data&quot;</span><span class="p">)</span> <span class="nv">data</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/convolution</span> <span class="s">&quot;d1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span>
</span><span class='line'>                           <span class="ss">:kernel</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>                           <span class="ss">:pad</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>                           <span class="ss">:stride</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>                           <span class="ss">:num-filter</span> <span class="nv">ndf</span>
</span><span class='line'>                           <span class="ss">:no-bias</span> <span class="nv">true</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/batch-norm</span> <span class="s">&quot;dbn1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:fix-gamma</span> <span class="nv">true</span> <span class="ss">:eps</span> <span class="nv">eps</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/leaky-re-lu</span> <span class="s">&quot;dact1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;leaky&quot;</span> <span class="ss">:slope</span> <span class="mf">0.2</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a variable for the <code>data</code> coming in, (which is the picture of the flan), it then flows through the other layers which consist of convolutions, normalization, and activation layers. The last three layers actually repeat another two times before ending in the output, which tells whether it thinks the image was a fake or not.</p>

<p>The generator model looks similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generator</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">as-&gt;</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;rand&quot;</span><span class="p">)</span> <span class="nv">data</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/deconvolution</span> <span class="s">&quot;g1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span>
</span><span class='line'>                             <span class="ss">:kernel</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'>                             <span class="ss">:pad</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                             <span class="ss">:stride</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                             <span class="ss">:num-filter</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="nv">ndf</span><span class="p">)</span> <span class="ss">:no-bias</span> <span class="nv">true</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/batch-norm</span> <span class="s">&quot;gbn1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:fix-gamma</span> <span class="nv">true</span> <span class="ss">:eps</span> <span class="nv">eps</span><span class="p">})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;gact1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;relu&quot;</span><span class="p">})</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">...</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>There is a variable for the <code>data</code> coming in, but this time it is a random noise vector. Another interesting point that is is using a <code>deconvolution</code> layer instead of a <code>convolution</code> layer. The generator is basically the inverse of the discriminator. It starts with a random noise vector, but that is translated up through the layers until it is expanded to a image output.</p>

<p>Next, we iterate through all of our training images in our <code>flan-iter</code> with <code>reduce-batches</code>. Here is just an excerpt where we get a random noise vector and have the generator run the data through and produce the output image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">mx-io/reduce-batches</span>
</span><span class='line'>       <span class="nv">flan-iter</span>
</span><span class='line'>       <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">n</span> <span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">rbatch</span> <span class="p">(</span><span class="nf">mx-io/next</span> <span class="nv">rand-noise-iter</span><span class="p">)</span>
</span><span class='line'>               <span class="nv">dbatch</span> <span class="p">(</span><span class="nf">mapv</span> <span class="nv">normalize-rgb-ndarray</span> <span class="p">(</span><span class="nf">mx-io/batch-data</span> <span class="nv">batch</span><span class="p">))</span>
</span><span class='line'>               <span class="nv">out-g</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">mod-g</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">m/forward</span> <span class="nv">rbatch</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">m/outputs</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole code is <a href="https://github.com/gigasquid/mxnet-gan-flan">here</a> for reference, but let&rsquo;s skip forward and run it and see what happens.</p>

<p><img src="http://gigasquid.github.io/images/gout-96-0.jpg" alt="" /></p>

<p>FLANS!! Well, they could be flans if you squint a bit.</p>

<p>Now that we have them kinda working for a small image size 28x28, let&rsquo;s biggerize it.</p>

<h2>Turn on the Oven and Bake</h2>

<p>Turning up the size to 128x128 requires some alterations in the layers&#8217; parameters to make sure that it processes and generates the correct size, but other than that we are good to go.</p>

<p>Here comes the fun part, watching it train and learn:</p>

<h3>Epoch 0</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-0-0.jpg" alt="" /></p>

<p>In the beginning there was nothing but random noise.</p>

<h3>Epoch 10</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-10-0.jpg" alt="" /></p>

<p>It&rsquo;s beginning to learn colors! Red, yellow, brown seem to be important to flans.</p>

<h3>Epoch 23</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-23-0.jpg" alt="" /></p>

<p>It&rsquo;s learning shapes! It has learned that flans seem to be blob shaped.</p>

<h3>Epoch 33</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-33-0.jpg" alt="" /></p>

<p>It is moving into its surreal phase. Salvidor Dali would be proud of these flans.</p>

<h3>Epoch 45</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-45.jpg" alt="" /></p>

<p>Things take a weird turn. Does that flan have eyes?</p>

<h3>Epoch 68</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-128-68-0.jpg" alt="" /></p>

<p>Even worse. Are those demonic flans? Should we even continue down this path?</p>

<p>Answer: Yes &ndash; <strong>the training must go on..</strong></p>

<h3>Epoch 161</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-161-0.jpg" alt="" /></p>

<p>Big moment here. It looks like something that could possibly be edible.</p>

<h3>Epoch 170</h3>

<p><img src="http://gigasquid.github.io/images/flan-random-170-0.jpg" alt="" /></p>

<p>Ick! Green Flans! No one is going to want that.</p>

<h3>Epoch 195</h3>

<p><img src="http://gigasquid.github.io/images/explore-195.jpg" alt="" /></p>

<p>We&rsquo;ve achieved maximum flan, (for the time being).</p>

<h2>Explore</h2>

<p>If you are interested in playing around with the pretrained model, you can check it out <a href="https://github.com/gigasquid/mxnet-gan-flan/blob/master/src/mxnet_gan_flan/gan.clj#L355">here with the pretrained function</a>.
It will load up the trained model and generate flans for you to explore and bring to your dinner parties.</p>

<p>Wrapping up, training GANs is a <em>lot</em> of fun. With MXNet, you can bring the fun with you to Clojure.</p>

<p>Want more, check out this Clojure Conj video &ndash;  <a href="https://www.youtube.com/watch?v=yzfnlcHtwiY">Can You GAN?</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure MXNet - the Module API]]></title>
    <link href="http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api/"/>
    <updated>2018-07-05T19:39:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api</id>
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*OoqsrMD7JzXAvRUGx_8_fg.jpeg"></p>

<p>This is an introduction to the high level Clojure API for deep learning library <a href="http://mxnet.incubator.apache.org/">MXNet</a>.</p>

<p>The module API provides an intermediate and high-level interface for performing computation with neural networks in MXNet.</p>

<p>To follow along with this documentation, you can use this namespace to with the needed requires:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">docs.module</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.java.io</span> <span class="ss">:as</span> <span class="nv">io</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure.java.shell</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">sh</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.eval-metric</span> <span class="ss">:as</span> <span class="nv">eval-metric</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.io</span> <span class="ss">:as</span> <span class="nv">mx-io</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.module</span> <span class="ss">:as</span> <span class="nv">m</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.symbol</span> <span class="ss">:as</span> <span class="nv">sym</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.ndarray</span> <span class="ss">:as</span> <span class="nv">ndarray</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Prepare the Data</h2>

<p>In this example, we are going to use the MNIST data set. If you have cloned the MXNet repo and <code>cd contrib/clojure-package</code>, we can run some helper scripts to download the data for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">data-dir</span> <span class="s">&quot;data/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">when-not </span><span class="p">(</span><span class="nf">.exists</span> <span class="p">(</span><span class="nf">io/file</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;../../scripts/get_mnist_data.sh&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>MXNet provides function in the <code>io</code> namespace to load the MNIST datasets into training and test data iterators that we can use with our module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">train-data</span> <span class="p">(</span><span class="nf">mx-io/mnist-iter</span> <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                   <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;train-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                   <span class="ss">:label-name</span> <span class="s">&quot;softmax_label&quot;</span>
</span><span class='line'>                                   <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>                                   <span class="ss">:batch-size</span> <span class="mi">10</span>
</span><span class='line'>                                   <span class="ss">:shuffle</span> <span class="nv">true</span>
</span><span class='line'>                                   <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>                                   <span class="ss">:silent</span> <span class="nv">false</span>
</span><span class='line'>                                   <span class="ss">:seed</span> <span class="mi">10</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">test-data</span> <span class="p">(</span><span class="nf">mx-io/mnist-iter</span> <span class="p">{</span><span class="ss">:image</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-images-idx3-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                  <span class="ss">:label</span> <span class="p">(</span><span class="nb">str </span><span class="nv">data-dir</span> <span class="s">&quot;t10k-labels-idx1-ubyte&quot;</span><span class="p">)</span>
</span><span class='line'>                                  <span class="ss">:input-shape</span> <span class="p">[</span><span class="mi">784</span><span class="p">]</span>
</span><span class='line'>                                  <span class="ss">:batch-size</span> <span class="mi">10</span>
</span><span class='line'>                                  <span class="ss">:flat</span> <span class="nv">true</span>
</span><span class='line'>                                  <span class="ss">:silent</span> <span class="nv">false</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Preparing a Module for Computation</h2>

<p>To construct a module, we need to have a symbol as input. This symbol takes input data in the first layer and then has subsequent layers of fully connected and relu activation layers, ending up in a softmax layer for output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;data&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">fc1</span> <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">128</span><span class="p">})</span>
</span><span class='line'>      <span class="nv">act1</span> <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;relu1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">fc1</span> <span class="ss">:act-type</span> <span class="s">&quot;relu&quot;</span><span class="p">})</span>
</span><span class='line'>      <span class="nv">fc2</span> <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">act1</span> <span class="ss">:num-hidden</span> <span class="mi">64</span><span class="p">})</span>
</span><span class='line'>      <span class="nv">act2</span> <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;relu2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">fc2</span> <span class="ss">:act-type</span> <span class="s">&quot;relu&quot;</span><span class="p">})</span>
</span><span class='line'>      <span class="nv">fc3</span> <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc3&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">act2</span> <span class="ss">:num-hidden</span> <span class="mi">10</span><span class="p">})</span>
</span><span class='line'>      <span class="nv">out</span> <span class="p">(</span><span class="nf">sym/softmax-output</span> <span class="s">&quot;softmax&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">fc3</span><span class="p">})]</span>
</span><span class='line'>  <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;=&gt;#object[org.apache.mxnet.Symbol 0x1f43a406 &quot;org.apache.mxnet.Symbol@1f43a406&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also write this with the <code>as-&gt;</code> threading macro.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">out</span> <span class="p">(</span><span class="nf">as-&gt;</span> <span class="p">(</span><span class="nf">sym/variable</span> <span class="s">&quot;data&quot;</span><span class="p">)</span> <span class="nv">data</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">128</span><span class="p">})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;relu1&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;relu&quot;</span><span class="p">})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">64</span><span class="p">})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/activation</span> <span class="s">&quot;relu2&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:act-type</span> <span class="s">&quot;relu&quot;</span><span class="p">})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/fully-connected</span> <span class="s">&quot;fc3&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span> <span class="ss">:num-hidden</span> <span class="mi">10</span><span class="p">})</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">sym/softmax-output</span> <span class="s">&quot;softmax&quot;</span> <span class="p">{</span><span class="ss">:data</span> <span class="nv">data</span><span class="p">})))</span>
</span><span class='line'><span class="c1">;=&gt; #&#39;tutorial.module/out</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, <code>context</code> is the CPU. If you need data parallelization, you can specify a GPU context or an array of GPU contexts like this <code>(m/module out {:contexts [(context/gpu)]})</code></p>

<p>Before you can compute with a module, you need to call <code>bind</code> to allocate the device memory and <code>init-params</code> or <code>set-params</code> to initialize the parameters. If you simply want to fit a module, you don’t need to call <code>bind</code> and <code>init-params</code> explicitly, because the <code>fit</code> function automatically calls them if they are needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mod</span> <span class="p">(</span><span class="nf">m/module</span> <span class="nv">out</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">mod</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/bind</span> <span class="p">{</span><span class="ss">:data-shapes</span> <span class="p">(</span><span class="nf">mx-io/provide-data</span> <span class="nv">train-data</span><span class="p">)</span>
</span><span class='line'>               <span class="ss">:label-shapes</span> <span class="p">(</span><span class="nf">mx-io/provide-label</span> <span class="nv">train-data</span><span class="p">)})</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">m/init-params</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can compute with the module using functions like <code>forward</code>, <code>backward</code>, etc.</p>

<h2>Training and Predicting</h2>

<p>Modules provide high-level APIs for training, predicting, and evaluating. To fit a module, call the <code>fit</code> function with some data iterators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mod</span> <span class="p">(</span><span class="nf">m/fit</span> <span class="p">(</span><span class="nf">m/module</span> <span class="nv">out</span><span class="p">)</span> <span class="p">{</span><span class="ss">:train-data</span> <span class="nv">train-data</span> <span class="ss">:eval-data</span> <span class="nv">test-data</span> <span class="ss">:num-epoch</span> <span class="mi">1</span><span class="p">}))</span>
</span><span class='line'><span class="c1">;; Epoch  0  Train- [accuracy 0.12521666]</span>
</span><span class='line'><span class="c1">;; Epoch  0  Time cost- 8392</span>
</span><span class='line'><span class="c1">;; Epoch  0  Validation-  [accuracy 0.2227]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass in batch-end callbacks using batch-end-callback and epoch-end callbacks using epoch-end-callback in the <code>fit-params</code>. You can also set parameters using functions like in the fit-params like optimizer and eval-metric. To learn more about the fit-params, see the fit-param function options. To predict with a module, call <code>predict</code> with a DataIter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">results</span> <span class="p">(</span><span class="nf">m/predict</span> <span class="nv">mod</span> <span class="p">{</span><span class="ss">:eval-data</span> <span class="nv">test-data</span><span class="p">}))</span>
</span><span class='line'><span class="p">(</span><span class="nb">first </span><span class="nv">results</span><span class="p">)</span> <span class="c1">;=&gt;#object[org.apache.mxnet.NDArray 0x3540b6d3 &quot;org.apache.mxnet.NDArray@a48686ec&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="p">(</span><span class="nb">first </span><span class="nv">results</span><span class="p">)))</span> <span class="c1">;=&gt;0.08261358</span>
</span></code></pre></td></tr></table></div></figure>


<p>The module collects and returns all of the prediction results. For more details about the format of the return values, see the documentation for the <code>predict</code> function.</p>

<p>When prediction results might be too large to fit in memory, use the <code>predict-every-batch</code> API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">preds</span> <span class="p">(</span><span class="nf">m/predict-every-batch</span> <span class="nv">mod</span> <span class="p">{</span><span class="ss">:eval-data</span> <span class="nv">test-data</span><span class="p">})]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mx-io/reduce-batches</span> <span class="nv">test-data</span>
</span><span class='line'>                        <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">i</span> <span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;pred is &quot;</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">get </span><span class="nv">preds</span> <span class="nv">i</span><span class="p">))))</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;label is &quot;</span> <span class="p">(</span><span class="nf">mx-io/batch-label</span> <span class="nv">batch</span><span class="p">)))</span>
</span><span class='line'>                          <span class="c1">;;; do something</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">inc </span><span class="nv">i</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to evaluate on a test set and don’t need the prediction output, call the <code>score</code> function with a data iterator and an eval metric:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/score</span> <span class="nv">mod</span> <span class="p">{</span><span class="ss">:eval-data</span> <span class="nv">test-data</span> <span class="ss">:eval-metric</span> <span class="p">(</span><span class="nf">eval-metric/accuracy</span><span class="p">)})</span> <span class="c1">;=&gt;[&quot;accuracy&quot; 0.2227]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This runs predictions on each batch in the provided data iterator and computes the evaluation score using the provided eval metric. The evaluation results are stored in metric so that you can query later.</p>

<h2>Saving and Loading</h2>

<p>To save the module parameters in each training epoch, use a <code>checkpoint</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">save-prefix</span> <span class="s">&quot;my-model&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">epoch-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mx-io/do-batches</span> <span class="nv">train-data</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">batch</span>
</span><span class='line'>                                          <span class="c1">;; do something</span>
</span><span class='line'><span class="p">]))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/save-checkpoint</span> <span class="nv">mod</span> <span class="p">{</span><span class="ss">:prefix</span> <span class="nv">save-prefix</span> <span class="ss">:epoch</span> <span class="nv">epoch-num</span> <span class="ss">:save-opt-states</span> <span class="nv">true</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved checkpoint to my-model-0000.params</span>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved optimizer state to my-model-0000.states</span>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved checkpoint to my-model-0001.params</span>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved optimizer state to my-model-0001.states</span>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved checkpoint to my-model-0002.params</span>
</span><span class='line'><span class="c1">;; INFO  org.apache.mxnet.module.Module: Saved optimizer state to my-model-0002.states</span>
</span></code></pre></td></tr></table></div></figure>


<p>To load the saved module parameters, call the <code>load-checkpoint</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">new-mod</span> <span class="p">(</span><span class="nf">m/load-checkpoint</span> <span class="p">{</span><span class="ss">:prefix</span> <span class="s">&quot;my-model&quot;</span> <span class="ss">:epoch</span> <span class="mi">1</span> <span class="ss">:load-optimizer-states</span> <span class="nv">true</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">new-mod</span> <span class="c1">;=&gt; #object[org.apache.mxnet.module.Module 0x5304d0f4 &quot;org.apache.mxnet.module.Module@5304d0f4&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To initialize parameters, Bind the symbols to construct executors first with bind function. Then, initialize the parameters and auxiliary states by calling <code>init-params</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">new-mod</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/bind</span> <span class="p">{</span><span class="ss">:data-shapes</span> <span class="p">(</span><span class="nf">mx-io/provide-data</span> <span class="nv">train-data</span><span class="p">)</span> <span class="ss">:label-shapes</span> <span class="p">(</span><span class="nf">mx-io/provide-label</span> <span class="nv">train-data</span><span class="p">)})</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">m/init-params</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get current parameters, use <code>params</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">arg-params</span> <span class="nv">aux-params</span><span class="p">]</span> <span class="p">(</span><span class="nf">m/params</span> <span class="nv">new-mod</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:arg-params</span> <span class="nv">arg-params</span>
</span><span class='line'>   <span class="ss">:aux-params</span> <span class="nv">aux-params</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; {:arg-params</span>
</span><span class='line'><span class="c1">;;  {&quot;fc3_bias&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x39adc3b0 &quot;org.apache.mxnet.NDArray@49caf426&quot;],</span>
</span><span class='line'><span class="c1">;;   &quot;fc2_weight&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x25baf623 &quot;org.apache.mxnet.NDArray@a6c8f9ac&quot;],</span>
</span><span class='line'><span class="c1">;;   &quot;fc1_bias&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x6e089973 &quot;org.apache.mxnet.NDArray@9f91d6eb&quot;],</span>
</span><span class='line'><span class="c1">;;   &quot;fc3_weight&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x756fd109 &quot;org.apache.mxnet.NDArray@2dd0fe3c&quot;],</span>
</span><span class='line'><span class="c1">;;   &quot;fc2_bias&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x1dc69c8b &quot;org.apache.mxnet.NDArray@d128f73d&quot;],</span>
</span><span class='line'><span class="c1">;;   &quot;fc1_weight&quot;</span>
</span><span class='line'><span class="c1">;;   #object[org.apache.mxnet.NDArray 0x20abc769 &quot;org.apache.mxnet.NDArray@b8e1c5e8&quot;]},</span>
</span><span class='line'><span class="c1">;;  :aux-params {}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To assign parameter and aux state values, use <code>set-params</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">m/set-params</span> <span class="nv">new-mod</span> <span class="p">{</span><span class="ss">:arg-params</span> <span class="p">(</span><span class="nf">m/arg-params</span> <span class="nv">new-mod</span><span class="p">)</span> <span class="ss">:aux-params</span> <span class="p">(</span><span class="nf">m/aux-params</span> <span class="nv">new-mod</span><span class="p">)})</span>
</span><span class='line'><span class="c1">;=&gt; #object[org.apache.mxnet.module.Module 0x5304d0f4 &quot;org.apache.mxnet.module.Module@5304d0f4&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To resume training from a saved checkpoint, instead of calling <code>set-params</code>, directly call <code>fit</code>, passing the loaded parameters, so that <code>fit</code> knows to start from those parameters instead of initializing randomly</p>

<p>Create fit-params, and then use it to set <code>begin-epoch</code> so that <code>fit</code> knows to resume from a saved epoch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; reset the training data before calling fit or you will get an error</span>
</span><span class='line'><span class="p">(</span><span class="nf">mx-io/reset</span> <span class="nv">train-data</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">mx-io/reset</span> <span class="nv">test-data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">m/fit</span> <span class="nv">new-mod</span> <span class="p">{</span><span class="ss">:train-data</span> <span class="nv">train-data</span> <span class="ss">:eval-data</span> <span class="nv">test-data</span> <span class="ss">:num-epoch</span> <span class="mi">2</span>
</span><span class='line'>                <span class="ss">:fit-params</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">m/fit-params</span> <span class="p">{</span><span class="ss">:begin-epoch</span> <span class="mi">1</span><span class="p">}))})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are interested in checking out MXNet and exploring on your own, check out the main page <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package">here</a> with instructions on how to install and other information.</p>

<h3>See other blog posts about MXNet</h3>

<ul>
<li><a href="http://gigasquidsoftware.com/blog/2018/06/03/meet-clojure-mxnet-ndarray/">Clojure MXNet &ndash; NDArray</a></li>
<li><a href="http://gigasquidsoftware.com/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project/">Clojure MXNet Joins Apache MXNet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure MXNet Joins the Apache MXNet Project]]></title>
    <link href="http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project/"/>
    <updated>2018-07-01T10:44:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project</id>
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*OoqsrMD7JzXAvRUGx_8_fg.jpeg"></p>

<p>I&rsquo;m delighted to share the news that the Clojure package for <a href="https://mxnet.apache.org/">MXNet</a> has now joined the main Apache MXNet project. A big thank you to the efforts of everyone involved to make this possible. Having it as part of the main project is a great place for growth and collaboration that will benefit both MXNet and the Clojure community.</p>

<h2>Invitation to Join and Contribute</h2>

<p>The Clojure package has been brought in as a <em>contrib</em> <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package">clojure-package</a>. It is still very new and will go through a period of feedback, stabilization, and improvement before it graduates out of contrib.</p>

<p>We welcome contributors and people getting involved to make it better.</p>

<p>Are you interested in Deep Learning and Clojure? Great &ndash; Join us!</p>

<p>There are a few ways to get involved.</p>

<ul>
<li>Check out the current state of the Clojure package some contribution needs here <a href="https://cwiki.apache.org/confluence/display/MXNET/Clojure+Package+Contribution+Needs">https://cwiki.apache.org/confluence/display/MXNET/Clojure+Package+Contribution+Needs</a></li>
<li>Join the Clojurian Slack #mxnet channel</li>
<li>Join the <a href="https://lists.apache.org/list.html?dev@mxnet.apache.org">MXNet dev mailing list</a> by sending an email to <code>dev-subscribe@mxnet.apache.org.</code>.</li>
<li>Join the MXNET Slack channel &ndash; You have to join the MXnet dev mailing list first, but after that says you would like to join the slack and someone will add you.</li>
<li>Join the <a href="https://discuss.mxnet.io/">MXNet Discussion Forum</a></li>
</ul>


<h3>Want to Learn More?</h3>

<p>There are lots of examples in the package to check out, but a good place to start are the tutorials here <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package/examples/tutorial">https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package/examples/tutorial</a></p>

<p>There is a blog walkthough here as well &ndash; <a href="http://gigasquidsoftware.com/blog/2018/07/05/clojure-mxnet-the-module-api/">Clojure MXNet Module API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meet Clojure MXNet - NDArray]]></title>
    <link href="http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray/"/>
    <updated>2018-06-03T16:13:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray</id>
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*OoqsrMD7JzXAvRUGx_8_fg.jpeg"></p>

<p>This is the beginning of a series of blog posts to get to know the <a href="https://mxnet.apache.org/">Apache MXNet</a> Deep Learning project and the new Clojure language binding <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package">clojure-package</a></p>

<p>MXNet is a first class, modern deep learning library that AWS has officially picked as its chosen library. It supports multiple languages on a first class basis and is incubating as an Apache project.</p>

<p>The motivation for creating a Clojure package is to be able to open the deep learning library to the Clojure ecosystem and build bridges for future development and innovation for the community. It provides all the needed tools including low level and high level apis, dynamic graphs, and things like GAN and natural language support.</p>

<p>So let&rsquo;s get on with our introduction with one of the basic building blocks of MXNet, the <code>NDArray</code>.</p>

<h2>Meet NDArray</h2>

<p>The <code>NDArray</code> is the tensor data structure in MXNet. Let&rsquo;s start of by creating one. First we need to require the <code>ndarray</code> namespace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">tutorial.ndarray</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">org.apache.clojure-mxnet.ndarray</span> <span class="ss">:as</span> <span class="nv">ndarray</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create an all zero array of dimension 100 x 50</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/zeros</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">50</span><span class="p">])</span>
</span><span class='line'><span class="c1">;=&gt; #object[org.apache.mxnet.NDArray 0x3e396d0 &quot;org.apache.mxnet.NDArray@aeea40b6&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can check the shape of this by using <code>shape-vec</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/shape-vec</span> <span class="p">(</span><span class="nf">ndarray/zeros</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">50</span><span class="p">]))</span>
</span><span class='line'><span class="c1">;=&gt; [100 50]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is also a quick way to create an ndarray of ones with the <code>ones</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/ones</span> <span class="p">[</span><span class="mi">256</span> <span class="mi">32</span> <span class="mi">128</span> <span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ones and zeros are nice, but what an array with specific contents? There is an <code>array</code> function for that. Specific the contents of the array first and the shape second:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">c</span> <span class="p">(</span><span class="nf">ndarray/array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/shape-vec</span> <span class="nv">c</span><span class="p">)</span>  <span class="c1">;=&gt; [2 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To convert it back to a vector format, we can use the <code>-&gt;vec</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; [1.0 2.0 3.0 4.0 5.0 6.0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we know how to create NDArrays, we can get to do something interesting like operations on them.</p>

<h3>Operations</h3>

<p>There are all the standard arithmetic operations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="p">(</span><span class="nf">ndarray/ones</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">5</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">b</span> <span class="p">(</span><span class="nf">ndarray/ones</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">5</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">ndarray/+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">ndarray/-&gt;vec</span><span class="p">))</span>
</span><span class='line'><span class="c1">;=&gt;  [2.0 2.0 2.0 2.0 2.0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the original ndarrays are unchanged.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="nv">a</span><span class="p">)</span> <span class="c1">;=&gt; [1.0 1.0 1.0 1.0 1.0]</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="nv">b</span><span class="p">)</span> <span class="c1">;=&gt; [1.0 1.0 1.0 1.0 1.0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, we can change that if we use the inplace operators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/+=</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="nv">a</span><span class="p">)</span> <span class="c1">;=&gt;  [2.0 2.0 2.0 2.0 2.0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many more operations, but just to give you a taste, we&rsquo;ll take a look a the <code>dot</code> product operation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">arr1</span> <span class="p">(</span><span class="nf">ndarray/array</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">arr2</span> <span class="p">(</span><span class="nf">ndarray/array</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">1</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">res</span> <span class="p">(</span><span class="nf">ndarray/dot</span> <span class="nv">arr1</span> <span class="nv">arr2</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/shape-vec</span> <span class="nv">res</span><span class="p">)</span> <span class="c1">;=&gt; [1 1]</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/-&gt;vec</span> <span class="nv">res</span><span class="p">)</span> <span class="c1">;=&gt; [11.0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are curious about the other operators available in NDArray API check out the <a href="https://mxnet.incubator.apache.org/api/python/ndarray/ndarray.html">MXNet project documentation page</a></p>

<p>Now that we have ndarrays and can do calculations on them, we might want to save and load them.</p>

<h3>Saving and Loading</h3>

<p>You can save ndarrays with a name as a map like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/save</span> <span class="s">&quot;filename&quot;</span> <span class="p">{</span><span class="s">&quot;arr1&quot;</span> <span class="nv">arr1</span> <span class="s">&quot;arr2&quot;</span> <span class="nv">arr2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>To load them, you just specify the filename and the map is returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ndarray/load</span> <span class="s">&quot;filename&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; {&quot;arr1&quot; #object[org.apache.mxnet.NDArray 0x1b629ff4 &quot;org.apache.mxnet.NDArray@63da08cb&quot;]</span>
</span><span class='line'><span class="c1">;=&gt;  &quot;arr2&quot; #object[org.apache.mxnet.NDArray 0x25d994e3 &quot;org.apache.mxnet.NDArray@5bbaf2c3&quot;]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One more cool thing, we can even due our operations on the cpu or gpu.</p>

<h3>Multi-Device Support</h3>

<p>When creating an <code>ndarray</code> you can use a context argument to specify the device. To do this, we will need the help of the <code>context</code> namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">org.apache.clojure-mxnet.context</span> <span class="ss">:as</span> <span class="nv">context</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, the <code>ndarray</code> is created on the cpu context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">cpu-a</span> <span class="p">(</span><span class="nf">ndarray/zeros</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">200</span><span class="p">]))</span>
</span><span class='line'><span class="p">(</span><span class="nf">ndarray/context</span> <span class="nv">cpu-a</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; #object[ml.dmlc.mxnet.Context 0x3f376123 &quot;cpu(0)&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we can specify the gpu instead, (if we have a gpu enabled build).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">gpu-b</span> <span class="p">(</span><span class="nf">ndarray/zeros</span> <span class="p">[</span><span class="mi">100</span> <span class="mi">200</span><span class="p">]</span> <span class="p">{</span><span class="ss">:ctx</span> <span class="p">(</span><span class="nf">context/gpu</span> <span class="mi">0</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: Operations among different contexts are currently not allowed, but there is a <code>copy-to</code> function that can help copy the content from one device to another and then continue on with the computation.</em></p>

<h2>Wrap up</h2>

<p>I hope you&rsquo;ve enjoyed the brief introduction to the MXNet library, there is much more to explore in future posts. If you are interested in giving it a try, there are native jars for OSX cpu and Linux cpu/gpu available and the code for the ndarray tutorial can be found <a href="https://github.com/apache/incubator-mxnet/tree/master/contrib/clojure-package/examples/tutorial">here</a></p>

<p><em>Please remember that the library is in a experimential state, so if you encounter any problems or have any other feedback, please log an issue so bugs and rough edges can be fixed :).</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Staying Technical]]></title>
    <link href="http://gigasquid.github.io/blog/2018/03/04/on-staying-technical/"/>
    <updated>2018-03-04T11:03:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2018/03/04/on-staying-technical</id>
    <content type="html"><![CDATA[<p>I was 10 years into my career when I met her. I could count the number of other women programmers I had worked with on one hand and none of them had young children at home like me. She was not only incredibly experienced and competent, but also had a son in college. I was curious about her career path so I asked her one day at lunch why she was still programming and hadn’t become a manager instead.</p>

<p>She smiled at me kindly and replied, &ldquo;I’ve worked very hard to stay exactly where I am&rdquo;,  and I was enlightened.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cats and Dogs With Cortex Redux]]></title>
    <link href="http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux/"/>
    <updated>2017-11-07T18:51:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://gigasquidsoftware.com/blog/2016/12/27/deep-learning-in-clojure-with-cortex/">blog post</a> a while back about using a Clojure machine learning library called <a href="https://github.com/thinktopic/cortex">Cortex</a> to do the Kaggle Cats and Dogs classification challenge.</p>

<p>I wanted to revisit it for a few reasons. The first one is that the Cortex library has progressed and improved considerably over the last year. It&rsquo;s still not at version 1.0, but it my eyes, it&rsquo;s really starting to shine. The second reason is that they recently published an <a href="https://github.com/thinktopic/cortex/tree/master/examples/resnet-retrain">example</a> of using the RESNET50 model, (I&rsquo;ll explain later on), to do fine-tuning or transfer learning. The third reason, is that there is a great new plugin for leiningen the supports using <a href="https://github.com/didiercrunch/lein-jupyter">Jupyter notebooks with Clojure projects</a>. These notebooks are a great way of doing walkthroughs and tutorials.</p>

<p>Putting all these things together, I felt like I was finally at a stage where I could somewhat replicate the first lesson in the <a href="https://github.com/fastai/courses/blob/master/deeplearning1/nbs/dogs_cats_redux.ipynb">Practical Deep Learning Course for Coders</a> with Cats and Dogs &ndash; although this time all in Clojure!</p>

<h2>Where to Start?</h2>

<p><img src="http://kaggle2.blob.core.windows.net/competitions/kaggle/3362/media/woof_meow.jpg"></p>

<p>In the last blog post, we created our deep learning network and trained the data on scaled down images (like 50x50) from scratch. This time we are much smarter.</p>

<p>We are still of course going to have to get a hold of all the training data from <a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/data">Kaggle Cats vs Dogs Challenge</a>. The big difference is this time, we are just going to have to train our model for <em>1 epoch</em>. What&rsquo;s more, the results will be way better than before.</p>

<p>How is this possible? We are going to use an already trained model, RESNET50. This model has already been painstakingly trained with a gigantic network that is 50 layers deep on the ImageNet challenge. That&rsquo;s a challenge that has models try to classify a 1000 different categories. The theory is that the inner layers of the network have already learned about the features that make up cats and dogs, all we would need to do is peel off the final layer of the network and graft on a new layers that just learns the final classification for our 2 categories of cats and dogs. This is called <em>transfer learning</em> or <em>retraining</em>.</p>

<h2>Plan of Action</h2>

<ul>
<li>Get all the cats and dogs pictures in the right directory format for training</li>
<li>Train the model with all but the last layer in the RESNET model. The last layer we are going to replace with our own layer that will finetune it to classify only cats and dogs</li>
<li>Run the test data and come up with a spreadsheet of results to submit to Kaggle.</li>
</ul>


<h3>Getting all the data pictures in the right format</h3>

<p>This is the generally the most time consuming step of most deep learning. I&rsquo;ll spare you the gritty details but we want to get all the pictures from the <code>train.zip</code> into the format</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-data
</span><span class='line'>  -cats-dogs-training
</span><span class='line'>      -cat
</span><span class='line'>          1110.png
</span><span class='line'>          ...
</span><span class='line'>      -dog
</span><span class='line'>          12416.png
</span><span class='line'>          ...
</span><span class='line'>  -cats-dogs-testing
</span><span class='line'>      -cat
</span><span class='line'>          11.png
</span><span class='line'>          ...
</span><span class='line'>      -dog
</span><span class='line'>          12.png
</span><span class='line'>          ...</span></code></pre></td></tr></table></div></figure>


<p>The image sizes must also all be resized to match the input of the RESNET50. That means they all have to be 224x224.</p>

<h3>Train the model</h3>

<p>The cortex functions allow you to load the resnet50 model, remove the last layer, freeze all the other layers so that they will not be retrained, and add new layers.</p>

<p>I was surprised that I could actually train the model with all the images at 224x244 with the huge RESNET50 model. I built the uberjar and ran it which helped the performance.</p>

<p><code>lein uberjar</code></p>

<p><code>java -jar target/cats-dogs-cortex-redux.jar</code></p>

<p>Training one epoch took me approximately 6 minutes. Not bad, especially considering that&rsquo;s all the training I really needed to do.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Loss for epoch 1: (current) 0.05875186542016347 (best) null
</span><span class='line'>Saving network to trained-network.nippy</span></code></pre></td></tr></table></div></figure>


<p>The key point is that it saved the fine tuned network to trained-network.nippy</p>

<h3>Run the Kaggle test results and submit the results</h3>

<p>You will need to do a bit more setup for this. First, you need to get the Kaggle test images for classification. There are 12500 of these in the test.zip file from the site. Under the data directory, create a new directory called kaggle-test. Now unzip the contents of test.zip inside that folder. The full directory with all the test images should now be:</p>

<p><code>data/kaggle-test/test</code></p>

<p>This step takes a long time and you might have to tweak the batch size again depending on your memory. There are 12500 predications to be made. The main logic for this is in function called <code>(kaggle-results batch-size)</code>. It will take a long time to run. It will print the results as it goes along to the kaggle-results.csv file. If you want to check progress you can do wc -l kaggle-results.csv</p>

<p>For me locally, with <code>(cats-dogs/kaggle-results 100)</code> it took me 28 minutes locally.</p>

<h3>Compare the results</h3>

<p><img src="http://c1.staticflickr.com/5/4518/26477015609_1af781b8da_b.jpg"></p>

<p>My one epoch of fine tuning beat my best results of going through the Practical Deep Learning exercise with the fine tuning the VGG16 model. Not bad at all.</p>

<h2>Summary</h2>

<p>For those of you that are interested in checking out the code, it&rsquo;s out there on <a href="https://github.com/gigasquid/cats-dogs-cortex-redux">github</a></p>

<p>Even more exciting, there is a <a href="https://github.com/gigasquid/cats-dogs-cortex-redux/blob/master/Cats%20and%20Dogs%20in%20Cortex%20(Redux).ipynb">walkthrough in a jupyter notebook</a> with a lein-jupyter plugin.</p>

<p>The Deep Learning world in Clojure is an exciting place to be and gaining tools and traction more and more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Interop Between Clojure, R, and Python With GraalVM]]></title>
    <link href="http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm/"/>
    <updated>2017-10-22T16:02:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm</id>
    <content type="html"><![CDATA[<p><img src="https://images-na.ssl-images-amazon.com/images/M/MV5BOTViY2Y0ZGItMTg2OC00YzEzLWJhYjYtZjg4OTMyOWE4YzM1XkEyXkFqcGdeQXVyNTQ1NzU4Njk@._V1_.jpg" title="" ></p>

<p>In my talk at <a href="https://www.youtube.com/watch?v=eLl6_k_fZn4">Clojure Conj</a> I mentioned how a project from Oracle Labs named GraalVM might have to potential for Clojure to interop with Python on the same VM. At the time of the talk, I had just learned about it so I didn&rsquo;t have time to take a look at it. Over the last week, I&rsquo;ve managed to take it for a test drive and I wanted to share what I found.</p>

<h3>Are you ready?</h3>

<p>In this example, we will be using an ordinary Leinengen project and using the REPL we will interop with both R and python.</p>

<p>But first will need a bit of setup.</p>

<p>We will download the <a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html">Graal project</a> so we can use its <code>java</code> instead of our own.</p>

<p>Once we have it downloaded we will configure our PATH to use Graal&rsquo;s java instead of our own.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># export PATH=/path/to/graalAndTruffle/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<p>Now, we can create a new lein project and run <code>lein repl</code> and begin the fun.</p>

<h3>The Polyglot Context</h3>

<p>In our new namespace, we just need to import the <a href="http://graalvm.github.io/graal/truffle/javadoc/org/graalvm/polyglot/Context.html">Polyglot Context</a> to get started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">graal-test.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">(</span><span class="nf">org.graalvm.polyglot</span> <span class="nv">Context</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; note that is also supports Ruby, LLVM, and JS</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">context</span> <span class="p">(</span><span class="nf">Context/create</span> <span class="p">(</span><span class="nb">into-array </span><span class="p">[</span><span class="s">&quot;python&quot;</span> <span class="s">&quot;R&quot;</span><span class="p">])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we are ready to actually try to run some R and Python code right in our REPL. Let&rsquo;s start first with R.</p>

<h3>Interoping with R</h3>

<p>The main function we are going to use is the <code>eval</code> function in the context. Let&rsquo;s start small with some basic math.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">context</span> <span class="s">&quot;R&quot;</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">3^2 + 2^2</span>
</span><span class='line'><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; #object[org.graalvm.polyglot.Value 0x7ff40e4d &quot;13.0&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow! It actually did something. It returned something called a <a href="https://github.com/graalvm/graal/blob/master/sdk/src/org.graalvm.polyglot/src/org/graalvm/polyglot/Value.java">Polyglot Value</a> with what looks like the right answer in it.</p>

<p>Emboldened by our early success, let&rsquo;s try something a little more complicated like calling a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">result1</span> <span class="p">(</span><span class="nf">.eval</span> <span class="nv">context</span> <span class="s">&quot;R&quot;</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">sum.of.squares &lt;- function(x,y) {</span>
</span><span class='line'><span class="s">  x^2 + y^2</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">sum.of.squares(3,4)</span>
</span><span class='line'><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">;=&gt; #object[org.graalvm.polyglot.Value 0xc3edd92 &quot;25.0&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, it looks like it worked. Let&rsquo;s try to get the result back into Clojure as a value we can work with. We could ask the result what sort of type it is with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.isNumber</span> <span class="nv">result1</span><span class="p">)</span> <span class="c1">;=&gt; true </span>
</span></code></pre></td></tr></table></div></figure>


<p>but let&rsquo;s just use <code>clojure.edn</code> to read the string and save some time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-&gt;clojure</span> <span class="p">[</span><span class="nv">polyglot-value</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">polyglot-value</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.toString</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">clojure.edn/read-string</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;clojure</span> <span class="nv">result1</span><span class="p">)</span> <span class="c1">;=&gt; 25</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be nice to have a easier way to export symbols and import symbols to and from the guest and host language. In fact, Graal provides a way to do this but to do this in Clojure, we would need something else called <a href="https://github.com/graalvm/graal/tree/master/truffle">Truffle</a>.</p>

<p>Truffle is part of the Graal project and is a framework for implementing languages with the Graal compliler.
There are quite a few languages implemented with the Truffle framework. R is one of them.</p>

<p><img src="https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-14-638.jpg?cb=1495364615"></p>

<p>My understanding is that if Clojure was implemented as a truffle lang, then interop could be much more seamless like this example in Ruby</p>

<p><img src="https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-37-638.jpg?cb=1495364615"></p>

<p>But let&rsquo;s continue in our exploration. What about doing something more interesting, like importing a useful R library and using it. How about the <a href="https://www.rdocumentation.org/packages/numDeriv/versions/2016.8-1">numDeriv</a> package that supports Accurate Numerical Derivatives?</p>

<p>First we import the package using cran.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">context</span> <span class="s">&quot;R&quot;</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">install.packages(\&quot;numDeriv\&quot;, repos = \&quot;http://cran.case.edu/\&quot;)</span>
</span><span class='line'><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are doing this at your REPL, you can will see lots of text going on in your <code>lein repl</code> process at this point. It&rsquo;s going out and figuring out what deps you need and installing them in your <code>/graalvm-0.28.2/jre/languages/R</code> directory structure.</p>

<p>After it is done, we can actually use it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">result2</span> <span class="p">(</span><span class="nf">.eval</span> <span class="nv">context</span> <span class="s">&quot;R&quot;</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">library(numDeriv)</span>
</span><span class='line'><span class="s">grad(sin, (0:10)*2*pi/10)</span>
</span><span class='line'><span class="s">&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">result2</span> <span class="c1">;=&gt; #object[org.graalvm.polyglot.Value 0x76765898 &quot;c(1,</span>
</span><span class='line'>        <span class="c1">;0.809016994367249, 0.309016994372158, -0.309016994373567,</span>
</span><span class='line'>        <span class="c1">;-0.809016994368844, -0.999999999993381, -0.809016994370298,</span>
</span><span class='line'>        <span class="c1">;-0.309016994373312, 0.309016994372042, 0.809016994369185,</span>
</span><span class='line'>        <span class="c1">;0.999999999993381)&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has a bit more interesting result as an array. But the Context has ways of dealing with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.hasArrayElements</span> <span class="nv">result2</span><span class="p">)</span> <span class="c1">;=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="nf">.getArraySize</span> <span class="nv">result2</span><span class="p">)</span> <span class="c1">;=&gt; 11</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">10</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">.getArrayElement</span> <span class="nv">result2</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">-&gt;clojure</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;=&gt; (1.0 0.8090169943672489 0.3090169943721585 -0.3090169943735675</span>
</span><span class='line'><span class="c1">;-0.8090169943688436 -0.9999999999933814</span>
</span><span class='line'><span class="c1">; -0.8090169943702977 -0.3090169943733122 0.30901699437204233</span>
</span><span class='line'><span class="c1">; 0.8090169943691851)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, we&rsquo;ve showed basic interop with R &ndash; which is pretty neat. What about Python?</p>

<h3>Interoping with Python</h3>

<p>Truffle is scheduled to fully support Python in 2018, but there is already an early alpha version in the Graal download that we can play with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">.eval</span> <span class="nv">context</span> <span class="s">&quot;python&quot;</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">import time;</span>
</span><span class='line'><span class="s">time.clock()</span>
</span><span class='line'><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1">;=&gt; #object[org.graalvm.polyglot.Value 0x4a6b3b70 &quot;1.508202803249E9&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neat!</p>

<p>It is still a long way for <code>import numpy</code> or <code>import tensorflow</code> but cPython compatibility is the goal. Although the c-extensions are the really tricky part.</p>

<p>So keep an eye on Graal and Truffle for the future and wish the Oracle Labs team the best on their mission to make the JVM Polyglot.</p>

<h3>Footnotes</h3>

<p>If you are interested in playing with the code. I have a github repo here <a href="https://github.com/gigasquid/graal-test">graal-test</a>. If you are interested in watching a video, I really liked <a href="https://www.youtube.com/watch?v=TQMKPRc6cbE">this one</a>. There are also some really nice examples of running in polyglot mode with R and Java and JS here <a href="https://github.com/graalvm/examples">https://github.com/graalvm/examples</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Publishing for the Creative Coder]]></title>
    <link href="http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder/"/>
    <updated>2017-05-27T14:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder</id>
    <content type="html"><![CDATA[<p>So, you have an idea for a fiction book. First, let me tell you that it&rsquo;s a good idea and it&rsquo;s a great thing that you are a coder. Quite a few successful authors have a background in software development. <a href="http://www.imdb.com/title/tt2543164/">Arrival</a>, (which is a fabulous movie), comes from the book, <a href="https://www.amazon.com/Stories-Your-Life-Others-Chiang/dp/1101972122">Stories of your Life</a>,  written by a fellow programmer <a href="https://en.wikipedia.org/wiki/Ted_Chiang">Ted Chiang</a>. <a href="https://en.wikipedia.org/wiki/Charles_Stross">Charlie Stross</a> is another fine example. One of my favorites is <a href="https://en.wikipedia.org/wiki/Daniel_Suarez_(author">Daniel Suarez</a>, the author of the<a href="https://www.amazon.com/DAEMON-Daniel-Suarez/dp/0451228731"> Daemon</a> and more recently <a href="https://www.amazon.com/Change-Agent-Novel-Daniel-Suarez/dp/110198466X/">Change Agent</a>. So yes, you can write a fiction book and you&rsquo;re in good company. This post is dedicated to help make it happen.</p>

<h2>So how do you know about self publishing?</h2>

<p>Two years ago, I had a semi-crazy idea for a tween/teen scifi book. At the time, my daughter was into all the popular books of time like <em>Hunger Games</em> and <em>Divergent</em>. The thing that I really liked about them was the strong female protagonist. The only thing that I thought was missing was a story that focused on a girl who could code. It would make it even better if she had <em>coding super powers</em>. The idea for <a href="http://www.codeshifterbook.com/">Code Shifter</a> was born. One of the things that I wanted to explore in writing the book was to have real programming code in the book but not have it be a <em>learning how to code</em> book. The code would exist as part of the story and if the reader picked up concepts along the way, great. Even if they didn&rsquo;t, it would lay the positive groundwork to have them be more open to it later.</p>

<p>Books, like software, always take longer than you plan. My daughter and I enjoyed working on it together and over time it grew into a book that we could share with others. Along the way, I learned quite a bit about writing books, publishing, and other things that I wish I had known beforehand.</p>

<h2>What did you use to write the book?</h2>

<p>In the book world, your story is referred to as your <em>manuscript</em>. As a tool to produce it, I cannot speak highly enough of <a href="https://leanpub.com/">Leanpub</a>. I found it easy and productive to work in as a programmer. For example,  my setup was pretty painless.</p>

<p>In the repo, I had a <code>manuscript</code> directory, in which there was a <code>Book.txt</code> file that listed the chapter files.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chapter2.txt
</span><span class='line'>chapter3.txt
</span><span class='line'>chapter4.txt
</span><span class='line'>chapter5.txt</span></code></pre></td></tr></table></div></figure>


<p>Each chapter file in turn was written in markdown. For example, <code>chapter2.txt</code> looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 1
</span><span class='line'>
</span><span class='line'>## Flicker
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Twelve-year-old Eliza knew that the next words were the result of computer program far more intelligent than any one of them. Standing next to her parents, she held her breath and watched as her brother touched his finger to the message on the wall screen.</span></code></pre></td></tr></table></div></figure>


<p>From there, my process looked like:</p>

<ul>
<li>Write a bit in my favorite editor, (Emacs of course), and make a commit.</li>
<li>Push the commit to github, which is registered with the Leanpub project</li>
<li>Log onto the Leanpub project and hit the <em>preview</em> button. This would generate a pdf and ebook that I could share with my daughter for feedback.</li>
</ul>


<p><img src="http://c1.staticflickr.com/5/4274/34768029762_3bbae300f0.jpg"></p>

<h3>Advantages of Leanpub for development.</h3>

<p>As I said earlier, I&rsquo;m a fan. Using git for revisions is incredibly useful. I shudder to think of people writing in Word without version control. The ability to easily create PDF and ebook formats was also very convenient. The markdown format has excellent code support. There is also the option as publishing your work as you go. However, I think that this is more useful with a technical book than with fiction.</p>

<h3>Disadvantages of Leanpub for development</h3>

<p>If you are going to work with an freelance editor or share your work with someone in the mainstream book world, they are not going to want pdf. They usually want a doc version. It took me a bit of research to find a good converter, <a href="http://pandoc.org/">pandoc</a>. With it, you can convert from markdown to Word with things looking pretty good. Don&rsquo;t try to do pdf to Word. I found it a big recipe for fail.</p>

<p>Finally, the book was considered done enough to think about publishing.</p>

<p>There was much rejoicing.</p>

<h2>Didn&rsquo;t you want to get the book into bookstores?</h2>

<p>Of course. That would be incredibly cool. However, that requires getting into what they call <em>traditional publishing</em> and it is a lot more work, time, and luck. If you go this route, you will need to budget at least six months to send out form letters to agencies to have them represent your work. Also, beware of predatory services that take advantage of unsuspecting and wide eyed authors. If you are interested in this, you&rsquo;ll want to start looking for agents that are interested in your type of book. <a href="https://querytracker.net/">Query Tracker</a> is a great place to start.</p>

<h2>Traditional publishing sounds hard. What about self publishing?</h2>

<p>Self publishing is certainly an easier more direct way to bring your book to life. For me, it was the best way forward. Luckily, Leanpub made it pretty painless.</p>

<h3>Publishing the book with Leanpub</h3>

<p>Actually publishing the finished copy was really easy with Leanpub. All I had to do was fill in some fields on the project page and push <em>Publish!</em> The book was immediately ready to share with the world. Putting out an updated edition was as easy as pushing the button again. Leanpub provides online reading as well as all the ebook versions.</p>

<p>That was nice, but I really wanted a print copy too.</p>

<h3>Publishing with CreateSpace</h3>

<p>Amazon&rsquo;s <a href="https://www.createspace.com/">CreateSpace</a> provides and excellent platform for on-demand print copies of books. This is where Leanpub comes in handy again. There is an <code>Export Option</code> that provides and unbranded pdf copy of your manuscript with all the correct formatting and margins required for CreateSpace. I simply exported the file and then uploaded it up to the project.</p>

<p><img src="http://c1.staticflickr.com/5/4203/34121511063_b63d283086_b.jpg"></p>

<p>The other thing that you will want is a nice cover. There are services through CreateSpace for cover creation that you can buy or you can upload your own file. I was lucky enough to have a talented graphic designer as sister, Kristin Allmyer,  who made me an awesome cover.</p>

<p>One of the confusing things was picking an ISBN for the print copy. You don&rsquo;t need to worry about this for ebook versions but you do for a physical copy. Your choices through CreateSpace are using a provided one for free or buying your own for $99. I chose my own so I could have flexibility of working with another publisher other than Amazon if I want. If you choose that option, you can also make up your own publisher name. Mine is <em>Gigasquid Books</em>.</p>

<p><img src="http://c1.staticflickr.com/5/4244/34121511083_15027c4571.jpg"></p>

<p>Once you have completed all the setup, they will send you a physical copy in the mail to approve. The moment you get to hold it in your hands is really magical.</p>

<p><img src="https://pbs.twimg.com/media/C8xBM-nXYAAOmK0.jpg:large"></p>

<p>If it looks alright, you hit the approve button and voilà &ndash; it&rsquo;s for sale on Amazon!</p>

<h3>Publishing with Direct Kindle Publishing</h3>

<p>With CreateSpace, you have the option of porting your book to a Kindle format as well. It will do most of the heavy lifting of converting the files for you and a few button clicks later you have both an Kindle and print version available for your readers.</p>

<p>If you need to update the text of the Kindle version, Leanpub also has an export option available to produce unbranded ebook files. Just take this and upload it to your KDP account and you are good to go.</p>

<h2>Did you run into any problems?</h2>

<p>Of course I did. I was totally new to self publishing and I underestimated how hard copy editing is. Some errors unfortunately made it into the first version. Luckily, I had some really nice people that helped my fix it for later versions. Many thanks to Martin Plumb, Michael Daines, Paul Henrich, and S. Le Callonnec for editing help.</p>

<p>This brings me to my next point. If I had to do it all over again, I would publish the book in a different order. Books are really no different than software. There are going to be bugs when you first release it in the wild. It is best to embrace this. In the future, I would publish the ebook versions first, which are much easier to update and then the print versions after that.</p>

<h2>Did you make lots of money from the book sales?</h2>

<p>Hahaha &hellip;  that&rsquo;s funny. If you are interested in making money, books are not the best way to go. The margins on Leanpub are definitely better than Amazon, but if I really was interested in making money, I would have been much better off using deep learning to make a stock market predictor or code up a startup that I could sell off.</p>

<p>Authors in general, are much harder pressed to make livings than software developers. We should count our blessings.</p>

<h2>Any last words of advice?</h2>

<p>There is a great joy from creating a story and sharing it with others. Take your book idea, nurture it, and bring it to life. Then publish it and we can celebrate together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep Learning in Clojure With Cortex]]></title>
    <link href="http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex/"/>
    <updated>2016-12-27T10:44:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex</id>
    <content type="html"><![CDATA[<p><strong>Update: Cortex has moved along since I first wrote this blog post, so if you are looking to run the examples, please go and clone the <a href="https://github.com/thinktopic/cortex">Cortex</a> repo and look for the cats and dogs code in the examples directory.</strong></p>

<p>There is an awesome new <em>Clojure-first</em> machine learning library called <a href="https://github.com/thinktopic/cortex">Cortex</a> that was open sourced recently. I&rsquo;ve been exploring it lately and wanted to share my discoveries so far in this post. In our exploration, we are going to tackle one of the classic classification problems of the internet. How do you tell the difference between a cat and dog pic?</p>

<h2>Where to Start?</h2>

<p><img src="http://kaggle2.blob.core.windows.net/competitions/kaggle/3362/media/woof_meow.jpg"></p>

<p>For any machine learning problem, we&rsquo;re going to need data. For this, we can use Kaggle&rsquo;s data for the <a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/data">Cats vs Dogs Challenge</a>.  The training data consists of 25,000 images of cats and dogs. That should be more than enough to train our computer to recognize cats from doggies.</p>

<p>We also need some idea of how to train against the data. Luckily, the Cortex project has a very nice set of examples to help you get started. In particular there is a <a href="https://github.com/thinktopic/cortex/tree/master/examples/suite-classification">suite classification example</a> using MNIST, (hand written digit), corpus. This example contains a number cutting edge features that we&rsquo;ll want to use:</p>

<ul>
<li>Uses GPU for <em>fast</em> computation.</li>
<li>Uses a deep, multi-layered, convolutional layered network for feature recognition.</li>
<li>Has &ldquo;forever&rdquo; training by image augmentation.</li>
<li>Saves the network configuration as it trains to an external nippy file so that it can be imported later.</li>
<li>Has a really nice ClojureScript front end to visualize the training progress with a confusion matrix.</li>
<li>Has a way to import the saved nippy network configuration and perform inference on it to classify a new image.</li>
</ul>


<p>Basically, it has everything we need to hit the ground running.</p>

<h2>Data Wrangling</h2>

<p>To use the example&rsquo;s <em>forever</em> training, we need to get the data in the right form. We need all the images to be the same size as well as in a directory structure that is split up into the training and test images. Furthermore, we want all the dog images to be under a &ldquo;dog&rdquo; directory and the cat images under the &ldquo;cat&rdquo; directory so that the all the indexed images under them have the correct &ldquo;label&rdquo;.  It will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- training
</span><span class='line'>  - cat
</span><span class='line'>    - 1.png
</span><span class='line'>    - 2.png
</span><span class='line'>  - dog
</span><span class='line'>    - 1.png
</span><span class='line'>    - 2.png</span></code></pre></td></tr></table></div></figure>


<p>For this task, we are going to use a couple image libraries to help us out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">[</span><span class="nv">mikera.image.core</span> <span class="ss">:as</span> <span class="nv">imagez</span><span class="p">]</span>
</span><span class='line'> <span class="p">[</span><span class="nv">think.image.image</span> <span class="ss">:as</span> <span class="nv">image</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can resize and rewrite the original images into the form we want. For a image size, we&rsquo;re going to go with 52x52. The choice is arbitrary in that I wanted it bigger than the MNIST dataset which is 28x28 so it will be easier to see, but not so big that it kills my CPU. This is even more important since we want to use RGB colors which is 3 channels as opposed to the MNIST grey scale of 1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dataset-image-size</span> <span class="mi">52</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dataset-num-classes</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dataset-num-channels</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dataset-datatype</span> <span class="ss">:float</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">resize-and-write-data</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">output-dir</span> <span class="p">[</span><span class="nv">idx</span> <span class="p">[</span><span class="nv">file</span> <span class="nv">label</span><span class="p">]]]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">img-path</span> <span class="p">(</span><span class="nb">str </span><span class="nv">output-dir</span> <span class="s">&quot;/&quot;</span> <span class="nv">label</span> <span class="s">&quot;/&quot;</span> <span class="nv">idx</span> <span class="s">&quot;.png&quot;</span> <span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-not </span><span class="p">(</span><span class="nf">.exists</span> <span class="p">(</span><span class="nf">io/file</span> <span class="nv">img-path</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">io/make-parents</span> <span class="nv">img-path</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">imagez/load-image</span> <span class="nv">file</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">image/resize</span> <span class="nv">dataset-image-size</span> <span class="nv">dataset-image-size</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">imagez/save</span> <span class="nv">img-path</span><span class="p">)))</span>
</span><span class='line'>    <span class="nv">nil</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as the split between training images and testing images, we are going the go for an simple even split between testing and training data.</p>

<h2>Network Configuration</h2>

<p>The Network layer configuration is the meat of the whole thing. We are going to go with the exact same network description as the MNIST example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">create-basic-network-description</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">[(</span><span class="nf">desc/input</span> <span class="nv">dataset-image-size</span> <span class="nv">dataset-image-size</span> <span class="nv">dataset-num-channels</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/convolutional</span> <span class="mi">5</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/max-pooling</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/relu</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/convolutional</span> <span class="mi">5</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/max-pooling</span> <span class="mi">2</span> <span class="mi">0</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/relu</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/convolutional</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/relu</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/linear-&gt;relu</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/dropout</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">desc/linear-&gt;softmax</span> <span class="nv">dataset-num-classes</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>It uses a series of convolutional layers with max pooling for feature recognition. We&rsquo;ll see if it works for color versions of cats and dogs as well as street numbers.</p>

<p>We&rsquo;ll also keep the image augmentation the same as in the example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-image-rotation-degrees</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">img-aug-pipeline</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">img</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">img</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">image-aug/rotate</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">rand-int </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">max-image-rotation-degrees</span><span class="p">))</span>
</span><span class='line'>                           <span class="nv">max-image-rotation-degrees</span><span class="p">)</span>
</span><span class='line'>                        <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">image-aug/inject-noise</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.25</span> <span class="p">(</span><span class="nf">rand</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">*num-augmented-images-per-file*</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It injects one augmented image into our training data by slightly rotating it and adding noise.</p>

<h3>Running it!</h3>

<p>It&rsquo;s time to test it out. Using <code>lein run</code>, we&rsquo;ll launch the <code>train-forever</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train-forever</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">dataset</span> <span class="p">(</span><span class="nf">create-dataset</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">initial-description</span> <span class="p">(</span><span class="nf">create-basic-network-description</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">confusion-matrix-atom</span> <span class="p">(</span><span class="nf">display-dataset-and-model</span> <span class="nv">dataset</span> <span class="nv">initial-description</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">classification/train-forever</span> <span class="nv">dataset</span> <span class="nv">observation-&gt;image</span>
</span><span class='line'>                                  <span class="nv">initial-description</span>
</span><span class='line'>                                  <span class="ss">:confusion-matrix-atom</span> <span class="nv">confusion-matrix-atom</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This opens a port to a localhost webpage where we can view the progress <code>http://localhost:8091/</code></p>

<p><img src="http://c3.staticflickr.com/1/599/31877481106_ab49402b71_b.jpg"></p>

<p>Below the confusion matrix is shown. This tracks the progress of the training in the classification. In particular, how many times it thought a cat was really a cat and how many times it got it wrong.</p>

<p><img src="http://c7.staticflickr.com/1/371/31541533750_69d80cc7fa.jpg"></p>

<p>As we are training the data, the loss for each epoch is shown on the console as well as when it saves the network to the external file.</p>

<p>After only thirty minutes of training on my Mac Book Pro, we get to some pretty good results, with the correct percentage in the 99s :</p>

<p><img src="http://c1.staticflickr.com/1/707/31541538600_8e61134375.jpg"></p>

<p>It&rsquo;s time to do some inference on our trained network.</p>

<h2>Inference</h2>

<p>Firing up a REPL we can connect to our namespace and use the <code>label-one</code> function from the cortex example to spot check our classification. It reads in the external nippy file that contains the trained network description, takes a random image from the testing directory, and classifies it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">label-one</span>
</span><span class='line'>  <span class="s">&quot;Take an arbitrary image and label it.&quot;</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">file-label-pairs</span> <span class="p">(</span><span class="nf">shuffle</span> <span class="p">(</span><span class="nf">classification/directory-&gt;file-label-seq</span> <span class="nv">testing-dir</span>
</span><span class='line'>                                                                            <span class="nv">false</span><span class="p">))</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">test-file</span> <span class="nv">test-label</span><span class="p">]</span> <span class="p">(</span><span class="nb">first </span><span class="nv">file-label-pairs</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">test-img</span> <span class="p">(</span><span class="nf">imagez/load-image</span> <span class="nv">test-file</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">observation</span> <span class="p">(</span><span class="nf">png-&gt;observation</span> <span class="nv">dataset-datatype</span> <span class="nv">false</span> <span class="nv">test-img</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">imagez/show</span> <span class="nv">test-img</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">infer/classify-one-observation</span> <span class="p">(</span><span class="ss">:network-description</span>
</span><span class='line'>                                     <span class="p">(</span><span class="nf">suite-io/read-nippy-file</span> <span class="s">&quot;trained-network.nippy&quot;</span><span class="p">))</span>
</span><span class='line'>                                    <span class="nv">observation</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nf">ds/create-image-shape</span> <span class="nv">dataset-num-channels</span>
</span><span class='line'>                                                           <span class="nv">dataset-image-size</span>
</span><span class='line'>                                                           <span class="nv">dataset-image-size</span><span class="p">)</span>
</span><span class='line'>                                    <span class="nv">dataset-datatype</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nf">classification/get-class-names-from-directory</span> <span class="nv">testing-dir</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>(label-one)</code> gives us the picture:</p>

<p><img src="http://c2.staticflickr.com/1/423/31105658073_b6143b2f00.jpg"></p>

<p>and classifies it as a cat. Yipee!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:probability-map</span> <span class="p">{</span><span class="s">&quot;cat&quot;</span> <span class="mf">0.9995587468147278</span>, <span class="s">&quot;dog&quot;</span> <span class="mf">4.4119369704276323</span><span class="nv">E-4</span><span class="p">}</span>, <span class="ss">:classification</span> <span class="s">&quot;cat&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad, but let&rsquo;s try it with something harder. Personally, I&rsquo;m not even sure whether this is a cat or a dog.</p>

<p><img src="http://c6.staticflickr.com/1/596/31105666133_223dc2f04e_c.jpg"></p>

<p>Feeding it through the program &ndash; it says it is a cat.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">{</span><span class="ss">:probability-map</span> <span class="p">{</span><span class="s">&quot;cat&quot;</span> <span class="mf">0.9942012429237366</span>, <span class="s">&quot;dog&quot;</span> <span class="mf">0.005798777565360069</span><span class="p">}</span>, <span class="ss">:classification</span> <span class="s">&quot;cat&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After much <a href="http://www.today.com/pets/cat-or-dog-wild-eyed-cutie-has-us-all-confused-t104835">debate on the internet</a>, I think that is the best answer the humans got too :)</p>

<h2>Kaggle it</h2>

<p>So it seems like we have a pretty good model, why don&rsquo;t we submit our results to the Kaggle competition and see how it rates. All they need is to have us run the classification against their test data of 12,500 images and classify them as 1 = dog or 0 = cat in a csv format.</p>

<p>We will take each image and resize it, then feed it into cortex&rsquo;s <code>infer-n-observations</code> function, to do all our classification as a batch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="nf">infer/infer-n-observations</span> <span class="p">(</span><span class="ss">:network-description</span>
</span><span class='line'>                                             <span class="p">(</span><span class="nf">suite-io/read-nippy-file</span> <span class="s">&quot;trained-network.nippy&quot;</span><span class="p">))</span>
</span><span class='line'>                                            <span class="nv">observations</span>
</span><span class='line'>                                            <span class="p">(</span><span class="nf">ds/create-image-shape</span> <span class="nv">dataset-num-channels</span>
</span><span class='line'>                                                                   <span class="nv">dataset-image-size</span>
</span><span class='line'>                                                                   <span class="nv">dataset-image-size</span><span class="p">)</span>
</span><span class='line'>                                            <span class="nv">dataset-datatype</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we just need to format our results to a csv file and export it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">write-kaggle-results</span> <span class="p">[</span><span class="nv">results</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">out-file</span> <span class="p">(</span><span class="nf">io/writer</span> <span class="s">&quot;kaggle-results.csv&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">csv/write-csv</span> <span class="nv">out-file</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">into </span><span class="p">[[</span><span class="s">&quot;id&quot;</span> <span class="s">&quot;label&quot;</span><span class="p">]]</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">mapv</span> <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">id</span> <span class="nv">class</span><span class="p">]]</span> <span class="p">[(</span><span class="nf">Integer/parseInt</span> <span class="nv">id</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;dog&quot;</span> <span class="nv">class</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)])</span> <span class="nv">results</span><span class="p">)</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">sort</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>After uploading the file to the Kaggle, I was pleased that the answer got in the top 91%! It made it on the <a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/leaderboard">Leaderboard</a>.</p>

<h2>Conclusion</h2>

<p>Using an example setup from the Cortex project and 30 minutes of processing time on my laptop, we were able to crunch through some significant data and come up with a trained classification model that was good enough to make the charts in the Kaggle competition. On top of it all, it is in pure Clojure.</p>

<p>In my mind, this is truely impressive and even though the Cortex library is in it&rsquo;s early phases, it puts it on track to be as useful a tool as Tensor Flow for Machine Learning.</p>

<p>Earlier this month, I watched an ACM Learning webcast with Peter Norvig speaking on AI. In it, he spoke of one of the next challenges of AI which is to combine <a href="https://twitter.com/gigasquid/status/806916856040689664?lang=en">symbolic with neural</a>. I can think of no better language than Clojure with it&rsquo;s simplicity, power, and rich LISP heritage to take on the challenge for the future. With the Cortex library, it&rsquo;s off to a great start.</p>

<p><em>If want to see all the cats vs dog  Kaggle Code, it&rsquo;s out on github here <a href="https://github.com/gigasquid/kaggle-cats-dogs">https://github.com/gigasquid/kaggle-cats-dogs</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genetic Programming With clojure.spec]]></title>
    <link href="http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec/"/>
    <updated>2016-07-18T09:40:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec</id>
    <content type="html"><![CDATA[<p><img src="http://c1.staticflickr.com/9/8815/28320682816_44780d1b75.jpg"></p>

<p><a href="http://blog.cognitect.com/blog/2016/5/23/introducing-clojurespec">Clojure.spec</a> is a new library for Clojure that enables you to write specifications for your program.  In an earlier <a href="http://gigasquidsoftware.com/blog/2016/05/29/one-fish-spec-fish/">post</a>, I showed off some of it&rsquo;s power to generate test data from your specifications.  It&rsquo;s a pretty cool feature.  Given some clojure.spec code, you can generate sample data for you based off of the specifications.  But what if you could write a program that would <em>generate</em> your clojure.spec program based off of data so that you could generate more test data?</p>

<h2>Genetic programming</h2>

<p>Here is where we embark for fun.  We are going to use genetic programming to generate clojure.spec <em>creatures</em> that contain a program.  Through successive generations, those creatures will breed, mutate, and evolve to fit the data that we are going to give it.  Going with our creature theme, we can say that it <em>eats</em> a sequence of data like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="s">&quot;hi&quot;</span> <span class="nv">true</span> <span class="mi">5</span> <span class="mi">10</span> <span class="s">&quot;boo&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each creature will be represented by a map that has information about two key pieces, its program and the <em>fitness</em> score.  Each program is going to start with a <a href="https://clojure.github.io/clojure/branch-master/clojure.spec-api.html#clojure.spec/cat">clojure.spec/cat</a>, (which is the spec to describe a sequence).  From here on out, I&rsquo;m going to refer to the clojure.spec namespace as <code>s/</code>.  So, a simple creature would look like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:program</span> <span class="p">(</span><span class="nf">s/cat</span> <span class="ss">:0</span> <span class="nv">int?</span> <span class="ss">:1</span> <span class="nv">string?</span><span class="p">)</span>
</span><span class='line'> <span class="ss">:score</span> <span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do we figure out a score from the creature&rsquo;s spec?  We run the spec and see how much of the data that it can successfully consume.</p>

<h3>Scoring a creature</h3>

<p>To score a creature, we&rsquo;re going to use the clojure.spec <code>explain-data</code> function. It enables us to run a spec against some data and get back the problems in a data format that we can inspect.  If there are no problems and the spec passes, the result is nil.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/explain-data</span> <span class="p">(</span><span class="nf">s/cat</span> <span class="ss">:0</span> <span class="nv">int?</span> <span class="ss">:1</span> <span class="nv">string?</span><span class="p">)</span>  <span class="p">[</span><span class="mi">1</span> <span class="s">&quot;hi&quot;</span><span class="p">])</span>
</span><span class='line'><span class="c1">;=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, if there is a problem, we can get information about what went wrong.  In particular, we can see <em>where</em> it went wrong in the sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">s/explain-data</span> <span class="p">(</span><span class="nf">s/cat</span> <span class="ss">:0</span> <span class="nv">int?</span> <span class="ss">:1</span> <span class="nv">string?</span><span class="p">)</span>  <span class="p">[</span><span class="mi">1</span> <span class="nv">true</span><span class="p">])</span>
</span><span class='line'><span class="c1">;=&gt; #:clojure.spec{:problems [{:path [:1], :pred string?, :val true, :via [], :in [1]}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, the <code>:in</code> key tells us that it fails at index 1. This gives us all the information we need to write a score function for our creature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">score</span> <span class="p">[</span><span class="nv">creature</span> <span class="nv">test-data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">try</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">problems</span> <span class="p">(</span><span class="ss">:clojure.spec/problems</span> <span class="p">(</span><span class="nf">s/explain-data</span> <span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="ss">:program</span> <span class="nv">creature</span><span class="p">))</span> <span class="nv">test-data</span><span class="p">))]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="nv">problems</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">assoc </span><span class="nv">creature</span> <span class="ss">:score</span> <span class="p">(</span><span class="nf">get-in</span> <span class="nv">problems</span> <span class="p">[</span><span class="mi">0</span> <span class="ss">:in</span> <span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">assoc </span><span class="nv">creature</span> <span class="ss">:score</span> <span class="mi">100</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">catch</span> <span class="nv">Throwable</span> <span class="nv">e</span> <span class="p">(</span><span class="nb">assoc </span><span class="nv">creature</span> <span class="ss">:score</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function tries to run the spec against the data.  If there are no problems, the creature gets a 100 score.  Otherwise, it records the farthest point in the sequence that it got.  Creatures with a higher score are considered more <em>fit</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">score</span> <span class="p">{</span><span class="ss">:program</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">s/cat</span> <span class="ss">:0</span> <span class="nv">int?</span> <span class="ss">:1</span> <span class="nv">string?</span><span class="p">)}</span> <span class="p">[</span><span class="mi">1</span> <span class="nv">true</span><span class="p">])</span>
</span><span class='line'><span class="c1">;=&gt; {:program (s/cat :0 int? :1 string?), :score 1}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a fitness function to evaluate our creatures, we need a way to generate a random clojure.spec creature.</p>

<p><img src="http:////c1.staticflickr.com/9/8781/28071856800_0477b25fcc.jpg"></p>

<h3>Create a random creature</h3>

<p>This is where I really love Clojure.  Code is data, so we can create the programs as lists and they are just themselves.  To run the programs, we just need to call <code>eval</code> on them.  We are going to constrain the creatures somewhat.  They are all going to start out with <code>s/cat</code> and have a certain length of items in the sequence.  Also, we are going to allow the parts of the spec to be created with certain predicates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">preds</span> <span class="p">[</span><span class="ss">&#39;integer?</span> <span class="ss">&#39;string?</span> <span class="ss">&#39;boolean?</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">s/and</span> <span class="nv">integer?</span> <span class="nv">even?</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">s/and</span> <span class="nv">integer?</span> <span class="nv">odd?</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also allowing, composition with ands and ors and other sequences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">seqs</span> <span class="p">[</span><span class="ss">&#39;s/+</span> <span class="ss">&#39;s/*</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">and-ors</span> <span class="p">[</span><span class="ss">&#39;s/and</span> <span class="ss">&#39;s/or</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are also going to have some probability knobs to control how the random creature is constructed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">seq-prob</span> <span class="mf">0.3</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nest-prob</span> <span class="mf">0.00</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-depth</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">and-or-prob</span> <span class="mf">0.85</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>seq-prob</code> is the probability that a new spec sub sequence will be constructed.  The <code>nest-prob</code> is set to zero right now, to keep things simple, but if turned up with increase the chance that a nested spec sequence would occur.  We are going to be writing a recursive function for generation, so we&rsquo;ll keep things to a limited depth with <code>max-depth</code>.  Finally, we have the chance that when constructing a spec sub sequence, that it will be an and/or with <code>and-or-prob</code>.  Putting it all together with code to construct a random arg.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-random-arg</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">pos? </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">seq-prob</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">make-random-seq</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">rand-nth</span> <span class="nv">preds</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also creating a random sub sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-random-seq</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">nest-prob</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">s/spec</span> <span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nf">rand-nth</span> <span class="nv">seqs</span><span class="p">)</span> <span class="o">~</span><span class="p">(</span><span class="nf">make-random-arg</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">and-or-prob</span><span class="p">)</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nf">rand-nth</span> <span class="nv">and-ors</span><span class="p">)</span> <span class="o">~</span><span class="p">(</span><span class="nf">make-random-arg</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">))</span> <span class="o">~</span><span class="p">(</span><span class="nf">make-random-arg</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="ss">:else</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nf">rand-nth</span> <span class="nv">seqs</span><span class="p">)</span> <span class="o">~</span><span class="p">(</span><span class="nf">make-random-arg</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can create a random <code>s/cat</code> spec with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-random-cat</span> <span class="p">[</span><span class="nv">len</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">args</span> <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">r</span> <span class="nv">i</span><span class="p">]</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">conj </span><span class="nv">r</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="nb">str </span><span class="nv">i</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">make-random-arg</span> <span class="nv">max-depth</span><span class="p">)))</span>
</span><span class='line'>                     <span class="p">[]</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">range </span><span class="nv">len</span><span class="p">))]</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">s/cat</span> <span class="o">~@</span><span class="nv">args</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see it in action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">make-random-cat</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; (clojure.spec/cat :0 (s/and integer? odd?) :1 integer? :2 boolean?)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can make a batch of new creatures for our initial population using this function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">initial-population</span> <span class="p">[</span><span class="nv">popsize</span> <span class="nv">max-cat-length</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="nv">popsize</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:program</span> <span class="p">(</span><span class="nf">make-random-cat</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">rand-int </span><span class="nv">max-cat-length</span><span class="p">)))}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! Now we have a way to make new random spec creatures.  But, we need a way to alter them and let them evolve.  The first way to do this is with <em>mutation</em>.</p>

<p><img src="http://c2.staticflickr.com/9/8807/28275661121_94361d2fc4.jpg"></p>

<h3>Mutating a creature</h3>

<p>Mutation in our case, means changing part of the code tree of the creature&rsquo;s program.  To keep the program runnable, we don&rsquo;t want to be able to mutate every node, only specific ones.  We&rsquo;re going to control this by defining a <code>mutable</code> function that will only change nodes that start with our sequences or predicates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">mutable?</span> <span class="p">[</span><span class="nv">node</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">seq? </span><span class="nv">node</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">contains? </span><span class="p">(</span><span class="nf">set/union</span> <span class="p">(</span><span class="nb">set </span><span class="nv">seqs</span><span class="p">)</span> <span class="o">#</span><span class="p">{</span><span class="ss">&#39;clojure.spec/spec</span><span class="p">})</span> <span class="p">(</span><span class="nb">first </span><span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">contains? </span><span class="p">(</span><span class="nb">set </span><span class="nv">preds</span><span class="p">)</span> <span class="nv">node</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we can use <code>postwalk</code> to walk the code tree and alter a node by a mutation probability factor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mutate-prob</span> <span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">mutate</span> <span class="p">[</span><span class="nv">creature</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">program</span> <span class="p">(</span><span class="ss">:program</span> <span class="nv">creature</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">mutated-program</span> <span class="p">(</span><span class="nf">walk/postwalk</span>
</span><span class='line'>                         <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">mutable?</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">mutate-prob</span><span class="p">))</span>
</span><span class='line'>                                  <span class="p">(</span><span class="nf">make-random-arg</span> <span class="nv">max-depth</span><span class="p">)</span>
</span><span class='line'>                                  <span class="nv">x</span><span class="p">))</span> <span class="nv">program</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">assoc </span><span class="nv">creature</span> <span class="ss">:program</span> <span class="nv">mutated-program</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trying it on one of our creatures.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">mutate</span> <span class="p">{</span><span class="ss">:program</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">clojure.spec/cat</span> <span class="ss">:0</span> <span class="p">(</span><span class="nf">s/and</span> <span class="nv">integer?</span> <span class="nv">odd?</span><span class="p">)</span> <span class="ss">:1</span> <span class="nv">integer?</span><span class="p">)})</span>
</span><span class='line'><span class="c1">;=&gt; {:program (clojure.spec/cat :0 (s/or (s/and integer? even?)) :1 integer?)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can change our creatures via mutation, but what about breeding it with other creatures?</p>

<p><img src="http://c8.staticflickr.com/9/8670/28354279095_25661401c0_z.jpg"></p>

<h3>Crossovers with creatures</h3>

<p>Crossover is another way to modify programs.  It takes two creatures and swaps a node from one creature to another. To accomplish this, we&rsquo;re going to use the <code>walk</code> function to select at a random probability the crossover node from the first node, then insert it into the second&rsquo;s creatures program at another random spot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">crossover-prob</span> <span class="mf">0.7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">crossover</span> <span class="p">[</span><span class="nv">creature1</span> <span class="nv">creature2</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">program1</span> <span class="p">(</span><span class="ss">:program</span> <span class="nv">creature1</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">program2</span> <span class="p">(</span><span class="ss">:program</span> <span class="nv">creature2</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chosen-node</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">walk/walk</span>
</span><span class='line'>                            <span class="o">#</span><span class="p">(</span><span class="nf">when</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">crossover-prob</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">(</span><span class="nf">mutable?</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>                               <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">#</span><span class="p">(</span><span class="nb">remove nil? </span><span class="nv">%</span><span class="p">)</span> <span class="nv">program1</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">crossed-over?</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">crossover-program</span> <span class="p">(</span><span class="k">if </span><span class="nv">chosen-node</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">walk/postwalk</span>
</span><span class='line'>                              <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">mutable?</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">crossover-prob</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="nb">not </span><span class="err">@</span><span class="nv">crossed-over?</span><span class="p">))</span>
</span><span class='line'>                                  <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">reset!</span> <span class="nv">crossed-over?</span> <span class="nv">true</span><span class="p">)</span> <span class="nv">chosen-node</span><span class="p">)</span>
</span><span class='line'>                                  <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>                              <span class="nv">program2</span><span class="p">)</span>
</span><span class='line'>                             <span class="nv">program2</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:program</span> <span class="nv">crossover-program</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Taking two creatures and putting them together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">crossover</span> <span class="p">{</span><span class="ss">:program</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">clojure.spec/cat</span> <span class="ss">:0</span> <span class="p">(</span><span class="nf">s/and</span> <span class="nv">integer?</span> <span class="nv">odd?</span><span class="p">)</span> <span class="ss">:1</span> <span class="nv">integer?</span><span class="p">)}</span>
</span><span class='line'>           <span class="p">{</span><span class="ss">:program</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">clojure.spec/cat</span> <span class="ss">:0</span> <span class="nb">string? </span><span class="ss">:1</span> <span class="nv">boolean?</span><span class="p">)})</span>
</span><span class='line'><span class="c1">;=&gt; {:program (clojure.spec/cat :0 (s/and integer? odd?) :1 boolean?)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have our ways to change our creatures to let them evolve and we have a way to rank them.  What we need now is to put it together in a way that will let them evolve to the solution.</p>

<p><img src="http://c5.staticflickr.com/9/8570/28320682956_2a301eea70_z.jpg"></p>

<h3>Evolving creatures</h3>

<p>The process will be in general terms:</p>

<ul>
<li>Create initial population</li>
<li>Rank them</li>
<li>Take the top two best ones and carry them over (this is known as <em>elitism</em>)</li>
<li>Create the next generation from by <em>selecting</em> creatures for crossover and mutation</li>
<li>Repeat!</li>
</ul>


<p>So how do we select the best creatures for our next population?  This is an interesting question, there are many approaches.  The one that we&rsquo;re going to use is called <a href="https://en.wikipedia.org/wiki/Tournament_selection">tournament selection</a>.  It involves picking n creatures from the whole population and then, among those, picking the best scored one.  This will allow diversity in our population that is needed for proper evolution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">select-best</span> <span class="p">[</span><span class="nv">creatures</span> <span class="nv">tournament-size</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">selected</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">tournament-size</span> <span class="o">#</span><span class="p">(</span><span class="nf">rand-nth</span> <span class="nv">creatures</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">sort-by </span><span class="ss">:score</span> <span class="nv">selected</span><span class="p">)</span> <span class="nb">reverse </span><span class="nv">first</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re now ready to write our evolve function.  In it, we pass in the population size, how many generations we want, the tournament size, and of course, our test data that our creatures are going to feed on.  The loop ends when it reaches a perfect fitting solution, (a creature with a score of 100), or the max generations.</p>

<p>Note that we have a chance for a completely random creature to appear in the generations, to further encourage diversity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">perfect-fit</span> <span class="p">[</span><span class="nv">creatures</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="mi">100</span> <span class="p">(</span><span class="ss">:score</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">creatures</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">evolve</span> <span class="p">[</span><span class="nv">pop-size</span> <span class="nv">max-gen</span> <span class="nv">tournament-size</span> <span class="nv">test-data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">n</span> <span class="nv">max-gen</span>
</span><span class='line'>         <span class="nv">creatures</span> <span class="p">(</span><span class="nf">initial-population</span> <span class="nv">pop-size</span> <span class="p">(</span><span class="nb">count </span><span class="nv">test-data</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;generation &quot;</span> <span class="p">(</span><span class="nb">- </span><span class="nv">max-gen</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">scored-creatures</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">creature</span><span class="p">]</span> <span class="p">(</span><span class="nf">score</span> <span class="nv">creature</span> <span class="nv">test-data</span><span class="p">))</span> <span class="nv">creatures</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">perfect-fit</span> <span class="nv">scored-creatures</span><span class="p">))</span>
</span><span class='line'>       <span class="nv">scored-creatures</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">elites</span> <span class="p">(</span><span class="nb">take </span><span class="mi">2</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">sort-by </span><span class="ss">:score</span> <span class="nv">scored-creatures</span><span class="p">)))</span>
</span><span class='line'>             <span class="nv">new-creatures</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">count </span><span class="nv">creatures</span><span class="p">)</span> <span class="mi">2</span><span class="p">))]</span>
</span><span class='line'>                             <span class="c1">;; add a random node to improve diversity</span>
</span><span class='line'>                             <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">rand</span><span class="p">)</span> <span class="nv">new-node-prob</span><span class="p">)</span>
</span><span class='line'>                               <span class="p">{</span><span class="ss">:program</span> <span class="p">(</span><span class="nf">make-random-cat</span> <span class="p">(</span><span class="nb">count </span><span class="nv">test-data</span><span class="p">))}</span>
</span><span class='line'>                               <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">creature1</span> <span class="p">(</span><span class="nf">select-best</span> <span class="nv">scored-creatures</span> <span class="nv">tournament-size</span><span class="p">)</span>
</span><span class='line'>                                     <span class="nv">creature2</span> <span class="p">(</span><span class="nf">select-best</span> <span class="nv">scored-creatures</span> <span class="nv">tournament-size</span><span class="p">)]</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nf">mutate</span> <span class="p">(</span><span class="nf">crossover</span> <span class="nv">creature1</span> <span class="nv">creature2</span><span class="p">)))))]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">println </span><span class="s">&quot;best-scores&quot;</span> <span class="p">(</span><span class="nb">map </span><span class="ss">:score</span> <span class="nv">elites</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">into </span><span class="nv">new-creatures</span> <span class="nv">elites</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trying it out. We get a perfect clojure.spec creature!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">creature-specs</span> <span class="p">(</span><span class="nf">evolve</span> <span class="mi">100</span> <span class="mi">100</span> <span class="mi">7</span> <span class="p">[</span><span class="s">&quot;hi&quot;</span> <span class="nv">true</span> <span class="mi">5</span> <span class="mi">10</span> <span class="s">&quot;boo&quot;</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">perfect-fit</span> <span class="nv">creature-specs</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;=&gt;{:program (clojure.spec/cat :0 string? :1 boolean? :2 (s/and integer? odd?) :3 integer? :4 string?)</span>
</span><span class='line'>      <span class="ss">:score</span> <span class="mi">100</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, our clojure.spec creature can generate data on its own with the <code>exercise</code> function.  Let&rsquo;s have it generate 5 more examples of data that conform to its spec.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">s/exercise</span> <span class="p">(</span><span class="nb">eval </span><span class="p">(</span><span class="ss">:program</span> <span class="p">(</span><span class="nf">perfect-fit</span> <span class="nv">creature-specs</span><span class="p">)))</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; ([(&quot;&quot; true -1 -1 &quot;&quot;) {:0 &quot;&quot;, :1 true, :2 -1, :3 -1, :4 &quot;&quot;}]</span>
</span><span class='line'><span class="c1">;;  [(&quot;D&quot; false -1 -1 &quot;G&quot;) {:0 &quot;D&quot;, :1 false, :2 -1, :3 -1, :4 &quot;G&quot;}]</span>
</span><span class='line'><span class="c1">;;  [(&quot;12&quot; false -1 0 &quot;l0&quot;) {:0 &quot;12&quot;, :1 false, :2 -1, :3 0, :4 &quot;l0&quot;}]</span>
</span><span class='line'><span class="c1">;;  [(&quot;&quot; false -1 -2 &quot;&quot;) {:0 &quot;&quot;, :1 false, :2 -1, :3 -2, :4 &quot;&quot;}]</span>
</span><span class='line'><span class="c1">;;  [(&quot;2&quot; false 1 0 &quot;Jro&quot;) {:0 &quot;2&quot;, :1 false, :2 1, :3 0, :4 &quot;Jro&quot;}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we wanted to, we could adjust our evolve function and let it continue to evolve creatures and lots of different solutions to choose from. We could even take the generated data from the <code>exercise function</code> and let it generate more creatures who generate more data&hellip;&hellip;</p>

<p>The mind boggles.</p>

<p>We&rsquo;ll leave with a quick summary of Genetic Programming.</p>

<ul>
<li>Start with a way to generate random creatures</li>
<li>Have a way to evaluate their fitness</li>
<li>Create a way to change them for the next generations using

<ul>
<li>Mutation</li>
<li>Crossover</li>
</ul>
</li>
<li>Have an evolution process

<ul>
<li>Create an initial population</li>
<li>Rank them</li>
<li>Create the next generation using selection techniques and mutation/ crossovers</li>
<li>Don&rsquo;t forget about diversity</li>
</ul>
</li>
</ul>


<p>Most importantly, have fun!</p>

<p>If you want to play with the code, it&rsquo;s on github here <a href="https://github.com/gigasquid/genetic-programming-spec">https://github.com/gigasquid/genetic-programming-spec</a></p>

<p>If you want to learn more about clojure.spec this <a href="https://www.youtube.com/watch?v=nqY4nUMfus8">video</a> is a great place to start.  The <a href="http://clojure.org/guides/spec">guide</a> is also a great reference with examples.</p>

<p>If you want to learn more about genetic programming, there are a couple of books I would recommend: <a href="https://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325">Collective Intelligence</a> and <a href="https://www.amazon.com/Genetic-Algorithms-Structures-Evolution-Programs/dp/3540606769/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1468862704&amp;sr=1-1&amp;keywords=genetic+algorithms+data+structures">Genetic Algorithms + Data Structures = Evolution Programs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World for the Next Generation]]></title>
    <link href="http://gigasquid.github.io/blog/2016/07/03/hello-world/"/>
    <updated>2016-07-03T15:01:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2016/07/03/hello-world</id>
    <content type="html"><![CDATA[<p>I sit next to my daughter, showing her programming for the first time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Now press enter.&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;Pretty cool, huh?&rdquo;</p>

<p>She looks unimpressed.  I fear I&rsquo;m losing her.  How can I explain that this is just a small tip of something so much bigger?</p>

<h3>You can make the code sing to you.</h3>

<p>You can take these numbers, turn them into notes, and line them up with the beat of your heart. Bring in the melody and chorus and build them up to a crescendo. Let it crash in waves and then</p>

<h3>You can make the code dance for you.</h3>

<p>You can create delicate swirls and patterns with mathematical expressions.  Have them pulse to the music in a never ending prism of fractals, flexing your control with confidence because</p>

<h3>You can make the code lift you up.</h3>

<p>It doesn&rsquo;t matter if you don&rsquo;t look like them.  It doesn&rsquo;t matter if they think you don&rsquo;t belong. They can&rsquo;t hold you back. You&rsquo;re smart and strong and</p>

<h3>You can make the code create your life.</h3>

<p>You can solve problems for people.  Make things work better and faster.  Keep the data flowing.  Make a company for yourself.  Watch that company and your power and influence in the world grow until nothing feels out of reach and then, if you&rsquo;re not careful</p>

<h3>You can make the code hard and cruel.</h3>

<p>You can automate hate.  Use the latest AI to keep them in control.  Watch them with never sleeping eyes.  Steal their money and point guns at them with armed robots.  Then, late at night, you can think how</p>

<h3>You can let the code control you.</h3>

<p>You can forget the important things in life.  Turn away from family and friends.  Lose yourself in some self created digital representation of yourself that never feels smart enough and leaves you grasping for more.  Until that day, when you walk the streets with a deadened heart and you see the sad faces all around and you remember that</p>

<h3>You can let the code make them smile.</h3>

<p>You can use your skills to brighten dark days.  Use your programs to make them laugh.  When you have their attention, inspire them to dream with you of a better world and next</p>

<h3>You can make the code save lives.</h3>

<p>You can turn those algorithms to heal.  Dive in and join the battle against death and disease.  Make sense of all the data.  Then lift your head to the sky and</p>

<h3>You can make the code reach the stars.</h3>

<p>You can see the surface of Mars.  Pick up a rock from a planet that was unimaginable generations before.  Look out at what is beyond our solar system and peer into the mysteries of the beginning of time.</p>

<h3>You can.</h3>

<p>All these things are yours now.  The terrible and beautiful power of it.</p>

<p>I reach down to type the code that distills my hopes and fears for the next generation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I slide the keyboard over to her, a tear sliding down my cheek, and lean over to whisper the only advice that I can form into words,</p>

<p>&ldquo;Don&rsquo;t forget the closing parens.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Writing for the Busy Programmer]]></title>
    <link href="http://gigasquid.github.io/blog/2016/06/19/book-writing-for-the-busy-programmer/"/>
    <updated>2016-06-19T09:22:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2016/06/19/book-writing-for-the-busy-programmer</id>
    <content type="html"><![CDATA[<p><img src="http://c5.staticflickr.com/8/7302/27492453220_eecdf6dee1.jpg"></p>

<p>So you want to write a book?  Awesome.  I&rsquo;ve been working on one too for the last year.</p>

<p>No, it&rsquo;s not really a programming book, but it does have code in it.  It&rsquo;s a sci-fi/fantasy book written for my ten year daughter, but this post isn&rsquo;t about that.  It&rsquo;s about sharing the tools and setup that I&rsquo;ve found work best for me.</p>

<h2>Tools for Writing</h2>

<p>If the first thing you think of when you want to write a book is creating some really cool tools to help you, I can totally relate.  It&rsquo;s a programmer thing.</p>

<p>Hold on though, there&rsquo;s another way.</p>

<p>Starting out with only my book idea, I spent some time looking at the best authoring tools out there.  I knew that I wanted to able to write in an editor that I was comfortable in and in a terse format like Markdown.  I also wanted to be able to use git for revision management.  After searching, I settled on <a href="https://leanpub.com/">Leanpub</a></p>

<p>Leanpub is a free service for authoring that has <a href="https://leanpub.com/help/getting_started_sync_github">Git integration</a> in <a href="https://leanpub.com/help">Markdown format</a>.  With it, I was able to write in my favorite text editor, (Emacs of course), commit and push my changes to my git repo, and then generate PDF and e-book formats.  The multiple formats were important to me because it allowed me to share my chapters and get feedback.</p>

<h2>Tools for Feedback</h2>

<p>Since I was writing a book with my daughter in mind, the most important feedback was from her.  After every chapter was done.  I would either print her out a copy or download it to her Kindle for review.  She actually really enjoyed reading it on her Kindle because it made it for more <em>real</em> to her.  My son also got interested in the story and before long, I had them both getting in heated debates about which direction the story should go.</p>

<p>After my kids reviewed the chapters, I also sought some professional writing advice from a free-lance editor.  I highly recommend getting this sort of feedback from an editor, writing group, or trusted friend to help you grow and improve. The one catch is that most of the writing world works with Microsoft Word, so I needed to convert my chapters to that format.</p>

<p>From my experience, all PDF to Word converters are full of fail.  The formatting goes all over the place and your writing ends up looking like some horrible abstract text art experiment gone wrong.  So far, the best converter I&rsquo;ve found is <a href="http://pandoc.org/">pandoc</a>.  It allows you to take your Markdown files and turn them into quite presentable Word documents.</p>

<p>If you have a Mac, it&rsquo;s as simple as <code>brew install pandoc</code>.  Then, you can create a simple script to convert all your chapters,(or a selection) into a properly formatted Word Doc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>rm ./all.md
</span><span class='line'>for i in `cat ./Book.txt`; do  cat $i &gt;&gt; all.md; echo "  " &gt;&gt; all.md ; done
</span><span class='line'>pandoc -o all.docx -f markdown -t docx ./all.md</span></code></pre></td></tr></table></div></figure>


<p>Once you write your manuscript, (what the publishing world calls your book text), revise it, copy edit it, and walk backwards in a circle three times, you&rsquo;re ready to publish.</p>

<h2>Tools for Publishing</h2>

<p>I don&rsquo;t have any real firm advice in this area yet since I&rsquo;m still in the midst of it, but I&rsquo;ll share the two options that I&rsquo;m looking at &ndash; traditional publishing and self publishing.</p>

<p>Self publishing is more easily understood of the two.  You can put your book up for sale at any time through Leanpub or Amazon.  For better or worse, you have complete control of the content, display, marketing, and revenue of your book.</p>

<p>Traditional publishing involves finding an literary agent and/or publisher to work with.  This route involves pitching your manuscript to someone to represent it through a <a href="http://nybookeditors.com/2015/12/how-to-write-a-darn-good-query-letter/">query</a>.  The advantages of this are that, (if you find a good match), you will have a team of people helping you make your book the best it can be and have the possibility of getting it on the shelf in a bookstore.  One of the downsides is that the traditional publishing world takes a lot longer than pushing the self publish button.</p>

<p>With any luck, I&rsquo;ll have a clearer picture of this all in a bit and be able to share my experiences.  In the meantime, I encourage you to grab your keyboard and bring your book ideas to life.</p>

<p>No matter the outcome, it&rsquo;s a rewarding journey.</p>
]]></content>
  </entry>
  
</feed>
