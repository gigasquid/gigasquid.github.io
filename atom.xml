<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2014-07-27T20:30:10-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cljoure X-Men]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/27/cljoure-x-men/"/>
    <updated>2014-07-27T20:12:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/27/cljoure-x-men</id>
    <content type="html"><![CDATA[<p><img src="https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg"></p>

<p>Nobody knows how it happened.  Some people think it was due to the rapid expansion and adoption of Clojure.  Other people say that the language itself was caused by something deeper and more magical.  No one knows for sure.  All that we really know is that people starting being born with extraordinary powers.  Powers that no human had had before.  They were strange and unique to each person they touched.  The only thing that they all had in common, was that each was an aspect of the Clojure programming language.</p>

<h2>Luke (AKA Lazy Luke)</h2>

<p>Luke was a teenager when his powers came to him.  His mother always complained that he was lazy.  It was true, he did prefer to sleep until noon.  He also had a habit of putting everything off to the last minute, like saving all his papers for the night before they were due.  One day, though, he noticed something very strange.  He could start to see the future.  Well not really “see” it.  But he could see the infinite possibilities  of the future.  Not very far into the future, but enough.  It was a few milliseconds at first.  But now it was up to a full second.  He checked the Clojure Docs as soon as he realized his gift.  It was lazy evaluation and power to deal with infinite sequences.</p>

<h2>Spress</h2>

<p>Spress, whose real name is Emily, came into her power early.  She was
only 5 years old.  Her mother had taken her to a farm to visit with
the animals.  Her mother had pointed at the cow and told her daughter
that it said “Moo”.  Then, at the horse, saying “Neigh”.  Spress
smiled and  pointed at a bucket and said “cow”.  Her mother shook her head at her, but Spress only smiled bigger.  She said “cow” again.  Then, suddenly, the bucked went “Moo”.  She was immediately taken to the Clojure X-Men school, where they identified her power as protocols.  She trained her power and now is so good at solving the “expression problem”, she is known as “Spress”.</p>

<h2>Multi</h2>

<p>Nobody knows Multi’s background.  He came to notice in his early twenties with his powers.  Ordinary humans process sensory input, (like sight, touch, and sound), in an asynchronous fashion.  However, when it gets processed in the brain, it runs into a single pipeline bottleneck  &ndash; consciousness.  Multi’s power is that he can concurrently process his higher level consciousness and reasoning to all this sensory input.  The result is that he can move, think, and perform super fast  and in a super smart way.
He got the power of Clojure’s concurrency.</p>

<h2>Dot</h2>

<p>Dot always had a way with animals.  She had many pets growing up.  Later, she would go into the forest and the animals would seek her out.  She would be found resting by a tree surrounded by deer and birds.  One time, on her walk, she fell down a ditch and had her leg trapped under a log.  Her mother arrived, after searching for her, to see a Bear reach down and gently remove the log.   She stood dumbfounded, as her daughter thanked the bear and it nodded in reply as it turned away.   She could talk with animals effortlessly.  She had the power of Clojure’s Interop.</p>

<h2>Bob</h2>

<p>Bob is the leader of the Clojure X-Men.  He seeks out people with the
power of Clojure and helps train and educate them.  He also is the
most powerful.  He can come into any argument, problem, or challenge
and immediately separate out what is most important to focus on.  He
always knows the right thing to do, without getting bogged down in
unnecessary details .  His power is Clojure’s simplicity.</p>

<p>There might be others out there, we don’t know.  We can only hope, that they are found by Bob and the Clojure X-Men and use their powers for good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love Songs Through History and Why You Should Create]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/06/love-songs-through-history-and-why-you-should-create/"/>
    <updated>2014-07-06T19:52:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/06/love-songs-through-history-and-why-you-should-create</id>
    <content type="html"><![CDATA[<p><img src="http://news.nationalgeographic.com/news/2001/02/lovesong.gif"></p>

<h2>The Earliest Known Love Song</h2>

<p>The earliest known love song was found in an <a href="http://news.nationalgeographic.com/news/2001/02/0213_1stlovesong.html">Egyptian tomb</a>.  The
fragment found in the 4,300 year old tomb read:</p>

<pre><code>I love and admire your beauty. I am under it.
</code></pre>

<h2>Medieval Love Songs</h2>

<p><img src="http://www.luminarium.org/medlit/manasseh.jpg"></p>

<p>Moving forward in history to Medieval times, there are many examples
of love songs. One of them from a great composer in the 14th century,
named <a href="http://public.wsu.edu/~brians/love-in-the-arts/medieval.html">Guillaume de Machaut</a>:, went something like
this:</p>

<pre><code>You are the true sapphire
that can heal and end all my sufferings,
the emerald which brings rejoicing,
the ruby to brighten and comfort the heart.
</code></pre>

<h2>Love Songs from this Summer</h2>

<p><img src="http://upload.wikimedia.org/wikipedia/en/8/8d/Coldplay_-_A_Sky_Full_of_Stars_%28Single%29.png"></p>

<p>Love songs abound on the radio and internet today. One was
released by Coldplay recently, called &ldquo;A Sky Full of Stars&rdquo;.
The lyrics go something like this:</p>

<pre><code>Cause you're a sky
Cause you're a sky full of stars
I'm going to give you my heart
Cause you're a sky
Cause you're a sky full of stars
And cause you light up the path
</code></pre>

<h2>Why Create?</h2>

<h3>I have nothing to say that has not been said</h3>

<p>These are the whispering excuses that I hear in the back of my head when
I sit down at a blank text editor:</p>

<ul>
<li>Someone has already said this.</li>
<li>Someone has already built this algorithm.</li>
<li>Someone has already built this library.</li>
<li>I have nothing to say that has not been said before.</li>
</ul>


<h3>But it has not been said by you.</h3>

<p>Love is a universal human emotion.  We have evidence that people have
been writing about it and singing about it for at least 4,000 years.</p>

<p>Hasn&rsquo;t everything already been said about it?</p>

<p>No.</p>

<p>We still want to hear it again.  We still want to hear it new, said by
another. It means something slightly different, feels different
when said again by someone else with different experiences, from a
different life, from a different perspective..</p>

<p>The same goes for your writing, your code, your library, and your creation.</p>

<p>So open up your favorite editor and brush aside your fears. It is a
blank canvas, ready for your thoughts and code.</p>

<p>Say it loud</p>

<p>Say it strong</p>

<p>Create</p>

<p>Don&rsquo;t worry if it has been said before</p>

<p>It is new because it is said by you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of the Star Programming Language]]></title>
    <link href="http://gigasquid.github.io/blog/2014/06/11/a-taste-of-the-star-programming-language/"/>
    <updated>2014-06-11T10:38:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/06/11/a-taste-of-the-star-programming-language</id>
    <content type="html"><![CDATA[<p>A while ago, I was <a href="http://gigasquidsoftware.com/blog/2013/05/01/growing-a-language-with-haskell-and-instaparse/">exploring creating a programming language with
Instaparse</a>.
I ended up exploring some concepts of Speech Acts proposed by John
McCarthy by creating my first toy language called
<a href="http://gigasquidsoftware.com/blog/2013/06/04/babar-a-little-language-with-speech-acts-for-machines/">Babar</a>.
Shortly after posting a blog about it, I got an email from someone
saying that I might be interested in a full blown, real programming
language that also incorporated Speech Acts.  I happily started
composing an reply to the email that started off with</p>

<pre><code>That is so cool! ...
</code></pre>

<p>Then I realized that the author of the email and language was none
other than
Frank McCabe,
one of the designers of the
<a href="http://bit.ly/1pJtG0x">Go! programming language</a>
(not to be confused with Google Go).  My brain froze
while it was thinking</p>

<pre><code>"OMG!!!! Frank McCabe, a real language designer, just emailed me!".
</code></pre>

<p>This unfortunately, made the rest of my email reply sound something like
this</p>

<pre><code>Frank,
That is so cool!  herp derp derp Speech Acts herp derp John
McCarthy derp...
</code></pre>

<p>His programming language is the Star
Programming Language.  It was originally developed for use at a company that he
worked at called Starview.  It has since been open sourced and moved
to <a href="https://github.com/fmccabe/star">git</a>.  I finally had a bit a
spare time and I had been itching to give
Star a look.  To my pleasant surprise, despite my initial fumbling
email impression,  Frank was open a friendly to
get me started in it.
I have only scratched the surface in exploring the language, but I
wanted to share my initial impressions, as well as point you to some
<a href="https://github.com/gigasquid/star-lang-katas">beginner katas</a> that I
put together, so that you could join in the fun.</p>

<h2>Crash Overview</h2>

<p>Star is a strongly typed, functional language. It is not a pure
functional language because is allows assignment and stateful objects,
but the language is designed in a way that immutable functional
programming is encouraged. The feel of the language is concise but
human readable.</p>

<blockquote><p>Star is a coherent, general-purpose programming language that<br/>    combines elements from a wide variety of existing languages as<br/>    well as adding innovative elements of its own. Star inherits func-<br/>    tional programming in general, a Haskell-style type system, an F#-<br/>    style monad for parallel computations, and Concurrent ML for or-<br/>    chestrating concurrent and parallel applications.</p><footer><strong>Feel different on the Java platform: the star programming language</strong> <cite><a href='http://dl.acm.org/citation.cfm?id=2500837&dl=ACM&coll=DL&CFID=354902651&CFTOKEN=90319052'>dl.acm.org/&hellip;</a></cite></footer></blockquote>


<h3>Hello World</h3>

<p>The best way to get a feel for it is to look at a few examples.  Of
course, let&rsquo;s start off with Hello World.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span><span class="nb">()</span> <span class="kr">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way of doing our Hello World is in a worksheet.
This feature is still in the works, but it will likely turn into a
replacement for a REPL, being integrated into the editor.  The import
statement will also soon not be required.  But a nice feature of using
the worksheeet is that is a combined module and transcript of the
session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">worksheet</span>
</span><span class='line'>
</span><span class='line'><span class="nf">worksheet</span><span class="p">{</span>
</span><span class='line'>  <span class="n">show</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what the output looks like:</p>

<pre><code>Jun 11, 2014 11:21:09 AM  
INFO: "hello world" -&gt; "hello world" at 4
info: execution took 0.053684428
</code></pre>

<h3>Pattern Matching</h3>

<p>Let&rsquo;s take a look at another example.  This time a naive fib function
with pattern matching.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">import</span> <span class="nn">worksheet</span>
</span><span class='line'>
</span><span class='line'><span class="nf">worksheet</span><span class="p">{</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="n">is</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">is</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="n">is</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="ow">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="ow">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="ow">=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="n">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="ow">=</span><span class="mi">55</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the fib function is defined with pattern matching.  Also
how the keyword &ldquo;is&rdquo; is used instead of an &ldquo;=&rdquo; to make the code flow
more readable (IMO).</p>

<p>The output of running the program is:</p>

<pre><code>Jun 11, 2014 3:32:38 PM  
INFO: fib(0) = 0 ok at 9
Jun 11, 2014 3:32:38 PM  
INFO: fib(1) = 1 ok at 10
Jun 11, 2014 3:32:38 PM  
INFO: fib(3) = 2 ok at 11
Jun 11, 2014 3:32:38 PM  
INFO: fib(10) = 55 ok at 12
info: execution took 0.039725132
</code></pre>

<h3>Pattern Matching with Guards</h3>

<p>The declaration of pattern matching for functions can also include
guards like in this fizzbuzz example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fizzbuzz</span> <span class="n">has</span> <span class="kr">type</span> <span class="p">(</span><span class="n">integer</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">string</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">3</span><span class="ow">=</span><span class="mi">0</span> <span class="n">and</span> <span class="kt">N</span><span class="o">%</span><span class="mi">5</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;fizzbuzz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">3</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;fizz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">where</span> <span class="kt">N</span><span class="o">%</span><span class="mi">5</span><span class="ow">=</span><span class="mi">0</span> <span class="n">is</span> <span class="s">&quot;buzz&quot;</span>
</span><span class='line'><span class="nf">fizzbuzz</span><span class="p">(</span><span class="kt">N</span><span class="p">)</span> <span class="kr">default</span> <span class="n">is</span> <span class="s">&quot;$N&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also note the type declaration.  The type declaration is optional.
The complier is smart enough to figure it out.  Sometimes it is more
readable to include the type declaration.  But, it can be left out for
more concise code.</p>

<h3>Cons Lists</h3>

<p>One of the important collection types are cons lists. These are lists
that you add to the front of and are destructed as the first element
and then the rest of the list. To construct a cons list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">testNumbers</span> <span class="n">is</span> <span class="n">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="p">;</span><span class="mi">5</span><span class="p">;</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="p">;</span><span class="mi">8</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span><span class="mi">10</span><span class="p">;</span><span class="mi">11</span><span class="p">;</span><span class="mi">12</span><span class="p">;</span><span class="mi">13</span><span class="p">;</span><span class="mi">14</span><span class="p">;</span><span class="mi">15</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a cons list in a function with pattern matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">listFizzBuzz</span> <span class="n">has</span> <span class="kr">type</span> <span class="p">(</span><span class="n">cons</span> <span class="kr">of</span> <span class="n">integer</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">cons</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'><span class="nf">listFizzBuzz</span><span class="p">(</span><span class="n">nil</span><span class="p">)</span> <span class="n">is</span> <span class="n">nil</span>
</span><span class='line'><span class="nf">listFizzBuzz</span><span class="p">(</span><span class="n">cons</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xs</span><span class="p">))</span> <span class="n">is</span> <span class="n">cons</span><span class="p">(</span><span class="n">fizzbuzz</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">listFizzBuzz</span><span class="p">(</span><span class="n">xs</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function listFizzBuzz takes in a list of integers and turns it
into a list of strings using the fizzbuzz function. If we evaluate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">testNumbers</span> <span class="n">is</span> <span class="n">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="mi">3</span><span class="p">;</span><span class="mi">4</span><span class="p">;</span><span class="mi">5</span><span class="p">;</span><span class="mi">6</span><span class="p">;</span><span class="mi">7</span><span class="p">;</span><span class="mi">8</span><span class="p">;</span><span class="mi">9</span><span class="p">;</span><span class="mi">10</span><span class="p">;</span><span class="mi">11</span><span class="p">;</span><span class="mi">12</span><span class="p">;</span><span class="mi">13</span><span class="p">;</span><span class="mi">14</span><span class="p">;</span><span class="mi">15</span><span class="p">}</span>
</span><span class='line'><span class="nf">result</span> <span class="n">is</span> <span class="n">listFizzBuzz</span><span class="p">(</span><span class="n">testNumbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result will look like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">cons</span> <span class="kr">of</span> <span class="p">{</span><span class="s">&quot;1&quot;</span><span class="p">;</span><span class="s">&quot;2&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;4&quot;</span><span class="p">;</span><span class="s">&quot;buzz&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;7&quot;</span><span class="p">;</span><span class="s">&quot;8&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;buzz&quot;</span><span class="p">;</span><span class="s">&quot;11&quot;</span><span class="p">;</span><span class="s">&quot;fizz&quot;</span><span class="p">;</span><span class="s">&quot;13&quot;</span><span class="p">;</span><span class="s">&quot;14&quot;</span><span class="p">;</span><span class="s">&quot;fizzbuzz&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are other collection types such as arrays and relations, (which
are really cool &ndash; you can do queries on them like a database), but I haven&rsquo;t explored them well enough to really
talk about yet.</p>

<h3>Actors and Speech Acts</h3>

<p>Star has actors that use three Speech Acts: Notify, Request, and
Query.  The actors themselves can also be concurrent. I explored the
Speech Act/ Actor model with an example from John McCarthy&rsquo;s
<a href="http://www-formal.stanford.edu/jmc/elephant/elephant.html">Elephant 2000 paper</a>,
which is a Airline Reservation system.</p>

<p>To use the notify speech act, you need to define what type the
notifications are on the actors channel.  In my case, the
notifications are either going to be a book(string) method, or a
cancel(string) method.  To book a reservation for a person or cancel
it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">type</span> <span class="n">tx</span> <span class="n">is</span> <span class="n">book</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="n">or</span> <span class="n">cancel</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actor is defined using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">flight</span><span class="p">((</span><span class="kt">FlightName</span> <span class="n">has</span> <span class="kr">type</span> <span class="n">string</span><span class="p">),</span> <span class="p">(</span><span class="kt">MaxPeople</span> <span class="n">has</span> <span class="kr">type</span> <span class="n">integer</span><span class="p">))</span> <span class="n">is</span> <span class="n">actor</span><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">flightStatus</span> <span class="kt">:=</span> <span class="s">&quot;open&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setFlightStatus</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="kr">do</span> <span class="p">{</span> <span class="n">flightStatus</span> <span class="kt">:=</span> <span class="n">s</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">do</span>
</span><span class='line'>        <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span><span class="s">&quot;booking $pname on #FlightName&#39;s flight: max #MaxPeople current $(size(plist))&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">size</span><span class="p">(</span><span class="n">plist</span><span class="p">)</span> <span class="o">&lt;</span> <span class="kt">MaxPeople</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">extend</span> <span class="n">plist</span> <span class="n">with</span> <span class="n">pname</span><span class="p">;</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">size</span><span class="p">(</span><span class="n">plist</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="kt">MaxPeople</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;sorry .. the flight is full&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">book</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">where</span> <span class="n">flightStatus</span> <span class="o">!=</span> <span class="s">&quot;open&quot;</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">logMsg</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;sorry .. the flight is no longer open&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on</span> <span class="n">cancel</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span> <span class="kr">do</span>
</span><span class='line'>      <span class="n">delete</span> <span class="p">(</span><span class="kt">X</span> <span class="kr">where</span> <span class="kt">X</span> <span class="ow">=</span> <span class="n">pname</span><span class="p">)</span> <span class="kr">in</span> <span class="n">plist</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">getPassengerList</span> <span class="n">has</span> <span class="kr">type</span> <span class="nb">()</span> <span class="ow">=&gt;</span> <span class="n">list</span> <span class="kr">of</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="n">getPassengerList</span><span class="nb">()</span> <span class="n">is</span> <span class="n">plist</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is some extra things in the code, but for right now, look at the
book and cancel methods.  These are the functions that will be called
when the actor is notified like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kt">F</span> <span class="n">is</span> <span class="n">flight</span><span class="p">(</span><span class="s">&quot;flight123&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nf">notify</span> <span class="kt">F</span> <span class="n">with</span> <span class="n">book</span><span class="p">(</span><span class="s">&quot;Carin&quot;</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span>
</span><span class='line'><span class="nf">notify</span> <span class="kt">F</span> <span class="n">with</span> <span class="n">book</span><span class="p">(</span><span class="s">&quot;Bob&quot;</span><span class="p">)</span> <span class="n">on</span> <span class="kt">Tx</span>
</span></code></pre></td></tr></table></div></figure>


<p>To query the actor we use :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">x</span> <span class="n">is</span> <span class="n">query</span> <span class="kt">F&#39;s</span> <span class="n">getPassengerList</span> <span class="n">with</span> <span class="n">getPassengerList</span><span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a request with the actor we use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'> <span class="n">request</span> <span class="kt">F&#39;s</span> <span class="n">setFlightStatus</span> <span class="n">to</span> <span class="n">setFlightStatus</span><span class="p">(</span><span class="s">&quot;closed&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Go Explore</h2>

<p>I have only scratched the surface of the language, but I have had a
great time.  I invite you to come take a look.</p>

<p>Warning.  Only the brave need apply.  There is no StackOverflow.
There is no user group or IRC channel yet.  These are green fields to
be discovered in the Open Source world.  If it appeals to you as much
as me, jump on in.  Here are a few resources to get you going:</p>

<ul>
<li><p><a href="https://github.com/gigasquid/star-lang-katas">Star-Lang Katas</a>:
Clone the repo or fork the repos.  It has a shell script
to compile and run the star programs.  It also has a emacs mode
plugin and a reference pdf. The most important part is that it has a
template of katas ready for your to solve.  Your challenge:
uncomment the assertion and make the code pass.  My solutions are in
the solutions branch when you are done.  If you finish all of them
and want more, consider creating some and submitting a pull request :)</p></li>
<li><p>I mentioned it earlier, but there is a great overview paper on the
language itself
<a href="http://www.deinprogramm.de/sperber/papers/star.pdf">here</a>.</p></li>
<li><p>Finally, here is the repo of the Star Language itself
<a href="https://github.com/fmccabe/star">https://github.com/fmccabe/star</a>.
Checkout out the tests.  There are tons of sample star programs
that cover the language&rsquo;s features.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[World Domination with Hexapods and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure/"/>
    <updated>2014-03-20T21:00:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure</id>
    <content type="html"><![CDATA[<p>Once you have your <a href="http://gigasquidsoftware.com/blog/2014/03/19/walking-with-hexapods/">hexapod assembled and running using the hand held
controller</a>,
of course, your thoughts naturally turn to world domination.</p>

<h2>The most powerful tool in the world is the Clojure REPL</h2>

<p>World domination requires the most powerful tools available.  That of
course calls for Clojure and the Clojure REPL.  I recommend Emacs
as the editor of choice of such an endeavor.  However, it if you are
content with city, state, or single country domination, other editors
that support Clojure are also fine.</p>

<h2>Connect the XBee to your computer</h2>

<p>First, we need to get the computer to talk to the hexapod wirelessly.
We can do this with a <a href="http://www.trossenrobotics.com/uartsbee">USB to Serial adapter</a>
that uses the paired XBee from the handheld commander.</p>

<p>Take the XBee from the handheld commander</p>

<p><img src="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg"></p>

<p>and move it to the USB to serial adapter</p>

<p><img src="http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg"></p>

<p>Now plug the usb into your computer.</p>

<h2>Get your Clojure ready</h2>

<p>In your clojure project, the only magic you need is the <a href="https://github.com/samaaron/serial-port">Serial Port library</a>. Import the library and list your serial ports.  Then open the one that shows up for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">clj-hexapod.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">serial-port</span> <span class="ss">:as</span> <span class="nv">serial</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Use this command to see what port your serial port</span>
</span><span class='line'><span class="c1">;; is assinged to</span>
</span><span class='line'><span class="p">(</span><span class="nf">serial/list-ports</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; replace the USB0 with whater it shows</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">port</span> <span class="p">(</span><span class="nf">serial/open</span> <span class="s">&quot;/dev/ttyUSB0&quot;</span> <span class="mi">38400</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we are going to be talking to the hexapod.  We need to send the commands in the same format that it is expecting. Basically, a packet of where the postions of the joystick are, as well as what buttons are pushed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">checksum</span> <span class="p">[</span><span class="nv">v</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">- </span><span class="mi">255</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">v</span><span class="p">))</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">vec-&gt;bytes</span> <span class="p">[</span><span class="nv">v</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">byte-array</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">%</span> <span class="p">(</span><span class="nf">Integer.</span><span class="p">)</span> <span class="p">(</span><span class="nf">.byteValue</span><span class="p">)</span> <span class="p">(</span><span class="nf">byte</span><span class="p">))</span> <span class="nv">v</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">build-packet</span> <span class="p">[</span><span class="nv">r-vert</span> <span class="nv">r-horz</span> <span class="nv">l-vert</span> <span class="nv">l-horz</span> <span class="nv">buttons</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">255</span> <span class="c1">;header</span>
</span><span class='line'>   <span class="nv">r-vert</span>
</span><span class='line'>   <span class="nv">r-horz</span>
</span><span class='line'>   <span class="nv">l-vert</span>
</span><span class='line'>   <span class="nv">l-horz</span>
</span><span class='line'>   <span class="nv">buttons</span>
</span><span class='line'>   <span class="mi">0</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">checksum</span> <span class="p">[</span><span class="nv">r-vert</span> <span class="nv">r-horz</span> <span class="nv">l-vert</span> <span class="nv">l-horz</span> <span class="nv">buttons</span><span class="p">])])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">send </span><span class="p">[</span><span class="nv">packet</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">serial/write</span> <span class="nv">port</span> <span class="p">(</span><span class="nf">vec-&gt;bytes</span> <span class="nv">packet</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, we can simply make functions for the joystick controls to go up and down</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;values between 129-254</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">up </span><span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;joystick up for speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">good-range?</span> <span class="nv">speed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">+ </span><span class="mi">129</span> <span class="p">(</span><span class="nb">* </span><span class="mi">125</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">speed</span> <span class="mf">100.0</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">CENTER</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;values between 0 and 125</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">down </span><span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;joystick down speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">good-range?</span> <span class="nv">speed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">- </span><span class="mi">125</span> <span class="p">(</span><span class="nb">* </span><span class="mi">125</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">speed</span> <span class="mf">100.0</span><span class="p">))))</span>
</span><span class='line'>    <span class="nv">CENTER</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can do things like walk, turn, and change the gait</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-forward</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk forward speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-backwards</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk backwards speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-right</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk-left</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;walk right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">turn-right</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;turn right speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">up </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">turn-left</span> <span class="p">[</span><span class="nv">speed</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;turn left speed between 1-100&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="p">(</span><span class="nb">down </span><span class="nv">speed</span><span class="p">)</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">change-gait</span> <span class="p">[</span><span class="nv">gait-key</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">gait-num</span> <span class="p">(</span><span class="nf">gait-key</span> <span class="nv">gaits</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">gait-num</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">stop</span> <span class="p">[]</span>
</span><span class='line'>  <span class="s">&quot;stop hexapod&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">send </span><span class="p">(</span><span class="nf">build-packet</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="nv">CENTER</span> <span class="mi">0</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can control it from the REPL with some simple commands</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">walk-forward</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-backwards</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-right</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">walk-left</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">turn-right</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">turn-left</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:ripple-smooth</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:tripod-normal</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:ripple</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">change-gait</span> <span class="ss">:amble</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">stop</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to see the code, it is out on github as <a href="https://github.com/gigasquid/clj-hexapod">clj-hexapod</a>.  Please keep in mind that it is early days still, and I am still just exploring.</p>

<h2>Phoneix Code Firmware</h2>

<p>It is worth noting the the above code was meant to run with the default hexapod firmware.  That is the &ldquo;Nuke&rdquo; firmware.  There is another firmware, the <a href="https://github.com/KurtE/Arduino_Phoenix_Parts">Phoenix code</a>, that gives the hexapod more lifelike moves and allows it to twist and shift is rather creepy ways.</p>

<p>I just loaded it on the hexapod yesterday.  The commander software changed too, so I will of course need to revisit the code, to add in the new moves.  But here is a sneak preview of what it can do:</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('PmBGt9T-yvI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/PmBGt9T-yvI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/PmBGt9T-yvI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=PmBGt9T-yvI" id="PmBGt9T-yvI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Hexapod with Phoenix Code</div>
</a>
<div class="video-info" ></div>
</div>


<p><em>That is my daughter singing in the background</em></p>

<h2>That&rsquo;s all for now</h2>

<p>I hope I have given you pointers for getting started on your own world domination with Clojure and Hexapods. Remember to practice your laugh &hellip;. Muhahaha :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Walking with Hexapods]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods/"/>
    <updated>2014-03-19T21:06:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods</id>
    <content type="html"><![CDATA[<p><img src="http://farm4.staticflickr.com/3804/13278398783_0bedfa7b40.jpg"></p>

<p>Here we see the <a href="http://www.trossenrobotics.com/phantomx-ax-hexapod.aspx">PhantomX Hexapod</a> thriving in the natural habitat of a
cozy, climate controlled, modern house. But there was a time before
the hexapod.  In particular, there was a time of many hexapod parts
and a high level software developer that somehow, despite her natural
lack of mechanical skills, managed to bring it to life. This blog post
endeavors to chronicle the high and low points of this journey. And
perhaps, will make it easier for any other brave souls that would like
to bring the <em>Age of Hexapods</em> into their homes.</p>

<h2>Oh My! So Many Parts</h2>

<p>I wasn&rsquo;t really mentally prepared for the vast amounts of parts in the
kit.  Here is a sampling:</p>

<ul>
<li>18 AX-12A Servos</li>
<li>Top/ Bottom Body Plate</li>
<li>20 Brackets</li>
<li>Arbotix Board</li>
<li>2 Xbees</li>
<li>Lipo Battery &amp; Charger</li>
<li>Arbotix programmer</li>
<li>19 Cables</li>
<li><strong>50,000 nuts and screws </strong> (Really only about 850 &ndash; but you get my
 point)</li>
</ul>


<h2>First Things First</h2>

<p>The very first thing to do is to make sure that you have all the
parts.  Once I went through the checklist and double counted all my
screws, I was relieved to go onto the next task of programming the
Arbotix and assign ids to servos and center them. These steps
consisted of:</p>

<ul>
<li>Getting the Arduino IDE going</li>
<li>Loading the Drivers and Libraries</li>
<li>Loading the ROS (Robot Operating System) on the Arbotix Board, so
that it could be used to program the servos.</li>
</ul>


<p>Each of the servos have to be assigned a number. This will let the
program know which part of the leg is which, so that it will
eventually &ndash; hopefully, be able to walk. Once the id is given, a
sticker is labeled on the servo for future use. Centering the servos
is a VERY important step not to overlook.  If you do not center the
servos, you will get into the unfortunate circumstance of having to
dissemble the robot, cry, recenter the servos, and then reassemble the
robot. Please avoid.</p>

<h2>Putting It Together</h2>

<p>The assembly starts with the feet and legs first.
I was so pleased when I got the feet assembled, that I considered
knitting little baby hexapod booties.</p>

<p><img src="http://farm8.staticflickr.com/7298/13278059445_562bb9ce4b.jpg"></p>

<p>Next a servo and the tibia is added</p>

<p><img src="http://farm8.staticflickr.com/7311/13278197583_599f030bab.jpg"></p>

<p>Another servo and the tibia and femur is assembled</p>

<p><img src="http://farm8.staticflickr.com/7185/13278392294_8986c14e5b.jpg"></p>

<p>Finally, another servo and the whole leg is assembled</p>

<p><img src="http://farm8.staticflickr.com/7033/13278197683_cfd9a4870f.jpg"></p>

<h2>Newbie Advice</h2>

<p>I would like to pause for a minute to share some advice from my trial
and errors in assembly thus far:</p>

<ul>
<li><strong>Don&rsquo;t overtighten screws </strong> &ndash; More is not better. It makes things
like plexiglass frames crack and break.</li>
<li><strong>Seating nuts in servos is hard</strong> &ndash; This isn&rsquo;t really advice. Just
moral support in your struggle.  There are 18 servos and up to 20
nuts to seat in each servo.</li>
</ul>


<p><img src="http://farm4.staticflickr.com/3833/13278059175_91699a9704_n.jpg"></p>

<h2>Assembling the body</h2>

<p>The body is where the board, battery and and cables go.</p>

<p><img src="http://farm4.staticflickr.com/3755/13278197953_44717aea96.jpg"></p>

<p>At long last, the legs can be attached to the body &ndash; with 120 screws
of course.</p>

<h2>Round two of Newbie Advice</h2>

<ul>
<li>For those who have never stripped wires and attached them to power
supplies, like me, please mind that the wires are twisted so that
the edges don&rsquo;t fray out and short out everything requiring you to
re-assign all the servos that lost their ids and much unscrewing,
crying, and reassembling.</li>
<li>When programming the Arbotix board.  You must remove the Xbee, or it
will not work.</li>
<li>Also, did I mention not over-tightening screws? Also, the order in
which you tighten the screws is important too.  Try to tighten them
all loosely in order, so you don&rsquo;t stress the fiberglass parts and
have something like this happen.</li>
</ul>


<p><img src="http://farm4.staticflickr.com/3749/13278392754_cde8d9e10f_n.jpg"></p>

<h2>It is Alive!</h2>

<p>Finally, the moment of truth. The hexapod is assembled and it is time
to upload a test check on the board to make sure that everything is
working alright.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('i9St8kDuyqU');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/i9St8kDuyqU?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/i9St8kDuyqU/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=i9St8kDuyqU" id="i9St8kDuyqU" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Hexapod Test Check</div>
</a>
<div class="video-info" >It lives - the first test check of the PhantomX Hexapod</div>
</div>


<h2>Walking with Hexapods</h2>

<p>The kit comes with a commander that you assemble of course.  You can
use it to control the hexapod with hand-held joysticks.</p>

<p><img src="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg"></p>

<p>The moment of truth, when it finally took its very first steps, and the Age of Hexapods began.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('pUrZeJ39xjs');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/pUrZeJ39xjs?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/pUrZeJ39xjs/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=pUrZeJ39xjs" id="pUrZeJ39xjs" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Baby Hexapod&#8217;s first steps</div>
</a>
<div class="video-info" >First cautious steps of running the PhantomX Hexapod with wireless controller</div>
</div>


<p><em>Stay tuned for the next post of how to control the hexapod with your
Clojure code and loading the Phoenix firmware that gives it a
life-like moves</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remembering Jim]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/22/remembering-jim/"/>
    <updated>2014-02-22T11:02:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/22/remembering-jim</id>
    <content type="html"><![CDATA[<p><img src="https://newcontext-production.s3.amazonaws.com/portrait/jim-weirich/medium_78048abb24eadb2017034c5ee10826f9.jpg"></p>

<p>You don&rsquo;t really understand how important someone is in your life
until they are suddenly gone. I have had the honor and privilege of
working, playing, and laughing alongside Jim Weirich for the last few
years.  He was an amazing man.  I miss him dearly.</p>

<h2>Think</h2>

<p>Jim taught us how to think about computer programming. I once had a
Physics professor tell me not to worry so
much about the formulas and math. The most important thing was how to
<strong>think</strong>.
Everything thing after that would
naturally fall into place.  Jim embodied that philosophy for
programming.  The languages and algorithms poured almost
effortlessly from his masterful fingers.  He knew how to <strong>think</strong> about
the problem, observe from a multitude of angles.  Finally, bringing his
experience, creativity, and humility to bear on it, he would shape it into
a beautiful piece of code.</p>

<h2>Make</h2>

<p>Jim showed us how to make. He was a master craftsman and a maker. The
care and joy that infused his work was inspiring.  He loved the
process of Test Driven Development. Green tests were always a
celebration. The surprise of beautiful code emerging from a
refactoring was treated as a gift.  He is best known for his
<a href="https://github.com/jimweirich/rake">Rake</a> build tool, but his testing
library <a href="https://github.com/jimweirich/rspec-given">rspec-given</a> is
one that reminds me most of him and the way that he loved to craft code.</p>

<h2>Care</h2>

<p>Jim showed us how to care.  Jim cared deeply about each and every
person.  While flying his drone in the office hallway, he would wave
down a passing building maintenance worker and ask if they wanted to
fly it.  Over the course of the next few minutes, Jim would put them
completely at ease and chat happily with them.  He was like that to
<strong>everyone</strong>.  In the few days after
his passing, many building workers, and people from other offices, that
I only ever nodded at in passing, stopped by to give their sincere
condolences his loss. He is without a doubt, the kindest person I have
ever known.  He took great joy in his faith and in his family.  He
would talk about his family all the time and how much they enjoyed
each others company.  He is without a doubt, one of the personally richest men I have ever known.</p>

<h2>Share</h2>

<p>Jim taught us how to share. Jim wanted to share his knowledge.  He was
a great teacher and presenter. He gave engaging presentations that
took people on a journey with him, not only imparting knowledge, but
becoming friends with him in the process.  He was a pillar in the local
Cincinnati technical community. He is the reason why myself and
countless others were drawn to Ruby and the Ruby community.</p>

<h2>Dream</h2>

<p>Jim dreamed with us.  He was a creative. He was also a singer, song
writer, musician, and artist.  He brought that creative spirit,
curiosity, and love of learning to the technical world. I will cherish
our lunches spent together flying our AR Drones, sometimes crashing
them into walls and each other, while trying to find creative ways of
controlling them with code.  He was just lately exploring with the
micro-quadcopters like the
<a href="http://www.amazon.com/Estes-4606-Proto-Quadcopter-Black/dp/B00G924W98">Proto-X</a>.
We had plans to make all our Spheros, Roombas, big drones, and little
drones dance to live coded music. We were both auditing on
<a href="https://www.edx.org/course/ethx/ethx-amrx-autonomous-mobile-robots-1342">Autonomous Mobile Robots</a>
to see what we could learn to help us with our robot dreams.</p>

<p>I miss him dearly.  I will cherish my memories of him and I am so
grateful for all the ways he has enriched my life.  I will remember
that when I dream in code, he is still there with me.</p>

<p>Until that day when we will fly our friendly robots together again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Clojure has a New Home]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home/"/>
    <updated>2014-02-16T14:57:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home</id>
    <content type="html"><![CDATA[<p>The Hitchhiker&rsquo;s Guide to Clojure posts now have a new home to make it
easier to read them in a chronological fashion.</p>

<p><a href="http://hitchhikersclojure.com/">http://hitchhikersclojure.com/</a></p>

<p>There is also a public <a href="https://github.com/gigasquid/hitchhikers-clojure">repo</a> &ndash; feel free to contribute spelling and
grammar fixes, or your great ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Guide to Clojure - Part 3]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/15/hitchhikers-guide-to-clojure-part-3/"/>
    <updated>2014-02-15T13:48:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/15/hitchhikers-guide-to-clojure-part-3</id>
    <content type="html"><![CDATA[<p>Amy and Frank fled down the stairs from her office and met an
unexpected obstacle to their exit, a locked door.  As
they peered out the window, they saw yesterday&rsquo;s Amy pull up in the
parking space, get out, retrieve her laptop, and start to head in
the front door.</p>

<p>&ldquo;Oh good, we can take your car&rdquo;, said Frank.</p>

<p>Amy took a second to recover from the shock of seeing what her hair really
looked like from behind and then asked, &ldquo;But, how can we get to it?
The door is locked, and we
can&rsquo;t go back up to the office&hellip; I would meet myself.&rdquo;</p>

<p>Frank smiled, pulled out the <em>Hitchhiker&rsquo;s Guide to Clojure</em> and
pulled up a page with the heading <em>Locked Doors and Other Small
Bothers</em>.</p>

<p><img src="http://farm4.staticflickr.com/3346/3191331375_a773bff1b7_n.jpg"></p>

<p><em>One of the reasons for the surprising success of <strong>The Hitchhiker&rsquo;s Guide
to Clojure</strong> is helpful advice of on an assortment of practical
matters.</em></p>

<p><em>Locked doors are a common nuisance in modern times.  Fortunately,
Clojure provides a very handy function for such occasions, <a href="http://clojuredocs.org/clojure_core/1.2.0/clojure.core/fnil">fnil</a>.
This commonly overlooked function, takes an existing function and
returns a new function that allows you to specify a default
for a nil parameter. For example, take this locked door:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">locked-door</span> <span class="p">[</span><span class="nv">key</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="nb">key </span><span class="s">&quot;open&quot;</span> <span class="s">&quot;nope - staying shut&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">locked-door</span> <span class="ss">:key</span><span class="p">)</span> <span class="c1">;=&gt; &quot;open&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">locked-door</span> <span class="nv">nil</span><span class="p">)</span> <span class="c1">;=&gt; &quot;nope - staying shut&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>In this case, the simple application of fnil will help remove this
pesky obstacle.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">this-door</span> <span class="p">(</span><span class="nf">fnil</span> <span class="nv">locked-door</span> <span class="ss">:another-key-that-works</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">this-door</span> <span class="ss">:key</span><span class="p">)</span> <span class="c1">;=&gt; &quot;open&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">this-door</span> <span class="nv">nil</span><span class="p">)</span> <span class="c1">;=&gt; open</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Please be advised, that some doors are locked for a good reason. It
is left to the user&rsquo;s discretion. But it is highly recommended in Norway&rsquo;s
moose regions, to think twice.</em></p>

<p>They unlocked the door and headed for Amy&rsquo;s car.  She couldn&rsquo;t decide
whether she was surprised or not to find her keys in her pocket, so
she gave up and just got in instead.  After a short drive, they
arrived at the zoo and navigated their way through various
school groups and arrive at the Aquarium.</p>

<p>Amy at this point, having prided herself on her adaptable nature, was
still having trouble processing the latest events. She had
discovered that Frank was a Datomic time traveller,  the  world was
made of Clojure, and it was also about to be destroyed in a short
future that she just came from.  Her rational brain, (which was
currently working way too hard), was quite
relieved to be distracted by the sight of two really adorable otters.  They were floating
contentedly around the pool, occasionally stopping to crack an Abalone
shell on their fuzzy tummies.</p>

<p><img src="http://cdn.zmescience.com/wp-content/uploads/2012/09/sea-otters.jpg"></p>

<p>Her rational brain, after having a nice breather, finally re-asserted
itself and made Amy ask Frank:</p>

<p>&ldquo;Why are we here?&rdquo;</p>

<p>&ldquo;Otters are the front-line Chrono-guards, of course.&rdquo;</p>

<p>He went on to explain that otters are tasked with the important job of
keeping a close watch on human civilization and making critical, minor
adjustments to keep things on an even track.  All those nature videos
of otters cracking shells with rocks?  They are really evaluating
Clojure expressions crucial to our way of life. Most of the time, they
prefer to do their work remote.  They find floating on their backs in
the peaceful waters the most productive work environment.  However,
sometimes they will construct zoos or aquariums, when their work
requires them to keep a closer watch on some areas.  In times of great
need, they might even take a human form for a short while.  Recently,
one of their agents was inadvertently
<a href="https://i.chzbgr.com/maxW500/6003866624/h0B1E03BF/">exposed</a> and
required a few extra Abalone shells to straighten out.</p>

<p>Frank opened his pack and handed his evaluator to Amy to hold
while fished out four mini-marshmallows.  He gave two to Amy and then
proceeded to put one in his ear and the other in his mouth.  More
remarkably still, he appeared to be speaking with the otters.</p>

<p><em>Mini-marshmallows are the best way to create portable Clojure
<a href="https://github.com/clojure/core.async">core.async</a> channels that
won&rsquo;t melt in your hands.</em></p>

<p><em>To construct a channel simply use <em>chan</em></em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">talk-to-otters-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Channels by default are unbuffered, which keeps them at the
mini-marshmallow size.  It requires a rendezvous of a channel producer
and consumer to communicate.  In the case of otters, someone to talk to
the otters and the otters, themselves, to listen. Be advised that with
a regular blocking put <strong>>!!</strong>, the main thread will be blocked.
That is, if you try to speak to the otter, you will be stuck there
until it gets around to listening. This isn&rsquo;t the best case for the talker if the
otter was busy, so one approach would be to use a
<a href="http://clojuredocs.org/clojure_core/clojure.core/future">future</a> to
talk to the otter with a blocking put <em>>!!</em>.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Hello otters.&quot;</span><span class="p">))</span> <span class="c1">;=&gt;#&lt;Future@3c371c41: :pending&gt;</span>
</span><span class='line'><span class="p">(</span><span class="nf">&lt;!!</span> <span class="nv">talk-to-otters-chan</span><span class="p">)</span> <span class="c1">;=&gt; &quot;Hello otters.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One could also use a buffered channel, but that increases the size of
the marshmallow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">talk-to-otters-chan</span> <span class="p">(</span><span class="nf">chan</span> <span class="mi">10</span><span class="p">))</span> <span class="c1">;;create channel with buffer size 10</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Hello otters.&quot;</span><span class="p">)</span> <span class="c1">;=&gt; nil</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Do you know anything about the world ending?&quot;</span><span class="p">)</span> <span class="c1">;=&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">&lt;!!</span> <span class="nv">talk-to-otters-chan</span><span class="p">)</span> <span class="c1">;=&gt; &quot;Hello otters.&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">&lt;!!</span> <span class="nv">talk-to-otters-chan</span><span class="p">)</span> <span class="c1">;=&gt; &quot;Do you know anything about the world ending?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The best way to conserve space and time is to use asynchronous
communication with <em>go</em> blocks that wont&#8217; block the threads. Inside
these go blocks one can use regular non-blocking puts <strong>>!</strong> and gets
<strong>&lt;!</strong>.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">talk-to-otters-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">go</span> <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">talk-to-otters-chan</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Hello otters&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Do you know anything about the world ending?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-to-otters-chan</span> <span class="s">&quot;Also, you are really fuzzy and cute.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; (This prints out in the REPL as you talk to the otters)</span>
</span><span class='line'><span class="nv">Hello</span> <span class="nv">otters</span>
</span><span class='line'><span class="nv">Do</span> <span class="nv">you</span> <span class="nv">know</span> <span class="nv">anything</span> <span class="nv">about</span> <span class="nv">the</span> <span class="nv">world</span> <span class="nv">ending?</span>
</span><span class='line'><span class="nv">Also</span>, <span class="nv">you</span> <span class="nv">are</span> <span class="nv">really</span> <span class="nv">fuzzy</span> <span class="nb">and </span><span class="nv">cute.</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>This compact, lightweight, and asynchronous method of communication is
well suited to conversations and messaging of all sorts, including
conversing with human, animals, and other Clojure-based life forms.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">talk-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">listen-chan</span> <span class="p">(</span><span class="nf">chan</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">go</span> <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">listen-chan</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">go</span> <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">&gt;!</span> <span class="nv">listen-chan</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">str </span><span class="s">&quot;You said: &quot;</span><span class="p">(</span><span class="nf">&lt;!</span> <span class="nv">talk-chan</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot; &quot;</span> <span class="s">&quot;Do you have any Abalone?&quot;</span> <span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-chan</span> <span class="s">&quot;Hello otters&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-chan</span> <span class="s">&quot;Do you know anything about the world ending?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">&gt;!!</span> <span class="nv">talk-chan</span> <span class="s">&quot;Also, you are really fuzzy and cute.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; (This prints out in the REPL as you talk to the otters)</span>
</span><span class='line'><span class="nv">You</span> <span class="nv">said</span><span class="err">:</span> <span class="nv">Hello</span> <span class="nv">otters</span> <span class="nv">Do</span> <span class="nv">you</span> <span class="nv">have</span> <span class="nv">any</span> <span class="nv">Abalone?</span>
</span><span class='line'><span class="nv">You</span> <span class="nv">said</span><span class="err">:</span> <span class="nv">Do</span> <span class="nv">you</span> <span class="nv">know</span> <span class="nv">anything</span> <span class="nv">about</span> <span class="nv">the</span> <span class="nv">world</span> <span class="nv">ending?</span> <span class="nv">Do</span> <span class="nv">you</span> <span class="nv">have</span> <span class="nv">any</span> <span class="nv">Abalone?</span>
</span><span class='line'><span class="nv">You</span> <span class="nv">said</span><span class="err">:</span> <span class="nv">Also</span>, <span class="nv">you</span> <span class="nv">are</span> <span class="nv">really</span> <span class="nv">fuzzy</span> <span class="nb">and </span><span class="nv">cute.</span> <span class="nv">Do</span> <span class="nv">you</span> <span class="nv">have</span> <span class="nv">any</span> <span class="nv">Abalone?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Amy put one of the mini-marshmallows in her ear.  She immediately
began to hear the conversation that Frank was having with the otters.</p>

<p>&ldquo;But who would want to destroy the entire world?  That is really kinda
over-board.&rdquo;</p>

<p>&ldquo;I don&rsquo;t really know, but there was someone on Galactic Hacker News
the other day that was quite tiffed over the idea that Clojure was considered
a Lisp.&rdquo;</p>

<p>Amy reached to put the other marshmallow in her mouth to ask a very
important question.  But unfortunately, as she moved her hand, she
accidentally pushed the big red <em>Source</em> button on the evaluator.
Suddenly, she and Frank were swept up in a vortex that spun them
around and sucked them down into the ground.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Guide to Clojure - Part 2]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/08/hitchhikers-guide-to-clojure-part2/"/>
    <updated>2014-02-08T21:20:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/08/hitchhikers-guide-to-clojure-part2</id>
    <content type="html"><![CDATA[<p>Amy and Frank were hurtled quite rapidly through time and space after
attaching themselves to a transaction headed through the
<a href="http://docs.datomic.com/transactions.html">Datomic Transactor</a>. From
there things slowed down a bit, then took a sharp left and
ricocheted off again with incredible speed until they landed in another
<a href="http://docs.datomic.com/architecture.html">Datomic Peer</a>, and finally
appeared in the same room.  Amy was quite startled by the
anti-climatic nature of the whole dematerializing and rematerializing
in the same exact spot, and didn&rsquo;t really know what to do next.  She
surveyed her office and found it exactly the same,
except for two distinct details.  For one, the pistachio shells had
disappeared, and for another, the date on the computer showed
yesterday at 8:00 am.  She tried to connect these facts rationally
with the pistachios in her pocket and finally said,</p>

<p>&ldquo;I am about to come into work.&rdquo;</p>

<p>Frank, who was busily hunting through his blue zippered pack around
his waist, looked up briefly.</p>

<p>&ldquo;Well, we better get out of here then, I only have a blue fanny pack.&rdquo;</p>

<p><img src="http://img.rakuten.com/PIC/37504308/0/1/500/37504308.jpg"></p>

<p><em>The Hitchhiker&rsquo;s Guide to Clojure explains that the &ldquo;fanny pack&rdquo;, or
&ldquo;bum bag&rdquo;, is the symbol of a licensed Chrono-agent.  The rank of the
Chrono-agent can be clearly determined by its color on the ROYGBIV
scale.</em></p>

<p><em>The origins of this licensing method can be traced to an embarrassing
incident in human history known as &ldquo;The Great Flood&rdquo;. A junior
Chrono-agent was trying to increase the yield of a tomato crop during
a dry spell and was trying to do the following recursive function in his evaluator:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">rain</span> <span class="p">[</span><span class="nv">days</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">pos? </span><span class="nv">days</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Rain: &quot;</span> <span class="nv">days</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">rain</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">days</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rain</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;Output</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 4</span>
</span><span class='line'><span class="c1">;;  Rain: 3</span>
</span><span class='line'><span class="c1">;;  Rain: 2</span>
</span><span class='line'><span class="c1">;;  Rain: 1</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Unfortunately, he made the rookie mistake of forgetting to decrement
the days before passing it to the recursive function.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">dec </span><span class="mi">5</span><span class="p">)</span> <span class="c1">;=&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The result of which was severely overwatered tomatoes.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">rain</span> <span class="p">[</span><span class="nv">days</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">pos? </span><span class="nv">days</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Rain: &quot;</span> <span class="nv">days</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">rain</span> <span class="nv">days</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rain</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  ...(you get the idea)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>It is interesting to note that he could he written the same function with a
<a href="http://clojuredocs.org/clojure_core/clojure.core/recur">recur</a> instead.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">rain</span> <span class="p">[</span><span class="nv">days</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">pos? </span><span class="nv">days</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;Rain: &quot;</span> <span class="nv">days</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span> <span class="nv">days</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rain</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;Output</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span><span class='line'><span class="c1">;;  Rain: 5</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>That would have had the nice effect of not consuming the stack, (which
is fabulous for constructing those lovely fibonacci sea shells for beach
vacations), but without decrementing the parameter in the recursive
call, it wouldn&rsquo;t have really helped.</em></p>

<p><em>A senior Chrono-agent was dispatched to sort out the mess.  By the
time he got there and stopped the rain, there was not much left to
work with. Thankfully, he was quite versed in lazy and infinite
aspects of Clojure. For instance, take this vector of 2 chickens:</em></p>

<p><img src="http://farm4.staticflickr.com/3352/3556879530_089814192c_m.jpg"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="ss">:hen</span> <span class="ss">:rooster</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>It can be transformed into an infinite lazy list of chickens by using
<a href="http://clojuredocs.org/clojure_core/clojure.core/cycle">cycle</a>.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">cycle </span><span class="p">[</span><span class="ss">:hen</span> <span class="ss">:rooster</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>What really set the senior Chrono-agent apart from his junior
colleague, was that he did not put the infinite sequence in the
evaluator. If he had, there would have been another embarrassing
incident in human history, this time involving an over-abundance of poultry. Instead, he used
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.str-utils2/take">take</a>
to get the first n infinite chickens.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">5</span> <span class="p">(</span><span class="nb">cycle </span><span class="p">[</span><span class="ss">:hen</span> <span class="ss">:rooster</span><span class="p">]))</span>
</span><span class='line'><span class="c1">;;=&gt; (:hen :rooster :hen :rooster :hen)</span>
</span><span class='line'><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="p">(</span><span class="nb">cycle </span><span class="p">[</span><span class="ss">:hen</span> <span class="ss">:rooster</span><span class="p">]))</span>
</span><span class='line'><span class="c1">;;=&gt; (:hen :rooster :hen :rooster :hen :rooster :hen :rooster :hen</span>
</span><span class='line'><span class="ss">:rooster</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>After that, the council of Chrono-agents, decided to license evaluator
use. Low-level recursion requires the 2nd highest indigo level rank.
The highest violet rank, of course, belonging only to the
<a href="http://clojure.org/macros">Macro</a> Masters. All lower levels are
required to stick to the safer, higher level abstractions like
<a href="http://clojuredocs.org/clojure_core/clojure.core/for">for</a>,
<a href="http://clojuredocs.org/clojure_core/clojure.core/map">map</a>, or
<a href="http://clojuredocs.org/clojure_core/clojure.core/reduce">reduce</a>.</em></p>

<p>Amy was still watching Frank busily rumaging through his pack in the
office . Finally
he found what he
was looking for, his hand emerging triumphantly with a fistful of
mini-marshmallows.</p>

<p>&ldquo;Got it. Come on, let&rsquo;s go! Someone is trying to destroy the world and
we need to see the otters.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Guide to Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/01/hitchhikers-guide-to-clojure/"/>
    <updated>2014-02-01T19:33:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/01/hitchhikers-guide-to-clojure</id>
    <content type="html"><![CDATA[<p><img src="http://farm6.staticflickr.com/5480/12258585125_36e8fdee1e.jpg"></p>

<p><em>The following is a cautionary example of the unpredictable
combination of Clojure, a marathon viewing of the BBC&rsquo;s series &ldquo;The
Hitchhiker&rsquo;s Guide to the Galaxy&rdquo;, and a questionable amount of
cheese.</em></p>

<p>There have been many tourism guides to the
<a href="http://clojure.org/">Clojure</a> programming language.  Some that easily
come to mind for their intellectual erudition and prose are &ldquo;The Joy
of Touring Clojure&rdquo;, &ldquo;Touring Clojure&rdquo;, &ldquo;Clojure Touring&rdquo;, and the
newest edition of &ldquo;Touring Clojure Touring&rdquo;.  However, none has
surpassed the wild popularity of &ldquo;The Hitchhiker&rsquo;s Guide to Clojure&rdquo;.
It has sold over 500 million copies and has been on the &ldquo;BigInt&rsquo;s
Board of Programming Language Tourism&rdquo; for the past 15 years. While,
arguably, it
lacked the in-depth coverage of the other guides, it made up for it in
useful practical tips, such as what to do if you find a nil in your
pistachio.  Most of all, the cover had the following words printed in
very large letters: <strong>Don&rsquo;t Worry About the Parens</strong>.</p>

<p>To tell the story of the book, it is best to tell the story of two
people whose lives were affected by it: Amy Denn, one of the last
remaining <a href="http://en.wikipedia.org/wiki/Pascal_(programming_language">Pascal</a> developers in Cincinnati, and Frank Pecan, a time
traveler, guidebook reseacher, and friend of Amy.</p>

<p>Amy, at this moment, was completely unaware of the chronological
advantages of her friend, being preoccupied with the stark fact that
she was about to be fired.  She had been given a direct order from her
CEO to deploy the code at 3:05pm.  It was now 3:00pm and she had
realized that if she did so, all the data painstaking collected about
the effects of
<a href="http://en.wikipedia.org/wiki/Tuvan_throat_singing">Throat Singing</a> on
the growth rate of tomatoes would be erased. Unfortunately, the CEO
did not really understand or trust anything having to do with
technology or programming.  In truth, the only two things that he
seemed to care about were tomatoes and checklists of unreasonable
things. The fact that no course of action available to her in the next
5 minutes would help her employment situation, agitated Amy so much
that she was violently shelling and eating pistachio nuts.</p>

<p><img src="http://farm4.staticflickr.com/3331/3659226924_fbf336379e_n.jpg"></p>

<p>The &ldquo;Hitchhiker&rsquo;s Guide to Clojure&rdquo; says that
<em>pistachios are Nature&rsquo;s
most perfect <a href="http://en.wikipedia.org/wiki/S-expression">s-expression</a>. An
s-expression is recursively composed of s-expressions or an atom.
In the case of the humble pistachio, the atom is the nut inside. The
atom simply evaluates to itself.  This is best seen is an example
where the following expressions are evaluated in the Clojure
<a href="http://tryclj.com/">REPL</a></em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="s">&quot;hi&quot;</span> <span class="c1">;;=&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="mi">1</span> <span class="c1">;;=&gt; 1</span>
</span><span class='line'><span class="nv">true</span> <span class="c1">;;=&gt; true</span>
</span><span class='line'><span class="nv">nil</span> <span class="c1">;;=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p><em>Which leads to the very practical tip of what to do if you find a nil
in your pistachio.  The answer, of course, is to be thankful that you
have a value that represents the absence of a value &ndash; and to get
another pistachio.</em></p>

<p><em>In Clojure, a s-expression is written with parens.  The first element
within the parens is an operator or function and the rest of the
elements are treated as data, some of which can be s-expression
themselves.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;;=&gt; 3</span>
</span><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">;;=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Considering the pistachio again, we can think of the nut in the shell
as an s-expression, (providing we also imagine an operator or function
right in front of the nut).</em></p>

<p><em>Here we define a function that will turn the nut red, by appending the
string &ldquo;red&rdquo; to the nut-name.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">red</span> <span class="p">[</span><span class="nv">nut</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">str </span><span class="s">&quot;red &quot;</span> <span class="nv">nut</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">red</span> <span class="s">&quot;nut1&quot;</span><span class="p">)</span> <span class="c1">;;=&gt; &quot;red nut1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Notice that if we put a quote in front of the expression, it will no
longer be evaluated.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nf">red</span> <span class="s">&quot;nut1&quot;</span><span class="p">)</span> <span class="c1">;;=&gt; (red &quot;nut1&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>quoting the expression turns it into a list, which we can then
manipulate with other s-expressions (code as data).</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">first </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">red</span> <span class="s">&quot;nut1&quot;</span><span class="p">))</span> <span class="c1">;;=&gt; red</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">last </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">red</span> <span class="s">&quot;nut1&quot;</span><span class="p">))</span> <span class="c1">;;=&gt; &quot;nut1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>If we try to evaluate the s-expression with just the nut name in the
parens, we get an error because there is no function in
the first slot.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="s">&quot;nut1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;=&gt; ClassCastException java.lang.String cannot be cast to clojure.lang.IFn</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The whole thing of having to have a function in front of the nut in
the pistachio has invited much heated debate on the suitability of
pistachios being held up as the paragon of an s-expression.  But
critics have failed to explain the corroborating evidence of red
pistachio nuts, or find a more suitable nut.</em></p>

<p>Amy&rsquo;s time traveling friend, Frank, is due to appear on the scene
momentarily to reveal that the whole world is really made of Clojure
<a href="http://www.datomic.com/">Datomic</a> datoms.  Furthermore, a transaction
is going to be evaluated soon, which will retract all the facts on
EVERYTHING. The practical effect of this will be that nothing will
have an attributes. A world without any attributes at all would be
quite boring and, for all purposes, be non-existent. Luckily for Amy, Frank is a Datomic Time
Traveller and has a hand-held &ldquo;evaluator&rdquo; which will save them. Also
luckily, the readers will be spared dialog, since the author
can never figure out where to put the punctuation and is really
rubbish at it.  Only one phrase will be illustrated.  This is the
rather important one, having been uttered by Amy after it was explained to her
that she, and the entire world around her, was entirely composed of
Clojure:</p>

<p>&ldquo;Isn&rsquo;t that the language with a lot of parens?&rdquo;</p>

<p>To which, Frank handed her the &ldquo;Hitchhiker&rsquo;s Guide to Clojure&rdquo; and
pointed to the words on the front cover,  <strong>&ldquo;Don&rsquo;t Worry About the
Parens.&rdquo;</strong>, and turned to the first page.</p>

<p><em>&ldquo;There is absolutely no need to worry about the parens. It is known
 today that the first really important discovery of humankind was not
 fire, but <a href="http://www.emacswiki.org/emacs/ParEdit">Paredit</a>.  Paredit
 mode magically acts to insert and balance the right parens to the
 point where they actually can no longer be seen.  This is evident by
 just looking around you. The world is made of Clojure and there are
 millions, billions, and trillions of parens all around you and your
 tea cup right now.  Yet, you don&rsquo;t see them.  Paredit mode.&rdquo;</em></p>

<p>At the urging of Frank, Amy quickly stuffed the remaining pistachios
in her pockets while he readied his evaluator. The display showed
some large integer value, that decreased as he pushed the buttons on
the console.  Finally, he pushed the large red button and two parens
started glowing on either side of them &hellip; and they disappeared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean Customer Interview Tips for the Introverted Developer]]></title>
    <link href="http://gigasquid.github.io/blog/2014/01/09/lean-customer-interview-tips-for-the-introverted-developer/"/>
    <updated>2014-01-09T21:23:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/01/09/lean-customer-interview-tips-for-the-introverted-developer</id>
    <content type="html"><![CDATA[<p><img src="http://farm5.staticflickr.com/4029/4356643150_9b26a637e9.jpg"></p>

<p>After attending a local Lean Startup Circle meetup, I decided to write
about some of my experiences with the
<a href="http://theleanstartup.com/">Lean Startup Methodology</a> from a software
developer&rsquo;s point of view.</p>

<h2>Why should you care about the Lean Startup Methodology?</h2>

<p>As software developer, I put my passion, honed expertise, and time
into crafting a digital product or service. One of the worst things
that can happen is that when it is released, no one uses it or wants
it. You can build a absolutely beautiful software product that scales
to the nines. But if you build the wrong thing, it is a failure.</p>

<p>The Lean Startup Methodology is basically a scientific approach to
developing business and products. You analyze your assumptions and
then devise experiments to test your hypotheses. One of the ways that
you can test them, is by talking to people and doing customer
interviews.</p>

<h2>Talking to Random People is Terrifying</h2>

<p>The prospect of talking to random people on the street is a terrifying
prospect for me as a semi-introverted software developer. It is also
incredibly useful to get out of the office and actually get feedback.
These tips come from a Lean Startup Weekend in Columbus at the Neo
office, where I successfully got
out of my comfort zone and engaged in customer interviews.</p>

<p>Background:  Our team was designing experiments around creating an app
for Food Trucks.  The fundamental assumption that we wanted to
validate was &ndash; &ldquo;People will pay money for a phone app that will tell
them where all the Food Trucks are.&rdquo;  So we headed downtown to the
local food market. This was a place where there were local artisan
food vendors in a food hall.  It seemed like an ideal place to find
people interested in good food and Food Trucks.</p>

<h3>Tip #1 &ndash; You will suck at first, but it gets better</h3>

<p>The first few people I tried to talk were complete failures. I felt
like a complete idiot. Do not get discouraged.  It helps if you go
with someone else for moral support, although you should interview
people by yourself, so they don&rsquo;t feel intimidated.</p>

<h3>Tip #2 &ndash; Have your questions written down</h3>

<p>Come prepared with the questions that you want to ask people, so you
don&rsquo;t have a brain freeze with nervousness.  However, I found I got
people to talk to me more if I didn&rsquo;t carry the pad of paper with me.
Basically anything you can do to look less like a marketer helps.</p>

<h3>Tip #3 &ndash; Tell them what you are trying to build first</h3>

<p>DO NOT START OUT LIKE THIS:  &ldquo;Can I ask you a few questions?&rdquo;
This never worked. Again, this is what a marketer would say.
I got my best responses by telling people that I was a software
developer looking to build a app for Food Trucks. In most cases, they
were happy to give advice on whether they would use the app and how
much they would pay for it.</p>

<h3>Tip #4 &ndash; Write down your results right away</h3>

<p>Memory is a fleeting thing.  Try to record the results of your
conversation right away.  Take the notepad from your pocket and go to
a corner or table and note everything down, before you forgot it all.
Also try to write down what the person said, not just your
interpretation. If someone is helping you interview, you can have one
person be a scribe, while one person talks.</p>

<h3>Tip #5 &ndash; Give Gifts</h3>

<p>If you have any funding available for this endeavor, you can get a
stack of Amazon $10 gift cards for people&rsquo;s time. This was some advice
given to us. I didn&rsquo;t actually try it for this particular outing, but
I have heard that others have used it very successfully.</p>

<h2>Getting out of your Comfort Zone is Scary but Rewarding</h2>

<p>I certainly got out of my comfort zone as a developer that weekend.
But the end result was worth it.  We ended up disproving our
hypothesis the people would pay for our app.  Almost all the people we
interviewed said that they would download the app, but no one was
willing to pay for it.  We invalidated a core assumption, it was a
success.</p>

<p>We could move on to testing and validating another idea that could be a viable business product.</p>

<p>Build things that matter.  Build well. Build the right things.</p>

<h5>Thanks to Scott Burwinkel for helping review this post for me &ndash; you rock</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to Leaving your Mac Laptop]]></title>
    <link href="http://gigasquid.github.io/blog/2013/12/26/guide-to-leaving-your-mac-laptop/"/>
    <updated>2013-12-26T00:00:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2013/12/26/guide-to-leaving-your-mac-laptop</id>
    <content type="html"><![CDATA[<p><img src="http://farm4.staticflickr.com/3795/11572063123_6baf3b35c2.jpg"></p>

<p>I felt like I was in a controlling relationship headed downhill.
After two custom laptops returned for defective hardware, I wanted to
leave.  But leaving didn&rsquo;t seem so easy after living in the walled
garden of Apple all those years.</p>

<p>This blog post is about how to leave your Mac and return to OSS.</p>

<h2>Make a New Plan, Stan</h2>

<p>There are quite a few nice alternatives to the Mac Air out there.
I decided to go with the new
<a href="http://www.dell.com/us/business/p/xps-13-linux/pd">Sputnik 3</a>.
Some of my reasons:</p>

<ul>
<li>Powerful &ndash; New Haswell processor</li>
<li>13.3 inch touch display with 1920 x 1080 resolution</li>
<li>Ships with Ubuntu 12.04 (64 bit)</li>
<li>Nice design (yes looks are important)</li>
</ul>


<p>It arrived a couple of days before Christmas. The packaging itself
was quite nice.  Here is a picture next
to my 13 inch Mac Air.</p>

<p><img src="http://farm8.staticflickr.com/7334/11572078553_7efe0e609e.jpg"></p>

<p>The best was that everything just &ldquo;worked&rdquo; out of the box.
I had no problems configuring Ubuntu and getting the wireless network
hooked up.  I could close the lid and reopen it and have &ldquo;instant on&rdquo;
just like the Mac Air.  The keyboard is enjoyable to use and nicely
backlit.  The sleek design and light weight of the laptop is very
comparable to the Mac Air.</p>

<p><img src="http://farm4.staticflickr.com/3753/11571869965_06975d698c.jpg"></p>

<h2>Hop on the Bus, Gus</h2>

<p>It took my about a day to set up all my programs that I use on a daily
basis.
Here is a overview:</p>

<h4>Application Dock/ Organization &ndash; Dash</h4>

<p>Ubuntu has a dock on the left hand side of the screen, that is very
similar to the mac one.  You can right click and pin applications to
the dock to keep them in there. Clicking into the dash option, you can
browse your applications that are installed.</p>

<h4>Getting New Apps &ndash; Ubuntu Software Center or apt-get</h4>

<p>You can install new applications easily by using the Ubuntu Software
Center.  Browsing the applications and installing them is point and
click easy. If you don&rsquo;t see the one you need or need a more recent
version, you can always install via the command line with</p>

<pre><code>sudo apt-get install package-name
</code></pre>

<h4>Browser &ndash; Firefox or Chromium</h4>

<p>Ubuntu comes with Firefox and Chromium installed.
You can also go with Chrome of course.</p>

<h4>Mail &ndash; Thunderbird</h4>

<p>Ubuntu comes with Thunderbird mail ready to go.
I was pleasantly surprised by how easy it was to setup Thunderbird
Mail.  You simply put in your email and password.  Ubuntu keeps a
configuration list of commonly used email providers.  It automagically
figured out the correct domains and ports to use. On the downside, it
doesn&rsquo;t do anything magic with your contacts. So you are on your own
there.  I also just found out about
<a href="http://www.omgubuntu.co.uk/2013/10/geary-0-4-released-with-new-look-new-features">Geary</a>,
which looks pretty sweet.</p>

<h4>Password Management &ndash; 1 Password Anywhere + Dropbox / LastPass</h4>

<p>There is not a linux client for 1Password. I can still use it by using
<a href="http://help.agilebits.com/1Password3/1passwordanywhere.html">1PasswordAnywhere</a>.
I just have a bookmark to the 1PasswordAnyway link and I haz my
logins. I am switching over to LastPass though, so you can edit / add
new passwords. There is also an import utility to move stuff over from 1Password.</p>

<h4>Emacs</h4>

<p>Emacs just works :)
It might be just me, but I think it is happier back on Ubuntu.
I did an apt-get to get the 24 version.</p>

<h4>Git Client</h4>

<p>I went with gitg for a graphical Git client. It seems to have all the
things you need.</p>

<h4>Terminal &ndash; Byobu</h4>

<p><a href="http://byobu.co/">Byobu Terminal</a> comes already installed in Ubuntu. I have been taking
it for a test drive and really like some of the features of easily
adding new tabs, splitting screens and re-attaching to sessions.</p>

<h4>Evernote/ Everpad</h4>

<p>With
<a href="http://www.omgubuntu.co.uk/2012/09/use-evernote-in-ubuntu-with-everpad">Everpad</a>,
I can still use all my evernote stuff too.</p>

<h4>Presentations &ndash; LibreOffice / Reveal.js</h4>

<p>I have used Keynote heavily on the Mac.  For existing presentations, I
can convert them to ppt format and then modify or run in LibreOffice
Impress. Most likely with all my new presentations, I will just use a
JavaScript framework like <a href="http://lab.hakim.se/reveal-js/#/">reveal.js</a></p>

<h4>Communication &ndash; Hipchat / Skype/ Google Hangouts / Campfire</h4>

<p>We use Hipchat for messaging at work.  Hipchat has a linux client
that works just the same.  Skype also has a linux client.  Of course,
Google Hangouts is just fine on the web.  I also use Campfire
sometimes. There are a couple of linux clients out there, but I
haven&rsquo;t tried them yet.  The web version works fine for me right now.</p>

<h4>iPhone</h4>

<p>On my mac, I used to plug in my phone and sync to my dropbox.  I tried
plugging in my phone, but unfortunately, iOS7 put in a security
feature to that prevents having the phone connect properly.  The
solution for me is to just use the phone dropbox app to sync the
pictures automatically to my Dropbox.</p>

<h2>Get Yourself Free</h2>

<p>I don&rsquo;t expect the road to free of bumps.  I have only been using my
new laptop for a week.  But so far, it has been an enjoyable switch.
The hardware is really impressive, and it feels good getting back to
OSS.</p>

<p>Best of all, I set myself free.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neural Networks in Clojure with core.matrix]]></title>
    <link href="http://gigasquid.github.io/blog/2013/12/02/neural-networks-in-clojure-with-core-dot-matrix/"/>
    <updated>2013-12-02T19:28:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2013/12/02/neural-networks-in-clojure-with-core-dot-matrix</id>
    <content type="html"><![CDATA[<p>After having spent some time recently looking at top-down AI, I
thought I would spend some time looking at bottom&rsquo;s up AI, machine
learning and neural networks.</p>

<p>I was pleasantly introduced to <a href="https://twitter.com/mikera">@mikea&rsquo;s</a> <a href="https://github.com/mikera/core.matrix">core.matrix</a> at Clojure Conj
this year and wanted to try making my own neural network using the
library. The purpose of this blog is to share my learnings along the
way.</p>

<h2>What is a neural network?</h2>

<p>A neural network is an approach to machine learning that involves
simulating, (in an idealized way), the way our brains work on a
biological level.  There are three layers to neural network: the input
layer, the hidden layers, and the output layer.  Each layer consists
of neurons that have a value.  In each layer, each neuron is connected to
the neuron in the next layer by a connection strength. To get data
into the neural network, you assign values to the input layer, (values
between 0 and 1). These values are then &ldquo;fed forward&rdquo; to the hidden layer neurons though an algorithm that
relies on the input values and the connection strengths. The values
are finally &ldquo;fed forward&rdquo; in a similar fashion to the output layer.
The &ldquo;learning&rdquo; portion of the neural network comes from &ldquo;training&rdquo; the
network data.  The training data consists of a collection of
associated input values and target values. The training process at a
high level looks like this:</p>

<ul>
<li>Feed forward input values to get the output values</li>
<li>How far off are the output values from the target values?</li>
<li>Calculate the error values and adjust the strengths of the network</li>
<li>Repeat until you think it has &ldquo;learned&rdquo; enough, that is when you
feed the input values in the result of the output values are close
enough to the target you are looking for</li>
</ul>


<p>The beauty of this system is that the neural network, (given the right
configuration and the right training), can approximate any function &ndash;
just by exposing it to data.</p>

<h2>Start Small</h2>

<p>I wanted to start with a very small network so that I could understand
the algorithms and actually do the maths for the tests along the way.
The network configuration I chose is one with 1 hidden layer.  The
input layer has 2 neurons, the hidden layer has 3 neurons and the
output layer has 2 neurons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Neurons</span>
</span><span class='line'><span class="c1">;;  Input Hidden  Output</span>
</span><span class='line'><span class="c1">;;  A     1       C</span>
</span><span class='line'><span class="c1">;;  B     2       D</span>
</span><span class='line'><span class="c1">;;        3</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Connection Strengths</span>
</span><span class='line'><span class="c1">;; Input to Hidden =&gt; [[A1 A2 A3] [B1 B2 B3]]</span>
</span><span class='line'><span class="c1">;; Hidden to Output =&gt; [[1C 1D] [2C 2D] [3C 3D]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example we have:</p>

<ul>
<li>Input Neurons: neuronA neuronB</li>
<li>Hidden Neurons: neuron1 neuron2 neuron3</li>
<li>Output Neurons: neuronC neuronD</li>
<li>Connections between the Input and Hidden Layers

<ul>
<li>neuronA-neuron1</li>
<li>neuronA-neuron2</li>
<li>neuronA-neuron3</li>
<li>neuronB-neuron1</li>
<li>neuronB-neuron2</li>
<li>neuronB-neuron3</li>
</ul>
</li>
<li>Connections betwen the Hidden and Output Layers

<ul>
<li>neuron1-nerounC</li>
<li>neuron1-nerounD</li>
<li>neuron2-nerounC</li>
<li>neuron2-nerounD</li>
<li>neuron3-nerounC</li>
<li>neuron3-nerounD</li>
</ul>
</li>
</ul>


<p>To give us a concrete example to work with, let&rsquo;s actually assign all
our neurons and connection strengths to some real values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">input-neurons</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">input-hidden-strengths</span> <span class="p">[</span> <span class="p">[</span><span class="mf">0.12</span> <span class="mf">0.2</span> <span class="mf">0.13</span><span class="p">]</span>
</span><span class='line'>                              <span class="p">[</span><span class="mf">0.01</span> <span class="mf">0.02</span> <span class="mf">0.03</span><span class="p">]])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hidden-neurons</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hidden-output-strengths</span> <span class="p">[[</span><span class="mf">0.15</span> <span class="mf">0.16</span><span class="p">]</span>
</span><span class='line'>                              <span class="p">[</span><span class="mf">0.02</span> <span class="mf">0.03</span><span class="p">]</span>
</span><span class='line'>                              <span class="p">[</span><span class="mf">0.01</span> <span class="mf">0.02</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Feed Forward</h2>

<p>Alright, we have values in the input neuron layer, let&rsquo;s feed them
forward through the network. The new value of neuron in the hidden
layer is the sum of all the inputs of its connections multiplied by
the connection strength.  The neuron can also have its own threshold,
(meaning you would subtract the threshold from the sum of inputs), but
to keep things a simple as possible in this example, the threshold is
0 &ndash; so we will ignore it.  The sum is then feed into an activation
function, that has an output in the range of -1 to 1.  The activation
function is the tanh function.  We will also need the derivative of
the tanh function a little later when we are calculating errors, so we
will define both here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">activation-fn</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">Math/tanh</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">dactivation-fn</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">- </span><span class="mf">1.0</span> <span class="p">(</span><span class="nb">* </span><span class="nv">y</span> <span class="nv">y</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">layer-activation</span> <span class="p">[</span><span class="nv">inputs</span> <span class="nv">strengths</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;forward propagate the input of a layer&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mapv</span> <span class="nv">activation-fn</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">mapv</span> <span class="o">#</span><span class="p">(</span><span class="nb">reduce + </span><span class="nv">%</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">* </span><span class="nv">inputs</span> <span class="p">(</span><span class="nf">transpose</span> <span class="nv">strengths</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how nice core.matrix works on multipling vectors &lt;3.</p>

<p>So now if we calculate the hidden neuron values from the input [1 0],
we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">input-neurons</span> <span class="nv">input-hidden-strengths</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt;  [0.11942729853438588 0.197375320224904 0.12927258360605834]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s just remember those hidden neuron values for our next step</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">new-hidden-neurons</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">input-neurons</span> <span class="nv">input-hidden-strengths</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we do the same thing to calculate the output values</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">new-hidden-neurons</span> <span class="nv">hidden-output-strengths</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt;  [0.02315019005321053 0.027608061500083565]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">new-output-neurons</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">new-hidden-neurons</span> <span class="nv">hidden-output-strengths</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright!  We have our answer
[0.02315019005321053 0.027608061500083565].
Notice that the values are pretty much the same.  This is because we
haven&rsquo;t trained our network to do anything yet.</p>

<h2>Backwards Propagation</h2>

<p>To train our network, we have to let it know what the answer,(or
target), should be, so we can calculate the errors and finally update
our connection strengths. For this simple example, let&rsquo;s just inverse
the data &ndash; so given an input of [1 0] should give us an output of
[0 1].</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">targets</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h3>Calculate the errors of the output layer</h3>

<p>The first errors that we need to calculate are the ones for the output
layer.  This is found by subtracting the target value form the actual
value and then multiplying by the gradient/ derivative of the
activation function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">output-deltas</span> <span class="p">[</span><span class="nv">targets</span> <span class="nv">outputs</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;measures the delta errors for the output layer (Desired value – actual value) and multiplying it by the gradient of the activation function&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">mapv</span> <span class="nv">dactivation-fn</span> <span class="nv">outputs</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">- </span><span class="nv">targets</span> <span class="nv">outputs</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">output-deltas</span> <span class="nv">targets</span> <span class="nv">new-output-neurons</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; [-0.023137783141771645 0.9716507764442904]</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Great let&rsquo;s remember this output deltas for later</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">odeltas</span> <span class="p">(</span><span class="nf">output-deltas</span> <span class="nv">targets</span> <span class="nv">new-output-neurons</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Calculate the errors of the hidden layer</h3>

<p>The errors of the hidden layer are based off the deltas that we just
found from the output layer.  In fact, for each hidden neuron, the
error delta is the gradient of the activation function multiplied by
the weighted sum of the ouput deltas of connected ouput neurons and
it&rsquo;s connection strength.  This should remind you of the forward
propagation of the inputs &ndash; but this time we are doing it backwards
with the error deltas.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">hlayer-deltas</span> <span class="p">[</span><span class="nv">odeltas</span> <span class="nv">neurons</span> <span class="nv">strengths</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">mapv</span> <span class="nv">dactivation-fn</span> <span class="nv">neurons</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">mapv</span> <span class="o">#</span><span class="p">(</span><span class="nb">reduce + </span><span class="nv">%</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">* </span><span class="nv">odeltas</span> <span class="nv">strengths</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">hlayer-deltas</span>
</span><span class='line'>    <span class="nv">odeltas</span>
</span><span class='line'>    <span class="nv">new-hidden-neurons</span>
</span><span class='line'>    <span class="nv">hidden-output-strengths</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt;  [0.14982559238071416 0.027569216735265096 0.018880751432503236]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great let&rsquo;s remember the hidden layer error deltas for later</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hdeltas</span> <span class="p">(</span><span class="nf">hlayer-deltas</span>
</span><span class='line'>              <span class="nv">odeltas</span>
</span><span class='line'>              <span class="nv">new-hidden-neurons</span>
</span><span class='line'>              <span class="nv">hidden-output-strengths</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating the connection strengths</h3>

<p>Great!  We have all the error deltas, now we are ready to go ahead and
update the connection strengths.  In general this is the same process
for both the hidden-output connections and the input-hidden
connections.</p>

<ul>
<li>weight-change = error-delta * neuron-value</li>
<li>new-weight = weight + learning rate * weight-change</li>
</ul>


<p>The learning rate controls how fast the weigths and errors should be
adjusted.  It the learning rate is too high, then there is the danger
that it will converge to fit the solution too fast and not find the
best solution.  If the learning rate is too low, it may never actually
converge to the right solution given the training data that it is
using. For this example, let&rsquo;s use a training rate of 0.2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">update-strengths</span> <span class="p">[</span><span class="nv">deltas</span> <span class="nv">neurons</span> <span class="nv">strengths</span> <span class="nv">lrate</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="nv">strengths</span> <span class="p">(</span><span class="nb">* </span><span class="nv">lrate</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">mapv</span> <span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="nv">deltas</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">neurons</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update the hidden-output strengths</h3>

<p>Updating this layer we are going to look at</p>

<ul>
<li>weight-change = odelta * hidden value</li>
<li>new-weight = weight + (learning rate * weight-change)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>       <span class="nv">odeltas</span>
</span><span class='line'>       <span class="nv">new-hidden-neurons</span>
</span><span class='line'>       <span class="nv">hidden-output-strengths</span>
</span><span class='line'>       <span class="nv">learning-rate</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt; [[0.14944734341306073 0.18320832546991603]</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.019086634528619688</span> <span class="mf">0.06835597662949369</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">0.009401783798869296</span> <span class="mf">0.04512156124675721</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, let&rsquo;s remember these values too</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">new-hidden-output-strengths</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>       <span class="nv">odeltas</span>
</span><span class='line'>       <span class="nv">new-hidden-neurons</span>
</span><span class='line'>       <span class="nv">hidden-output-strengths</span>
</span><span class='line'>       <span class="nv">learning-rate</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Update the input-hidden strengths</h3>

<p>We are going to do the same thing with the input-hidden strengths too.</p>

<ul>
<li>weight-change = hdelta * input value</li>
<li>new-weight = weight + (learning rate * weight-change)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>           <span class="nv">hdeltas</span>
</span><span class='line'>           <span class="nv">input-neurons</span>
</span><span class='line'>           <span class="nv">input-hidden-strengths</span>
</span><span class='line'>           <span class="nv">learning-rate</span><span class="p">)</span>
</span><span class='line'><span class="c1">;=&gt;  [[0.14996511847614283 0.20551384334705303 0.13377615028650064]</span>
</span><span class='line'>           <span class="p">[</span><span class="mf">0.01</span> <span class="mf">0.02</span> <span class="mf">0.03</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are our new strengths</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">new-input-hidden-strengths</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>       <span class="nv">hdeltas</span>
</span><span class='line'>       <span class="nv">input-neurons</span>
</span><span class='line'>       <span class="nv">input-hidden-strengths</span>
</span><span class='line'>       <span class="nv">learning-rate</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Putting the pieces together</h2>

<p>We have done it!  In our simple example we have:</p>

<ul>
<li>Forward propagated the input to get the output</li>
<li>Calculated the errors from the target through backpropogation</li>
<li>Updated the connection strengths/ weights</li>
</ul>


<p>We just need to put all the pieces together. We&rsquo;ll do this with the
values that we got earlier to make sure it is all working.</p>

<h3>Construct a network representation</h3>

<p>It would be nice if we could represent an entire neural network in a
data structure.  That way the whole transformation of feeding forward
and training the network could give us a new network back.
So lets define the data structure as
[input-neurons input-hidden-strengths hidden-neurons hidden-output-strengths output-neurons].</p>

<p>We will start off with all the values of the neurons being zero.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nn</span> <span class="p">[</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">input-hidden-strengths</span> <span class="nv">hidden-neurons</span>
</span><span class='line'><span class="nv">hidden-output-strengths</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generalized feed forward</h3>

<p>Now we can make a feed forward function that takes this network and
constructs a new network based on input values and the
layer-activation function that we defined earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">feed-forward</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">network</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">in</span> <span class="nv">i-h-strengths</span> <span class="nv">h</span> <span class="nv">h-o-strengths</span> <span class="nv">out</span><span class="p">]</span> <span class="nv">network</span>
</span><span class='line'>        <span class="nv">new-h</span> <span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">input</span> <span class="nv">i-h-strengths</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">new-o</span> <span class="p">(</span><span class="nf">layer-activation</span> <span class="nv">new-h</span> <span class="nv">h-o-strengths</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">input</span> <span class="nv">i-h-strengths</span> <span class="nv">new-h</span> <span class="nv">h-o-strengths</span> <span class="nv">new-o</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should match up with the values that we got earlier when we were
just working on the individual pieces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;feed forward&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">== </span><span class="p">[</span><span class="nv">input-neurons</span> <span class="nv">input-hidden-strengths</span> <span class="nv">new-hidden-neurons</span> <span class="nv">hidden-output-strengths</span> <span class="nv">new-output-neurons</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">feed-forward</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">nn</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h3>Generalized update weights / connection strengths</h3>

<p>We can make a similiar update-weights function that calculate the
errors and returns back a new network with the updated weights</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">update-weights</span> <span class="p">[</span><span class="nv">network</span> <span class="nv">target</span> <span class="nv">learning-rate</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[[</span> <span class="nv">in</span> <span class="nv">i-h-strengths</span> <span class="nv">h</span> <span class="nv">h-o-strengths</span> <span class="nv">out</span><span class="p">]</span> <span class="nv">network</span>
</span><span class='line'>        <span class="nv">o-deltas</span> <span class="p">(</span><span class="nf">output-deltas</span> <span class="nv">target</span> <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">h-deltas</span> <span class="p">(</span><span class="nf">hlayer-deltas</span> <span class="nv">o-deltas</span> <span class="nv">h</span> <span class="nv">h-o-strengths</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">n-h-o-strengths</span> <span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>                         <span class="nv">o-deltas</span>
</span><span class='line'>                         <span class="nv">h</span>
</span><span class='line'>                         <span class="nv">h-o-strengths</span>
</span><span class='line'>                         <span class="nv">learning-rate</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">n-i-h-strengths</span> <span class="p">(</span><span class="nf">update-strengths</span>
</span><span class='line'>                         <span class="nv">h-deltas</span>
</span><span class='line'>                         <span class="nv">in</span>
</span><span class='line'>                         <span class="nv">i-h-strengths</span>
</span><span class='line'>                         <span class="nv">learning-rate</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">in</span> <span class="nv">n-i-h-strengths</span> <span class="nv">h</span> <span class="nv">n-h-o-strengths</span> <span class="nv">out</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This too should match up with the pieces from the earlier examples.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;update-weights&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span> <span class="nb">== </span><span class="p">[</span><span class="nv">input-neurons</span>
</span><span class='line'>            <span class="nv">new-input-hidden-strengths</span>
</span><span class='line'>            <span class="nv">new-hidden-neurons</span>
</span><span class='line'>            <span class="nv">new-hidden-output-strengths</span>
</span><span class='line'>            <span class="nv">new-output-neurons</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">update-weights</span> <span class="p">(</span><span class="nf">feed-forward</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">nn</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="mf">0.2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generalized train network</h3>

<p>Now we can make a function that takes input and a target and feeds the
input forward and then updates the weights.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train-network</span> <span class="p">[</span><span class="nv">network</span> <span class="nv">input</span> <span class="nv">target</span> <span class="nv">learning-rate</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">update-weights</span> <span class="p">(</span><span class="nf">feed-forward</span> <span class="nv">input</span> <span class="nv">network</span><span class="p">)</span> <span class="nv">target</span> <span class="nv">learning-rate</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;train-network&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">== </span><span class="p">[</span><span class="nv">input-neurons</span>
</span><span class='line'>            <span class="nv">new-input-hidden-strengths</span>
</span><span class='line'>            <span class="nv">new-hidden-neurons</span>
</span><span class='line'>            <span class="nv">new-hidden-output-strengths</span>
</span><span class='line'>           <span class="nv">new-output-neurons</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">train-network</span> <span class="nv">nn</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="mf">0.2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Try it out!</h2>

<p>We are ready to try it out!  Let&rsquo;s train our network on a few examples
of inversing the data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n1</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">nn</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">train-network</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">train-network</span> <span class="p">[</span><span class="mf">0.5</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mf">0.5</span><span class="p">]</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">train-network</span> <span class="p">[</span><span class="mf">0.25</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mf">0.25</span><span class="p">]</span> <span class="mf">0.5</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll also make a helper function that just returns the output
neurons for the feed-forward function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ff</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">network</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nf">feed-forward</span> <span class="nv">input</span> <span class="nv">network</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at the results of the untrained and the trained networks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;untrained</span>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">nn</span><span class="p">)</span> <span class="c1">;=&gt; [0.02315019005321053 0.027608061500083565]</span>
</span><span class='line'><span class="c1">;;trained</span>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n1</span><span class="p">)</span> <span class="c1">;=&gt; [0.03765676393050254 0.10552175312900794]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoa!  The trained example isn&rsquo;t perfect, but we can see that it is
getting closer to the right answer.  It is learning!</p>

<h2>MOR Training Data</h2>

<p>Well this is really cool and it is working.  But it would be nicer to
be able to present a set of training data for it to learn on.  For
example, it would be nice to have a training data structure look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">target</span><span class="p">]</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">target</span><span class="p">]</span> <span class="nv">...</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go ahead and define that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">train-data</span> <span class="p">[</span><span class="nv">network</span> <span class="nv">data</span> <span class="nv">learning-rate</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">input</span> <span class="nv">target</span><span class="p">]</span> <span class="p">(</span><span class="nb">first </span><span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">train-network</span> <span class="nv">network</span> <span class="nv">input</span> <span class="nv">target</span> <span class="nv">learning-rate</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">rest </span><span class="nv">data</span><span class="p">)</span>
</span><span class='line'>     <span class="nv">learning-rate</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">network</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try that out on the example earlier</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n2</span> <span class="p">(</span><span class="nf">train-data</span> <span class="nv">nn</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">[[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class='line'>                        <span class="p">[[</span><span class="mf">0.5</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mf">0.5</span><span class="p">]]</span>
</span><span class='line'>                        <span class="p">[[</span><span class="mf">0.25</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="mf">0.25</span><span class="p">]</span> <span class="p">]</span>
</span><span class='line'>                        <span class="p">]</span>
</span><span class='line'>                    <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n2</span><span class="p">)</span> <span class="c1">;=&gt; [0.03765676393050254 0.10552175312900794]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. We can now train on data sets. That means we can construct data
sets out of infinite lazy sequences too.  Let&rsquo;s make a lazy training
set of inputs and their inverse.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">inverse-data</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="p">(</span><span class="nb">rand </span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[[</span><span class="nv">n</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">0</span> <span class="nv">n</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see how well our network is doing after we train it with some
more data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n3</span> <span class="p">(</span><span class="nf">train-data</span> <span class="nv">nn</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="mi">400</span> <span class="nv">inverse-data</span><span class="p">)</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n3</span><span class="p">)</span> <span class="c1">;=&gt; [-4.958278484025221E-4 0.8211647699205362]</span>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mf">0.5</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n3</span><span class="p">)</span> <span class="c1">;=&gt; [2.1645760787874696E-4 0.5579396715416916]</span>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mf">0.25</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n3</span><span class="p">)</span> <span class="c1">;=&gt; [1.8183385523103048E-4 0.31130601296149013]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. The more examples it sees, the better that network is doing at
learning what to do!</p>

<h3>General Construct Network</h3>

<p>The only piece that we are missing now is to have a function that will
create a general neural network for us.  We can choose how many input
nerurons, hidden neurons, and output neurons and have a network
constructed with random weights.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">gen-strengths</span> <span class="p">[</span><span class="nv">to</span> <span class="nv">from</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">l</span> <span class="p">(</span><span class="nb">* </span><span class="nv">to</span> <span class="nv">from</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">map </span><span class="nv">vec</span> <span class="p">(</span><span class="nf">partition</span> <span class="nv">from</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">l</span> <span class="o">#</span><span class="p">(</span><span class="nb">rand </span><span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="nv">l</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">construct-network</span> <span class="p">[</span><span class="nv">num-in</span> <span class="nv">num-hidden</span> <span class="nv">num-out</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">vec</span> <span class="p">[(</span><span class="nb">repeat </span><span class="nv">num-in</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">gen-strengths</span> <span class="nv">num-in</span> <span class="nv">num-hidden</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">repeat </span><span class="nv">num-hidden</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">gen-strengths</span> <span class="nv">num-hidden</span> <span class="nv">num-out</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">repeat </span><span class="nv">num-out</span> <span class="mi">0</span><span class="p">)])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can construct our network from scratch and train it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">tnn</span> <span class="p">(</span><span class="nf">construct-network</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">n5</span> <span class="p">(</span><span class="nf">train-data</span> <span class="nv">tnn</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="mi">1000</span> <span class="nv">inverse-data</span><span class="p">)</span> <span class="mf">0.2</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">ff</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">n4</span><span class="p">)</span> <span class="c1">;=&gt; [-4.954958580800465E-4 0.8160149309699489]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it.  We have constucted a neural network with core.matrix</p>

<h2>Want more?</h2>

<p>I put together a github library based on the neural network code in
the posts.  It is called <a href="https://github.com/gigasquid/k9">K9</a>, named
after Dr. Who&rsquo;s best dog friend.  You can find the examples we have
gone through in the tests.  There is also an example program using it
in the examples directory.  It learns what colors are based on thier
RGB value.</p>

<p>There are a couple web resources I would recommend if you want to look
farther as well.</p>

<ul>
<li><a href="http://takinginitiative.wordpress.com/2008/04/03/basic-neural-network-tutorial-theory/">Basic Network Tutorial</a></li>
<li><a href="http://www.youtube.com/watch?v=QJ1qgCr09j8&amp;feature=player_embedded">Mike Anderson&rsquo;s Clojure Conj talk on Neural Networks</a></li>
</ul>


<p>Go forth and create Neural Networks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace and Reach]]></title>
    <link href="http://gigasquid.github.io/blog/2013/11/02/embrace-and-reach/"/>
    <updated>2013-11-02T14:51:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/11/02/embrace-and-reach</id>
    <content type="html"><![CDATA[<p><img src="http://farm1.staticflickr.com/99/290760357_01392a3f51_n.jpg"></p>

<p>One of the wonderful things about being a technologist today, is
to be part of an industry that is bubbling over with new and
exciting things. It can be exhilarating and overwhelming. How can we
try and do all these great new things?  Of course, it is not
sensible to simply drop whatever you are using and continually chase
after the newest tech.  Nor is steadfastly staying in one place and
refusing to accept that there is a better way of doing things.  The
challenge is to absorb, identify, and synthesize both good of the
what we are currently doing and the new stuff too.  We want to embrace and continue the good things that
are working for us and reach for the new technologies that will propel
us farther in the future.</p>

<p>Since everyone has their own experience synthesizing the world around
them, there are many differing opinions on what we should continue to
embrace and what we technologies and practices should reach for.  I
humbly offer my thoughts on this based from my own perspective.</p>

<h2>Embrace: Agile Feedback</h2>

<h2>Reach for: Lean Startup Discipline and Programmer Anarchy</h2>

<p>Agile has become a victim of its own success.  Becoming so big, its
message has been confused and abused in too many ways to name.  But
the core pillar of frequent and continuous feedback is a foundation to
any successful software project and should be embraced.  However, we
should not stop there.  We should reach for the rewards that <a href="http://theleanstartup.com/principles">Lean Startup
Methodology</a> offers in the form
of displinced validation.  We should also
reach to unleash the innovation of our smart developers with
<a href="http://www.youtube.com/watch?v=uk-CF7klLdA">Programmer Anarchy</a>, and
look for ways to ruthlessly stomp out unnecessary and wasteful
project management practices.</p>

<h2>Embrace: Ruby&rsquo;s Community</h2>

<h2>Reach for: Clojure, Go, Elixir, and Meteor</h2>

<p>Ruby and Rails have been an incredible game changer for web
development.  But they too are suffering from their own success.  One
of the strengths of Ruby, which should be embraced and nutured, is the
strength of the community and the openness to newcomers.  This strength
yields a fruitful ground for a vibrant library ecosystem, which has
helped Ruby flourish.  We need to reach beyond Ruby and Rails to other
languages and frameworks that focus on simplicity and concurrency.  The bright future
will belong to the likes of <a href="http://clojure.org/">Clojure</a>,
<a href="http://golang.org/">Go</a>, <a href="http://elixir-lang.org/">Elixir</a>, and <a href="http://www.meteor.com/">Meteor</a>.  We need
to reach and start using these in the products we build, while
encouraging the growth of a welcoming community and ecosystem like the
one we have in Ruby.</p>

<h2>Embrace: Collaboration</h2>

<h2>Reach for: the Distributed and Decentralized</h2>

<p>Collaboration with tools like Google Docs works.  We should continue
to embrace the power that this gives us. However we should embrace
tools for combining this collaboration in a truly distributed and
decentralized manner. Git itself is wonderful and distributed, but we
should reach for tools like Github to be more decentralized and resilient.
As privacy concerns grow in today&rsquo;s world.  We need to reach beyond
the convenience that a centralized source of information gives us and
truly understand the trade offs involved.</p>

<p>We live in an incredible, vibrant time.  Look around and what you
do everyday.  Embrace and nurture all the good parts, and never give up
reaching for something better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Forward to London]]></title>
    <link href="http://gigasquid.github.io/blog/2013/10/03/looking-forward-to-london/"/>
    <updated>2013-10-03T20:43:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/10/03/looking-forward-to-london</id>
    <content type="html"><![CDATA[<p>I really love the London.  I have only been once many years ago,
but I was enchanted.  Here is a partial list of my favorite
things:</p>

<ul>
<li>Ducks in Regent&rsquo;s Park</li>
<li>Tea Rooms</li>
<li>The Food Hall at Harrod&rsquo;s</li>
<li>The British Museum</li>
<li>English Breakfasts</li>
<li>The way the British put an extra &ldquo;r&rdquo; in phrases like &ldquo;vanilla in it&rdquo;</li>
</ul>


<p>As you know, I also adore Clojure. So I am absolutely thrilled to combine the two.</p>

<h2>Clojure eXchange</h2>

<p>I will be speaking at the
<a href="http://skillsmatter.com/event/java-jee/clojure-exchange-2013">Clojure eXchange conference</a>
on December 6th.  The talk is a bit odd, (like me), and will have
Clojure, parsers, sea monsters, philosophy, and an AR Drone in it.  It
should be a lot of fun.</p>

<p>I really looking forward to get a chance to meet the London Clojure
community in person. Hope to see you there.</p>

<p>P.S. If anyone has any tips on flying overseas with an AR Drone.
Please let me know :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling Multiple Drones with Clojure and Goals and Beliefs]]></title>
    <link href="http://gigasquid.github.io/blog/2013/09/05/controlling-multiple-drones-with-clojure-and-goals-and-beliefs/"/>
    <updated>2013-09-05T15:35:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/09/05/controlling-multiple-drones-with-clojure-and-goals-and-beliefs</id>
    <content type="html"><![CDATA[<h2>How to Control Multiple Drones with Clojure</h2>

<p>The <a href="https://github.com/gigasquid/clj-drone">clj-drone</a> library now
has multi-drone support!  You can now send multiple drones commands,
receive their navigation data, and even have them perform their
actions autonomously with goals and beliefs.</p>

<p>It takes a bit of extra setup to control more than one drone. We need to assign them each an
ip and get them talking as an adhoc network.
<a href="https://twitter.com/jimweirich">Jim Weirich</a> creating a neat little
script to run on the drone to do just this.  Here are the
instructions:</p>

<h3>Change first drone to adhoc network</h3>

<p>Connect your computer to the first drone&rsquo;s network.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">telnet</span> <span class="mf">192.68</span><span class="nv">.1.1</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Create the following file as adhoc.sh.  This shell script will
temporarily change the network to an adhoc network named
&ldquo;multidrone_ah&rdquo; and assign it a static ip of 192.168.1.100.
The next time you reboot your drone, things will be back to normal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">; This script should be run on the drone.</span>
</span><span class='line'><span class="c1">; Change the IP address to be difference</span>
</span><span class='line'><span class="c1">; for each drone on the same ad-hoc network</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="nv">killall</span> <span class="nv">udhcpd</span>
</span><span class='line'><span class="nv">ifconfig</span> <span class="nv">ath0</span> <span class="nv">down</span>
</span><span class='line'><span class="nv">iwconfig</span> <span class="nv">ath0</span> <span class="nv">mode</span> <span class="nv">ad-hoc</span> <span class="nv">essid</span> <span class="nv">multidrone_ah</span> <span class="nv">channel</span> <span class="nv">auto</span> <span class="nv">commit</span>
</span><span class='line'><span class="nv">ifconfig</span> <span class="nv">ath0</span> <span class="mf">192.168</span><span class="nv">.1.100</span> <span class="nv">netmask</span> <span class="mf">255.255</span><span class="nv">.255.0</span> <span class="nv">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Run the script.</p>

<h3>Change the second drone to the adhoc network</h3>

<p>Connect your computer to the second drone&rsquo;s network.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">telnet</span> <span class="mf">192.68</span><span class="nv">.1.1</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">; This script should be run on the drone.</span>
</span><span class='line'><span class="c1">; Change the IP address to be difference</span>
</span><span class='line'><span class="c1">; for each drone on the same ad-hoc network</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="nv">killall</span> <span class="nv">udhcpd</span>
</span><span class='line'><span class="nv">ifconfig</span> <span class="nv">ath0</span> <span class="nv">down</span>
</span><span class='line'><span class="nv">iwconfig</span> <span class="nv">ath0</span> <span class="nv">mode</span> <span class="nv">ad-hoc</span> <span class="nv">essid</span> <span class="nv">multidrone_ah</span> <span class="nv">channel</span> <span class="nv">auto</span> <span class="nv">commit</span>
</span><span class='line'><span class="nv">ifconfig</span> <span class="nv">ath0</span> <span class="mf">192.168</span><span class="nv">.1.200</span> <span class="nv">netmask</span> <span class="mf">255.255</span><span class="nv">.255.0</span> <span class="nv">up</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Run the script.</p>

<h3>On your laptop</h3>

<ul>
<li>Connect to the adhoc network that the drones are on &ldquo;multidrone_ah&rdquo;</li>
<li>Change your computer to a static ip on the network (from network
preferences on mac) something like 192.168.1.101</li>
</ul>


<p>Now you are ready to run the program.  Here is a small example of
sending simple commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">drone-initialize</span> <span class="ss">:drone1</span> <span class="s">&quot;192.168.1.100&quot;</span> <span class="nv">default-at-port</span> <span class="nv">default-navdata-port</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">mdrone</span> <span class="ss">:drone1</span> <span class="ss">:take-off</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">mdrone</span> <span class="ss">:drone1</span> <span class="ss">:land</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">drone-initialize</span> <span class="ss">:drone2</span> <span class="s">&quot;192.168.1.200&quot;</span> <span class="nv">default-at-port</span> <span class="nv">default-navdata-port</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">mdrone</span> <span class="ss">:drone2</span> <span class="ss">:take-off</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">mdrone</span> <span class="ss">:drone2</span> <span class="ss">:land</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h2>Bring on Multiple Drones interacting with Goals and Beliefs</h2>

<p>The clj-drone library implements goals and beliefs from <a href="http://gigasquid.github.io/blog/2012/09/20/7-john-mccarthy-papers-in-7-weeks-1/">John
McCarthy&rsquo;s work</a>.
The way this works is that the navigation data being constantly sent
to our computer for processing.  Everytime we get a navigation packet
that ends up looking something like this, (but with lots more data):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">{</span><span class="ss">:altitude</span> <span class="mf">0.0</span>, <span class="ss">:yaw</span> <span class="mf">-0.215</span>, <span class="ss">:pitch</span> <span class="mf">-1.075</span>, <span class="ss">:roll</span> <span class="mf">-2.904</span>, <span class="ss">:control-state</span> <span class="ss">:landed</span>, <span class="ss">:communication</span> <span class="ss">:ok</span>, <span class="ss">:com-watchdog</span> <span class="ss">:ok</span>, <span class="ss">:seq-num</span> <span class="mi">870</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>We then define a belief-action using this data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def-belief-action</span> <span class="nv">ba-landed1</span>
</span><span class='line'>  <span class="s">&quot;I (Drone1) am landed&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">control-state</span><span class="p">]}]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">control-state</span> <span class="ss">:landed</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">navdata</span><span class="p">]</span> <span class="p">(</span><span class="nf">mdrone</span> <span class="ss">:drone1</span> <span class="ss">:take-off</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>The def-belief-action macro takes:</p>

<ul>
<li>Name of the belief action</li>
<li>A readable sentence that expresses the belief.  (This is later
logged, so that we know what the drone believes at all times.)</li>
<li>A predicate that takes in the navigation data as a parameter.  When
it evaluates to true, then the belief is said to be &ldquo;held&rdquo;.</li>
<li>A function to execute when the belief is held</li>
</ul>


<p>The beliefs are then combined to form goals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">def-goal</span> <span class="nv">g-take-off1</span>
</span><span class='line'>  <span class="s">&quot;I (Drone1) want to fly.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">control-state</span><span class="p">]}]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">control-state</span> <span class="ss">:hovering</span><span class="p">))</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">ba-landed1</span> <span class="nv">ba-taking-off1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>The def-goal macro takes:</p>

<ul>
<li>The name of the goal</li>
<li>A readable sentence that expresses the goal. (This is later logged,
so that we can know when it achieves a goal.)</li>
<li>A predicate that takes in the navigation data as a parameter.  When
it evaluates to true, the goal is said to be achieved.  It will no
longer evaluate or hold any of the belief actions associated with
that goal.</li>
</ul>


<p>Finally, we can set a list of goals for a drone to achieve:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">(</span><span class="nf">set-current-goal-list</span> <span class="nv">drones</span> <span class="ss">:drone1</span>
</span><span class='line'> <span class="p">[</span><span class="nv">g-take-off1</span> <span class="nv">g-find-other-drone-and-wave1</span> <span class="nv">g-land1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets the goal list for a drone.  It will take-off, look around
for the other drone and wave, (do a dance), once it sees it.  Finally,
after both drones have spotted each other and waved, they will both
land.</p>

<h2>Video or It Didn&rsquo;t Happen</h2>

<p>Here is a video of both drones.  They will take off, look around for
each other and wave when they spot each other.  They will land when
the have both waved.  They are operating solely on goals and beliefs
with their navigation data.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('J65rvPdJQ0c');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/J65rvPdJQ0c?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/J65rvPdJQ0c/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=J65rvPdJQ0c" id="J65rvPdJQ0c" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Dual Drone Seek and Dance</div>
</a>
<div class="video-info" >Two drones turn until they see each other. When a drone sees the other, it will do a little dance. When both have danced, they will land.

Programmed by @carinmeier using the clj-drone library with beliefs and goals. (see https://github.com/gigasquid/clj-drone).</div>
</div>


<p>The code running the video above can be found in the examples of the
<a href="https://github.com/gigasquid/clj-drone/tree/master/examples">clj-drone</a>.</p>

<p>Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 5 Whys of Community]]></title>
    <link href="http://gigasquid.github.io/blog/2013/07/22/5-whys-of-community/"/>
    <updated>2013-07-22T19:44:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/07/22/5-whys-of-community</id>
    <content type="html"><![CDATA[<h2>Why do you devote time and participate in the community?</h2>

<p>1) <em>Why do you devote time and participate in the community?</em></p>

<p>I find joy in coding and making things. I want to be around other
people who feel the same way.</p>

<p>2) <em>Why?</em></p>

<p>Because I want to be inspired by others and learn from others and hope that they are inspired and learn from me.</p>

<p>3) <em>Why?</em></p>

<p>Because ideas and learning doesn&rsquo;t happen in a vacuum. There is something magical about the serendipity of human interaction and that needs a community to take place.</p>

<p>4) <em>Why?</em></p>

<p>It is all fundamentally about people. People dream. We talk about our dreams and get together and make them reality. That is the magic of our civilization.</p>

<p>5) <em>Why?</em></p>

<p>I don&rsquo;t want to dream alone.</p>

<p>What are your reasons?
In response to <a href="http://words.cdmwebs.com/let-s-start-with-why">Let&rsquo;s Start with Why</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demoing with Drones: Tips and Warnings]]></title>
    <link href="http://gigasquid.github.io/blog/2013/07/15/demoing-with-drones-tips-and-warnings/"/>
    <updated>2013-07-15T15:42:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/07/15/demoing-with-drones-tips-and-warnings</id>
    <content type="html"><![CDATA[<p>Lately, I have had the pleasure of speaking and sharing my experience
of programming <a href="http://ardrone2.parrot.com/">AR Drones</a> with Clojure.  However, doing live hardware
demos has not always been a smooth ride.  In fact, it can be fraught
with peril.  I thought that I would share some of the tips and tricks
that have helped me, as well as help make you
aware of some potential pitfalls.</p>

<h2>Traveling with the AR Drone</h2>

<p><img class="left" src="http://farm6.staticflickr.com/5332/9301848814_1633857d6d.jpg"></p>

<p>Do you need to take your drone with you on the plane to the demo?
The box that the drone comes in is a very nice carrying case, however it
is too big to take on as a carry-on.  I found that taking the hull
off, and packing it into a plastic box worked well.  It was small
enough to pack under the seat of even the smaller planes.  I took the
battery out and packed it in my checked luggage.</p>

<h2>Before the Demo</h2>

<ul>
<li><p><strong>Put colored masking tape on the floor</strong> : If the floor is
  featureless, the drone will have a hard time staying in one place
  while it is hovering.  Put down some strips of colored masking
  tape in the area that you want to demo the drone.</p></li>
<li><p><strong>Charge the spare battery</strong>:  Make sure that you have at least 2
  batteries charged and ready to go.  If there is an extra plug
  nearby, just plug in the battery and charger until you are ready
  to present.</p></li>
<li><p><strong>Beware the network interference</strong>:  In some larger venues, like
  hotels, the network traffic will make things break.  In
  particular, receiving navigation data back from the drone. There
  are possible strategies for mitigating this &ndash; the only one I have
  tried so far is to bump up the timeout on the UDP connection.
  Other things that you may want to try would be to auto-reconnect
  after timeout.  Also limiting the amount navdata you need might
  also work.</p></li>
<li><p><strong>Backup videos</strong> &ndash; Having backup videos of your demo actually
  working is essential.  It is safety net that will allow you to
  sleep the night before.  Like they say, &ldquo;Hope for the best, but
  plan for the worst&rdquo;.</p></li>
<li><p><strong>Rehearse</strong> &ndash; If possible, go through your drone demos in the space
  sometime before the talk.  You will get a feeling for issues that
  might occur &ndash; like network troubles.</p></li>
</ul>


<h2>Demo Time!</h2>

<ul>
<li><p><strong>Front row drone catchers</strong> &ndash; Enlist the aid of your audience.
  Show the people in the front row how to catch a drone safely and
  hold it at a 90 degree angle so the engine cuts out.  That way, if
  the drone starts going off in unplanned ways, you will have help.</p></li>
<li><p><strong>Cross your fingers and have fun</strong> &ndash; Good luck.  Hardware demos are
  a lot of fun.  Hopefully, everything we work as planned, but if
  not &ndash; at least it was interesting.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Babar - A Little Language with Speech Acts for Machines]]></title>
    <link href="http://gigasquid.github.io/blog/2013/06/04/babar-a-little-language-with-speech-acts-for-machines/"/>
    <updated>2013-06-04T14:57:52-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/06/04/babar-a-little-language-with-speech-acts-for-machines</id>
    <content type="html"><![CDATA[<p><img src="http://farm8.staticflickr.com/7352/9925781735_77dfa3157b_o.jpg"></p>

<h2>Preface: A Gentle Obsession</h2>

<p>About a year ago, I picked up John McCarthy&rsquo;s paper on <a href="http://web.archive.org/web/20131014084908/http://www-formal.stanford.edu/jmc/elephant/elephant.html">Elephant 2000</a>. I have to admit that I only understood about 10% of it. But I was so intrigued by the ideas that it sent me on a quest. I re-read it numerous times, slept with it under my pillow, and finally decided that I needed to read his other papers to get an insight into his thoughts. I began a considered effort with <a href="http://gigasquidsoftware.com/blog/2012/09/18/7-john-mccarthy-papers-in-7-days-prologue/">Seven McCarthy Papers in Seven Weeks</a>. It ended up taking about three months, rather than seven 7 weeks. Again I came back to Elephant 2000. I began to understand more as other ideas and concepts sunk in, like <a href="http://web.archive.org/web/20131014084908/http://www-formal.stanford.edu/jmc/ascribing/ascribing.html">ascribing beliefs and goals to machines</a>. But to really explore the ideas, I really wanted to try to implement parts of Elephant in my own programming language. The problem was, having no formal training in computer science, (my background is Physics), I had never created a programming language before. The stars aligned and I found the <a href="https://github.com/Engelberg/instaparse">Instaparse</a> Clojure library. The result is <a href="https://github.com/gigasquid/babar">Babar</a>, a language designed to explore communication with machines via <a href="http://en.wikipedia.org/wiki/Speech_act">Speech Acts</a>.</p>

<h2>What are the Speech Acts?</h2>

<p>When I say say &ldquo;Pass the salt.&rdquo;, the meaning behind the utterance is that I would like someone to reach out and move the salt shaker to me. I am requesting an action be performed. It doesn&rsquo;t really matter if the utterance is in English, French, or Spanish. The intention is the same. Furthermore, if you accept my request to pass the salt. It creates a commitment on your part to actually perform the action. There are two types of speech acts that Babar is concerned with. The first is called an <a href="http://en.wikipedia.org/wiki/Illocutionary_act">Illocutionary Act</a>. Some of the english verbs denoting these acts are &ldquo;assert&rdquo;, &ldquo;command&rdquo;, &ldquo;request&rdquo;, and &ldquo;query&rdquo;. The second is a <a href="http://en.wikipedia.org/wiki/Perlocutionary_act">Perlocutionary Act</a>. These are acts that are concerned with the effects of hearing them on future actions. Some of english verbs denoting these acts are &ldquo;convince&rdquo;, &ldquo;persuade&rdquo;, and &ldquo;warn&rdquo;.</p>

<h2>Hello Babar</h2>

<p>Babar is an experimental language that uses these Speech Acts to communicate. It also combines one of the other ideas of McCarthy, that is of beliefs and goals. The ultimate aim in the language is discover ways of thinking about computers and communicating with them based on the way that we communicate with each other. The state of a computer at any given point in time can be very complex and hard to understand. If we ascribe this state to be a &ldquo;belief&rdquo;, it becomes easier to understand and thus easier to program. The Babar REPL has internal commitments and internal beliefs. The goal of the Babar REPL is to keep all of its commitments. Speech acts are used to &ldquo;convince&rdquo; Babar of beliefs and to make &ldquo;requests&rdquo; that form commitments. The Babar REPL continually checks to see if it needs to fulfill a commitments. It fulfills them based on its beliefs. As an optional configuration, the REPL will speak aloud its beliefs as the become true &ndash; or as it &ldquo;holds&rdquo; the belief.</p>

<h2>Syntax and Basics</h2>

<p>The language uses basic Clojure datatypes and makes the parens optional in most cases to make the expressions look more like syntactically sugared speech acts.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>
</span><span class='line'>    <span class="mi">1</span>     <span class="c1">;=&gt; 1</span>
</span><span class='line'>    <span class="mf">2.3</span>   <span class="c1">;=&gt; 2.3</span>
</span><span class='line'>    <span class="mf">-3.4</span>  <span class="c1">;=&gt; 3.4</span>
</span><span class='line'>    <span class="s">&quot;cat&quot;</span> <span class="c1">;=&gt; cat</span>
</span><span class='line'>    <span class="ss">:bird</span> <span class="c1">;=&gt; bird</span>
</span><span class='line'>    <span class="nv">true</span>  <span class="c1">;=&gt; true</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:cat</span> <span class="ss">:meow</span> <span class="ss">:dog</span> <span class="ss">:bark</span><span class="p">}</span> <span class="c1">;=&gt; {:cat :meow :dog :bark}</span>
</span><span class='line'>    <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="nv">true</span> <span class="ss">:bird</span><span class="p">]</span> <span class="c1">;=&gt; [1 2 true bird]</span>
</span><span class='line'>    <span class="nv">atom</span> <span class="mi">1</span> <span class="c1">;=&gt; #</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="k">def </span><span class="nv">dog</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">dog</span> <span class="c1">;=&gt; 16</span>
</span><span class='line'>    <span class="k">def </span><span class="nv">cat</span> <span class="mi">18</span>
</span><span class='line'>    <span class="nv">cat</span> <span class="c1">;=&gt; 18</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vectors are a bit interesting in the respect that you don&rsquo;t need to input the square brackets. If you just put in space delimited items, it will automatically construct a vector for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="c1">;=&gt; [1 2 3 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>You can create anonymous functions with the fn [x] syntax from clojure. And call them with surrounding parens. You can call regular functions by the () notation or the shorthand :.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span> <span class="c1">;=&gt; fn</span>
</span><span class='line'><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">;=&gt; fn</span>
</span><span class='line'><span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">;=&gt; 4</span>
</span><span class='line'><span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">]</span> <span class="nb">+ </span><span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">;=&gt; 6</span>
</span><span class='line'><span class="p">((</span><span class="k">fn </span><span class="p">[]</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]))</span> <span class="c1">;=&gt; [4 5 6]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">defn </span><span class="nv">dog</span> <span class="p">[]</span> <span class="s">&quot;woof&quot;</span>
</span><span class='line'><span class="nv">dog</span><span class="err">:</span> <span class="c1">;=&gt; &quot;woof&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>To see the complete documentation &ndash; please visit the <a href="https://github.com/gigasquid/babar">Github repo</a>.</p>

<h2>Show Me Babar Speech Acts</h2>

<p>Now that we have the basics. Let&rsquo;s look at example of running a program with speech acts.
This one speaks its beliefs and has assertions, a request, and queries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">speak-config</span> <span class="nv">true.</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">sunny</span> <span class="nv">false.</span>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">nice-day</span> <span class="s">&quot;It is a nice day.&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">= </span><span class="nv">sunny</span> <span class="nv">true.</span>
</span><span class='line'><span class="nv">request</span> <span class="nv">*open-window</span> <span class="nb">when </span><span class="o">#</span><span class="nv">nice-day</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">println </span><span class="s">&quot;Opened the window&quot;</span><span class="nv">.</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-is-done</span> <span class="nv">*open-window?</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">sunny</span> <span class="nv">true.</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-is-done</span> <span class="nv">*open-window?</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('bt2iYsVyCOM');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/bt2iYsVyCOM?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/bt2iYsVyCOM/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=bt2iYsVyCOM" id="bt2iYsVyCOM" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Babar Speech Acts</div>
</a>
<div class="video-info" >Examples of Speech Acts in the Babar language https://github.com/gigasquid/babar</div>
</div>


<p>Here is another one that shows using a request until a belief is held.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">speak-config</span> <span class="nv">true.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">assert </span><span class="nv">counter</span> <span class="nv">atom</span> <span class="mi">1</span><span class="nv">.</span>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">done</span> <span class="s">&quot;I am done counting&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">&gt; </span><span class="err">@</span><span class="nv">counter</span> <span class="mi">3</span><span class="nv">.</span>
</span><span class='line'><span class="nv">request</span> <span class="nv">*count-up</span> <span class="nv">until</span> <span class="o">#</span><span class="nv">done</span> <span class="k">fn </span><span class="p">[]</span> <span class="nv">swap!</span> <span class="nv">counter</span> <span class="nv">inc.</span>
</span><span class='line'><span class="nv">sleep</span> <span class="mi">25</span><span class="nv">.</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-value</span> <span class="nv">*count-up?</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('aT8MK0w71LM');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/aT8MK0w71LM?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/aT8MK0w71LM/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=aT8MK0w71LM" id="aT8MK0w71LM" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Babar Speech Acts - using requests and until</div>
</a>
<div class="video-info" >An example of Babar speech acts using requests until a belief is held.

https://github.com/gigasquid/babar</div>
</div>


<p>Here the REPL asks you a question if you give it an undeclared var</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">speak-config</span> <span class="nv">true.</span>
</span><span class='line'><span class="nv">ask-config</span> <span class="nv">true.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">request</span> <span class="nv">*task1</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">+ </span><span class="mi">10</span> <span class="nv">x.</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-is-done</span> <span class="nv">*task1?</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">x</span> <span class="mi">3</span><span class="nv">.</span>
</span><span class='line'><span class="nv">sleep</span> <span class="mi">10</span><span class="nv">.</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-is-done</span> <span class="nv">*task1?</span>
</span><span class='line'><span class="nv">query</span> <span class="nv">request-value</span> <span class="nv">*task1?</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('nmi_fafmjsg');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/nmi_fafmjsg?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/nmi_fafmjsg/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=nmi_fafmjsg" id="nmi_fafmjsg" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Babar asking you a question</div>
</a>
<div class="video-info" >An example of the speech acts in Babar.  In this example, the REPL asks you a question about what an undeclared var should be.

https://github.com/gigasquid/babar</div>
</div>


<h2>Autonomous AR Drone Flight with Babar REPL</h2>

<p>Since the language is aimed at communincating with machines. It is only natural that I use it to talk to the AR Drone.
Here is a program that has the drone take off, get to a cruising altitude, and land &ndash; all using speech acts (and the <a href="https://github.com/gigasquid/clj-drone">clj-drone library</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">speak-config</span> <span class="nv">true.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">import </span><span class="s">&quot;clj-drone.core&quot;</span><span class="nv">.</span>
</span><span class='line'><span class="nb">import </span><span class="s">&quot;clj-drone.navdata&quot;</span><span class="nv">.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">assert </span><span class="nv">get-navdata</span> <span class="p">[</span><span class="nv">key</span><span class="p">]</span> <span class="nb">get </span><span class="err">@</span><span class="nv">nav-data</span> <span class="nv">key.</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">navdata-equal</span> <span class="p">[</span><span class="nb">key </span><span class="nv">val</span><span class="p">]</span> <span class="nb">= </span><span class="p">(</span><span class="nf">get-navdata</span> <span class="nv">key</span><span class="p">)</span> <span class="nv">val.</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">navdata-gt</span> <span class="p">[</span><span class="nb">key </span><span class="nv">val</span><span class="p">]</span> <span class="nb">&gt; </span><span class="p">(</span><span class="nf">get-navdata</span> <span class="nv">key</span><span class="p">)</span> <span class="nv">val.</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">init-drone</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">drone-initialize</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'><span class="nb">assert </span><span class="nv">init-nav</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">drone-init-navdata</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">landed</span> <span class="s">&quot;I am on the ground&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">navdata-equal</span> <span class="ss">:control-state</span> <span class="ss">:landed</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">flying</span> <span class="s">&quot;I am flying&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">or </span><span class="p">(</span><span class="nf">navdata-equal</span> <span class="ss">:control-state</span> <span class="ss">:flying</span><span class="p">)</span>
</span><span class='line'>                                        <span class="p">(</span><span class="nf">navdata-equal</span> <span class="ss">:control-state</span> <span class="ss">:hovering</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">high-enough</span> <span class="s">&quot;I am high enough&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">navdata-gt</span> <span class="ss">:altitude</span> <span class="mf">1.5</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">request</span> <span class="nv">*take-off</span> <span class="nb">when </span><span class="o">#</span><span class="nv">landed</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">drone</span> <span class="ss">:take-off</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'><span class="nv">request</span> <span class="nv">*cruising-alt</span> <span class="nb">when </span><span class="o">#</span><span class="nv">flying</span> <span class="nv">until</span> <span class="o">#</span><span class="nv">high-enough</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">drone</span> <span class="ss">:up</span> <span class="mf">0.1</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'><span class="nv">request</span> <span class="nv">*land</span> <span class="nb">when </span><span class="o">#</span><span class="nv">high-enough</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">drone</span> <span class="ss">:land</span><span class="p">)</span><span class="nv">.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">convince</span> <span class="o">#</span><span class="nv">done</span> <span class="s">&quot;Whee! I am done.&quot;</span> <span class="k">fn </span><span class="p">[]</span> <span class="nb">and </span><span class="p">(</span><span class="nf">navdata-equal</span> <span class="ss">:control-state</span> <span class="ss">:landed</span><span class="p">)</span>
</span><span class='line'>                                            <span class="nv">query</span> <span class="nv">request-is-done</span> <span class="nv">*land.</span>
</span><span class='line'><span class="nv">request</span> <span class="nv">*end-navstream</span> <span class="nb">when </span><span class="o">#</span><span class="nv">done</span> <span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">end-navstream</span><span class="p">)</span><span class="nv">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('CIzR8jD2d3c');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/CIzR8jD2d3c?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/CIzR8jD2d3c/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=CIzR8jD2d3c" id="CIzR8jD2d3c" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Flying an AR Drone with Babar Speech Acts</div>
</a>
<div class="video-info" >In this example, we import the clojure clj-drone library https://github.com/gigasquid/clj-drone, and use it to have the drone autonomously fly, get to a cruising altitude and land - all while vocalizing its beliefs.

https://github.com/gigasquid/babar</div>
</div>


<h2>Conclusion and Thanks</h2>

<p>I can honestly say, that this has been one of the most enjoyable programming quests. I encourage you all to look at McCarthy&rsquo;s papers, Clojure, Instaparse, and of course, hacking robots. A special thanks to all the Cincy folks at <a href="http://www.neo.com/">Neo</a> who have supported me through my gentle obsessions and have let me have the freedom to follow my curiosity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing a Language with Clojure and Instaparse]]></title>
    <link href="http://gigasquid.github.io/blog/2013/05/01/growing-a-language-with-clojure-and-instaparse/"/>
    <updated>2013-05-01T22:08:18-04:00</updated>
    <id>http://gigasquid.github.io/blog/2013/05/01/growing-a-language-with-clojure-and-instaparse</id>
    <content type="html"><![CDATA[<p>Creating your own programming language with Clojure and <a href="https://github.com/Engelberg/instaparse">Instaparse</a> is like building rainbows with s-expressions.  The Instaparse library is an elegant way of building executable parsers trees with pattern matching and <a href="http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"><em>standard EBNF notation</em></a> for context-free grammars. Since this is my first foray into parser trees and grammars, I thought I would share my learnings in this post.</p>

<h2>Starting with a Single Word</h2>

<p>Let&rsquo;s start with the simplest example:  a number.  When we start up our REPL in our brand new language, we want to be able to enter an integer, and have evaluate as an integer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">MyCoolLang&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Using the instaparse library, we define a number to be a regex matching an integer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">coollang.parser</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">instaparse.core</span> <span class="ss">:as</span> <span class="nv">insta</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">parser</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">insta/parser</span>
</span><span class='line'>   <span class="s">&quot;number = #&#39;[0-9]+&#39;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">parser</span> <span class="s">&quot;1&quot;</span><span class="p">)</span> <span class="c1">;=&gt;; [:number &quot;1&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>We now have a parser tree node that is of a type number. Pretty nice so far, but more rainbows are coming. You can make elegant transformations on the parser tree, and does them in a bottom up fashion, so you can use it for evaluation as well. In our simple number example, we are applying the read-string function on the :number node to turn it into a int.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">transform-options</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:number</span> <span class="nv">read-string</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">parser</span> <span class="nv">input</span><span class="p">)</span> <span class="p">(</span><span class="nf">insta/transform</span> <span class="nv">transform-options</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;1&quot;</span><span class="p">)</span> <span class="c1">;=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h2>Adding on spaces and vectors</h2>

<p>Let&rsquo;s build on a bit more. When someone enters in a sequence of numbers separated by spaces, it will be defined as a vector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">MyCoolLang&gt;</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>We need to add the notion of spaces, spaces with numbers, and vectors into our grammar, as well as the rules
for evaluating these new nodes.  Notice that we use the &lt;> notation to hide the definition in the parser tree.  The + means one or more times.  The * means 0 or more times, and the | means or.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">parser</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">insta/parser</span>
</span><span class='line'>   <span class="s">&quot;expr = number | vector</span>
</span><span class='line'><span class="s">    vector = snumber+ number</span>
</span><span class='line'><span class="s">    &lt;snumber&gt; = (number space)*</span>
</span><span class='line'><span class="s">    &lt;space&gt; = &lt;#&#39;[ ]+&#39;&gt;</span>
</span><span class='line'><span class="s">    number = #&#39;[0-9]+&#39;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">parser</span> <span class="s">&quot;1 2 3 4&quot;</span><span class="p">)</span> <span class="c1">;=&gt; [:expr [:vector [:number &quot;1&quot;] [:number &quot;2&quot;] [:number &quot;3&quot;] [:number &quot;4&quot;]]]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">transform-options</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:number</span> <span class="nv">read-string</span>
</span><span class='line'>   <span class="ss">:vector</span> <span class="p">(</span><span class="nb">comp </span><span class="nv">vec</span> <span class="nv">list</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:expr</span> <span class="nv">identity</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">parser</span> <span class="nv">input</span><span class="p">)</span> <span class="p">(</span><span class="nf">insta/transform</span> <span class="nv">transform-options</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;1 2 3 4&quot;</span><span class="p">)</span> <span class="c1">;=&gt; [1 2 3 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h2>Adding in operations</h2>

<p>Pretty cool. We have numbers and vectors. Let&rsquo;s see if we can do something fun like do some simple math on these vectors or numbers. We want it so when we type in + and some numbers, it adds them up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">MyCoolLang&gt;</span> <span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Of course we need to further expand our grammar and rules.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">parser</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">insta/parser</span>
</span><span class='line'>   <span class="s">&quot;expr = number | vector | operation</span>
</span><span class='line'><span class="s">    operation = operator space+ vector</span>
</span><span class='line'><span class="s">    operator = &#39;+&#39; | &#39;-&#39; | &#39;*&#39; | &#39;/&#39;</span>
</span><span class='line'><span class="s">    vector = snumber+ number</span>
</span><span class='line'><span class="s">    &lt;snumber&gt; = (number space)*</span>
</span><span class='line'><span class="s">    &lt;space&gt; = &lt;#&#39;[ ]+&#39;&gt;</span>
</span><span class='line'><span class="s">    number = #&#39;[0-9]+&#39;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">parser</span> <span class="s">&quot;+ 1 2 3 4&quot;</span><span class="p">)</span> <span class="c1">;=&gt; [:expr</span>
</span><span class='line'> <span class="c1">;                        [:operation</span>
</span><span class='line'> <span class="c1">;                         [:operator &quot;+&quot;]</span>
</span><span class='line'> <span class="c1">;                           [:vector [:number &quot;1&quot;] [:number &quot;2&quot;] [:number &quot;3&quot;] [:number &quot;4&quot;]]]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">choose-operator</span> <span class="p">[</span><span class="nv">op</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">case</span> <span class="nv">op</span>
</span><span class='line'>    <span class="s">&quot;+&quot;</span> <span class="nv">+</span>
</span><span class='line'>    <span class="s">&quot;-&quot;</span> <span class="nv">-</span>
</span><span class='line'>    <span class="s">&quot;*&quot;</span> <span class="nv">*</span>
</span><span class='line'>    <span class="s">&quot;/&quot;</span> <span class="nv">/</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">transform-options</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:number</span> <span class="nv">read-string</span>
</span><span class='line'>   <span class="ss">:vector</span> <span class="p">(</span><span class="nb">comp </span><span class="nv">vec</span> <span class="nv">list</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:operator</span> <span class="nv">choose-operator</span>
</span><span class='line'>   <span class="ss">:operation</span> <span class="nv">apply</span>
</span><span class='line'>   <span class="ss">:expr</span> <span class="nv">identity</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">parser</span> <span class="nv">input</span><span class="p">)</span> <span class="p">(</span><span class="nf">insta/transform</span> <span class="nv">transform-options</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;+ 1 2 3 4&quot;</span><span class="p">)</span> <span class="c1">;=&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h2>Add a REPL</h2>

<p>All we need now is a cool REPL to start working in:
We just need a main function to call our REPL, (Read &ndash; Evaluate &ndash; Print &ndash; Loop), and we are all set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">coollang.repl</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">coollang.parser</span> <span class="ss">:as</span> <span class="nv">parser</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">repl</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">print </span><span class="s">&quot;MyCoolLang&gt; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">flush</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">input</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nf">parser/parse</span> <span class="nv">input</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hello MyCoolLang!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;===============&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">flush</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">repl</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<h2>Closing and Inspiration</h2>

<p>I have enjoyed playing around and learning about creating programming languages with Clojure and instaparse.
It truly is a beautiful library. If you need any more inspiration to start creating your own programming language, may I recommend:</p>

<ul>
<li><p><a href="http://www.youtube.com/watch?v=_ahvzDzKdB0">Growing a Program Language by Guy Steele </a>&ndash; A classic and amazing talk about designing programming languages.</p></li>
<li><p><a href="https://github.com/bodil/BODOL">BODOL</a> &ndash; A language experiment using Clojure and Instaparse</p></li>
</ul>


<p>Now go forth and create!</p>
]]></content>
  </entry>
  
</feed>
