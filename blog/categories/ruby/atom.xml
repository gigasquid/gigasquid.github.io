<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2014-07-06T22:48:57-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Semantic Web and JRuby]]></title>
    <link href="http://gigasquid.github.io/blog/2011/08/07/semantic-web-and-jruby/"/>
    <updated>2011-08-07T22:30:21-04:00</updated>
    <id>http://gigasquid.github.io/blog/2011/08/07/semantic-web-and-jruby</id>
    <content type="html"><![CDATA[<p>I got the chance to share my enthusiasm for two of my favorite technologies at JRubyConf by giving a presentation on Semantic Web and JRuby. It was an excellent experience. I was able to connect with other people that shared my interest in the Semantic Web and some that have even worked with the technologies professionally. Most exciting, I had the opportunity to share my knowledge and hopefully inspire others to look farther into using JRuby with the Jena Semantic Web Framework.</p>

<p>Here are some resources from the presentation that I wanted to share with everyone:</p>

<p>On github, <a href="https://github.com/gigasquid/jruby_semantic_web_examples">https://github.com/gigasquid/jruby_semantic_web_examples</a>, I put together some examples of SPARQL queries against dbpedia as well as translating the examples that they have on the <a href="http://jena.sourceforge.net/tutorial/RDF_API/index.html">Jena RDF API</a> to use JRuby</p>

<p>Here is the presentation itself:
<a href="https://github.com/gigasquid/Presentations/blob/master/SemanticWebJRuby.pdf">https://github.com/gigasquid/Presentations/blob/master/SemanticWebJRuby.pdf</a></p>

<p>A special note of thanks to <a href="http://foaf-visualizer.org/?uri=http://purl.org/net/bsletten">Brian Sletten</a>, the Semantic Web guru, who inspired and exposed me to the Semantic Web, helped me out by answering my questions and pointing me in the right direction and for just being a swell guy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yellow Belt Katas for Ruby and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2011/04/15/yellow-belt-katas-for-ruby-and-clojure/"/>
    <updated>2011-04-15T23:11:29-04:00</updated>
    <id>http://gigasquid.github.io/blog/2011/04/15/yellow-belt-katas-for-ruby-and-clojure</id>
    <content type="html"><![CDATA[<p>I have put a couple projects out on GitHub to help people get started with Clojure and Ruby.
The Katas are taken more or less from the Coding Kata site <a href="http://codingkata.org/katas/">http://codingkata.org/katas/</a>. The projects both include the basic project setup for you to get started with TDD beginner katas.</p>

<p>The Ruby project has tests in the form of rspec-given, which is quite fun. The Clojure project has tests in the form of Midje, which has a lovely syntax.</p>

<p>Please give them a try :)</p>

<p><a href="https://github.com/gigasquid/yellow_belt_ruby_katas">https://github.com/gigasquid/yellow_belt_ruby_katas</a>
<a href="https://github.com/gigasquid/yellow_belt_clojure_katas">https://github.com/gigasquid/yellow_belt_clojure_katas</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Thinking in Ruby and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2011/04/07/on-thinking-in-ruby-and-clojure/"/>
    <updated>2011-04-07T22:02:09-04:00</updated>
    <id>http://gigasquid.github.io/blog/2011/04/07/on-thinking-in-ruby-and-clojure</id>
    <content type="html"><![CDATA[<p>Recently, I decided to work on a set of code Katas.  I couldn&rsquo;t decide whether to do them in Ruby or Clojure, so I decided to do them in both.  I did the Kata in Ruby first and then immediately followed up with the same one in Clojure.  It was an interesting exercise, not only for the learning of the languages, but to highlight how I thought about the problems differently depending on the language.</p>

<p>Ruby is a fantastic language.  It would delight and sometimes surprise me with how elegant and natural it was to solve problems.  When I approached the Kata, I found myself thinking, “How can I make this more readable?”.   Ruby never failed to please.</p>

<p>Clojure is also a wonderful language.  One of the things that I really enjoy about it is that it changed that way that I approach problems.  This was particularly evident when I turned to solve the same problem in Ruby that I just had in Clojure.  First and foremost, I thought about the data.  Then about how the data could be transformed.  The transformation isn&rsquo;t like the serial steps that you normally take to hold the data in your hand and bit by bit mold it into the result – like a sculptor with clay.  It is the kind of transformation that takes a rolled ball of yarn and transforms into a beautiful lace pattern.</p>

<p>The closest that I had come to this functional way of thinking was when I was doing some heavy SQL and database work.  I went to a talk by Jay Pipes on MySQL.  I remember him saying that to be really good at SQL, you needed to think in sets.  You couldn&rsquo;t effectively solve the queries with the regular programming for-loop construct.  You needed to think of the sets of data joining and intersecting and the transformations needed to be applied to the data elements.  The same focus on the data seemed to hold true for Clojure too.</p>

<p>I highly recommend both Ruby and Clojure as programming languages.  Each are dynamic, elegant and powerful and a lot of fun.  Next time you sit down to do a Kata, and can&rsquo;t decide what language to use, try them both – and let me know how you think&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen and Zombies - Adventures in Ruby]]></title>
    <link href="http://gigasquid.github.io/blog/2010/11/19/zen-and-zombies/"/>
    <updated>2010-11-19T23:06:07-05:00</updated>
    <id>http://gigasquid.github.io/blog/2010/11/19/zen-and-zombies</id>
    <content type="html"><![CDATA[<p>What do Zen and Zombies have in common?  You probably got the beginning with the letter “Z”, but did you also guess Ruby?  This blog post is to share two awesome and fun filled ways to learn Ruby and Ruby and Rails.</p>

<p>First, let&rsquo;s start with the Zen.  <a href="http://edgecase.com/">Edgecase </a>created a great way of learning Ruby.  It is through <a href="http://rubykoans.com/">Ruby Koans </a>.   Koans are a way of teaching Zen through questions.  The master asks the student a question.  The student then meditates on it until they come to the answer , eventually leading to enlightenment.  The Ruby Koans are cleverly designed to teach bite size tidbits of the Ruby language through the completion of unfinished test cases.  Each test case is a Koan.  Every time you fix the test case by filling in the blanks, you are gaining a deeper understanding of the language.  The main path_to_enlightment.rb file leads you through test cases that explore many areas of the languages such as Strings, Classes, Methods, and Exceptions.  Enlightenment has never been so much fun.</p>

<p>Moving from enlightenment to tasty brains for Zombies, we have Rails for Zombies <a href="http://railsforzombies.org/">http://railsforzombies.org</a>.  <a href="http://envylabs.com/">Envy Labs </a> has raised the bar in online tutorials.   The traditional way to learn Ruby on Rails is to download the programs, struggle a bit as you figure out how to install it and then work through exercises locally through a book, website guide or podcast.  Rails for Zombies takes out all the pain of the traditional way and replaces it with enjoyment.  Everything is done in the browser, including code.  The format is to watch a video with Zombies and Rails code and then take what you learned by completing a lab exercise in the browser.  After you complete the lab, you unlock the next video.  Over the course of five labs, you create a Twitter web app for the Zombie hoard.  It&rsquo;s a win for you and the Zombies.</p>

<p>So if you are curious about Ruby, these are two great ways to try it out.  I promise you that will have fun learning.  Although, some people may also experience occasional uncontrollable desire to eat brains&hellip;.</p>

<p><em>Photo Credits</em></p>

<p><em>Zen: </em><a href="http://www.flickr.com/photos/shebalso/121744939/">http://www.flickr.com/photos/shebalso/121744939/</a></p>

<p>Zombie: <a href="http://www.flickr.com/photos/70109407@N00/5188908499/">http://www.flickr.com/photos/70109407@N00/5188908499/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openssl fix for Rails 3.0 on Ubuntu]]></title>
    <link href="http://gigasquid.github.io/blog/2010/09/12/openssl-fix-for-rails-3-0-on-ubuntu/"/>
    <updated>2010-09-12T10:11:14-04:00</updated>
    <id>http://gigasquid.github.io/blog/2010/09/12/openssl-fix-for-rails-3-0-on-ubuntu</id>
    <content type="html"><![CDATA[<p>If you are trying to run ruby rvm and rails 3.0 on Ubuntu you might run into this problem when you start up you server.</p>

<pre><code>LoadError: no such file to load
-- openssl
</code></pre>

<p>After much googling and researching – just installing the openssl library on your system won&rsquo;t fix the problem.  You need to recompile and install your rvm ruby version with the openssl.  I found this fixed it for me.</p>

<pre><code>rvm install 1.9.2-p0 -C --with-openssl-dir=$rvm_path/usr
</code></pre>

<p>There is also another solution
<a href="http://cjohansen.no/en/ruby/ruby_version_manager_ubuntu_and_openssl"> here so you don&rsquo;t have to recompile every time</a></p>
]]></content>
  </entry>
  
</feed>
