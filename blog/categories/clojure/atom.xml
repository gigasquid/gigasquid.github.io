<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure, | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2017-11-07T19:37:32-05:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Embedded Interop between Clojure, R, and Python with GraalVM]]></title>
    <link href="http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm/"/>
    <updated>2017-10-22T16:02:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://images-na.ssl-images-amazon.com/images/M/MV5BOTViY2Y0ZGItMTg2OC00YzEzLWJhYjYtZjg4OTMyOWE4YzM1XkEyXkFqcGdeQXVyNTQ1NzU4Njk@._V1_.jpg">https://images-na.ssl-images-amazon.com/images/M/MV5BOTViY2Y0ZGItMTg2OC00YzEzLWJhYjYtZjg4OTMyOWE4YzM1XkEyXkFqcGdeQXVyNTQ1NzU4Njk@._V1_.jpg</a>" title="" ></p>

<p>In my talk at <a href="https://www.youtube.com/watch?v=eLl6_k_fZn4">Clojure Conj</a> I mentioned how a project from Oracle Labs named GraalVM might have to potential for Clojure to interop with Python on the same VM. At the time of the talk, I had just learned about it so I didn&rsquo;t have time to take a look at it. Over the last week, I&rsquo;ve managed to take it for a test drive and I wanted to share what I found.</p>

<h3>Are you ready?</h3>

<p>In this example, we will be using an ordinary Leinengen project and using the REPL we will interop with both R and python.</p>

<p>But first will need a bit of setup.</p>

<p>We will download the <a href="http://www.oracle.com/technetwork/oracle-labs/program-languages/downloads/index.html">Graal project</a> so we can use its <code>java</code> instead of our own.</p>

<p>Once we have it downloaded we will configure our PATH to use Graal&rsquo;s java instead of our own.</p>

<p>```</p>

<h1>export PATH=/path/to/graalAndTruffle/bin:$PATH</h1>

<p>```</p>

<p>Now, we can create a new lein project and run <code>lein repl</code> and begin the fun.</p>

<h3>The Polyglot Context</h3>

<p>In our new namespace, we just need to import the <a href="http://graalvm.github.io/graal/truffle/javadoc/org/graalvm/polyglot/Context.html">Polyglot Context</a> to get started:</p>

<p>```clojure
(ns graal-test.core
  (:import (org.graalvm.polyglot Context)))</p>

<p>;; note that is also supports Ruby, LLVM, and JS
(def context (Context/create (into-array [&ldquo;python&rdquo; &ldquo;R&rdquo;])))
```</p>

<p>Now, we are ready to actually try to run some R and Python code right in our REPL. Let&rsquo;s start first with R.</p>

<h3>Interoping with R</h3>

<p>The main function we are going to use is the <code>eval</code> function in the context. Let&rsquo;s start small with some basic math.</p>

<p><code>clojure
(.eval context "R" "
3^2 + 2^2
")
;=&gt; #object[org.graalvm.polyglot.Value 0x7ff40e4d "13.0"]
</code></p>

<p>Wow! It actually did something. It returned something called a <a href="https://github.com/graalvm/graal/blob/master/sdk/src/org.graalvm.polyglot/src/org/graalvm/polyglot/Value.java">Polyglot Value</a> with what looks like the right answer in it.</p>

<p>Emboldened by our early success, let&rsquo;s try something a little more complicated like calling a function.</p>

<p><code>clojure
(def result1 (.eval context "R" "
sum.of.squares &lt;- function(x,y) {
  x^2 + y^2
}
sum.of.squares(3,4)
"))
;=&gt; #object[org.graalvm.polyglot.Value 0xc3edd92 "25.0"]
</code></p>

<p>Again, it looks like it worked. Let&rsquo;s try to get the result back into Clojure as a value we can work with. We could ask the result what sort of type it is with</p>

<p><code>clojure
(.isNumber result1) ;=&gt; true
</code></p>

<p>but let&rsquo;s just use <code>clojure.edn</code> to read the string and save some time.</p>

<p>```
(defn &ndash;>clojure [polyglot-value]
  (&ndash;> polyglot-value</p>

<pre><code>  (.toString)
  (clojure.edn/read-string)))
</code></pre>

<p>(&ndash;>clojure result1) ;=> 25
```</p>

<p>It would be nice to have a easier way to export symbols and import symbols to and from the guest and host language. In fact, Graal provides a way to do this but to do this in Clojure, we would need something else called <a href="https://github.com/graalvm/graal/tree/master/truffle">Truffle</a>.</p>

<p>Truffle is part of the Graal project and is a framework for implementing languages with the Graal compliler.
There are quite a few languages implemented with the Truffle framework. R is one of them.</p>

<p><img class="<a" src="href="https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-14-638.jpg?cb=1495364615">https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-14-638.jpg?cb=1495364615</a>"></p>

<p>My understanding is that if Clojure was implemented as a truffle lang, then interop could be much more seamless like this example in Ruby</p>

<p><img class="<a" src="href="https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-37-638.jpg?cb=1495364615">https://image.slidesharecdn.com/polyglotonthejvmwithgraalenglish-170521104613/95/polyglot-on-the-jvm-with-graal-english-37-638.jpg?cb=1495364615</a>"></p>

<p>But let&rsquo;s continue in our exploration. What about doing something more interesting, like importing a useful R library and using it. How about the <a href="https://www.rdocumentation.org/packages/numDeriv/versions/2016.8-1">numDeriv</a> package that supports Accurate Numerical Derivatives?</p>

<p>First we import the package using cran.</p>

<p><code>clojure
(.eval context "R" "
install.packages(\"numDeriv\", repos = \"http://cran.case.edu/\")
")
</code></p>

<p>If you are doing this at your REPL, you can will see lots of text going on in your <code>lein repl</code> process at this point. It&rsquo;s going out and figuring out what deps you need and installing them in your <code>/graalvm-0.28.2/jre/languages/R</code> directory structure.</p>

<p>After it is done, we can actually use it!</p>

<p>```clojure
(def result2 (.eval context &ldquo;R&rdquo; &ldquo;
library(numDeriv)
grad(sin, (0:10)<em>2</em>pi/10)
&rdquo;))
result2 ;=> #object[org.graalvm.polyglot.Value 0x76765898 &ldquo;c(1,</p>

<pre><code>    ;0.809016994367249, 0.309016994372158, -0.309016994373567,
    ;-0.809016994368844, -0.999999999993381, -0.809016994370298,
    ;-0.309016994373312, 0.309016994372042, 0.809016994369185,
    ;0.999999999993381)"]
</code></pre>

<p>```</p>

<p>This has a bit more interesting result as an array. But the Context has ways of dealing with it.</p>

<p>```clojure
(.hasArrayElements result2) ;=> true
(.getArraySize result2) ;=> 11</p>

<p>(for [i (range 10)]
  (&ndash;> (.getArrayElement result2 i) (&ndash;>clojure)))
;=> (1.0 0.8090169943672489 0.3090169943721585 -0.3090169943735675
;-0.8090169943688436 -0.9999999999933814
; -0.8090169943702977 -0.3090169943733122 0.30901699437204233
; 0.8090169943691851)
```</p>

<p>So, we&rsquo;ve showed basic interop with R &ndash; which is pretty neat. What about Python?</p>

<h3>Interoping with Python</h3>

<p>Truffle is scheduled to fully support Python in 2018, but there is already an early alpha version in the Graal download that we can play with.</p>

<p><code>clojure
(.eval context "python" "
import time;
time.clock()
")
 ;=&gt; #object[org.graalvm.polyglot.Value 0x4a6b3b70 "1.508202803249E9"]
</code></p>

<p>Neat!</p>

<p>It is still a long way for <code>import numpy</code> or <code>import tensorflow</code> but cPython compatibility is the goal. Although the c-extensions are the really tricky part.</p>

<p>So keep an eye on Graal and Truffle for the future and wish the Oracle Labs team the best on their mission to make the JVM Polyglot.</p>

<h3>Footnotes</h3>

<p>If you are interested in playing with the code. I have a github repo here <a href="https://github.com/gigasquid/graal-test">graal-test</a>. If you are interested in watching a video, I really liked <a href="https://www.youtube.com/watch?v=TQMKPRc6cbE">this one</a>. There are also some really nice examples of running in polyglot mode with R and Java and JS here <a href="https://github.com/graalvm/examples">https://github.com/graalvm/examples</a>.</p>
]]></content>
  </entry>
  
</feed>
