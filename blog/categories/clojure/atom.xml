<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2014-07-28T21:22:20-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Proper Pronunciation of Clojure's Assoc]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc/"/>
    <updated>2014-07-28T20:27:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc</id>
    <content type="html"><![CDATA[<p>Sometimes I pause before talking to someone about Clojure code. Not because I am unsure of the code, but because I am unsure of
how to pronounce the code.  The particular code in question is
Clojure&rsquo;s <em>assoc</em>.  I have heard it pronounced two ways. One is
&ldquo;assosh&rdquo;, the other is &ldquo;assok&rdquo;.  So, to determine it, I decided to conduct a
scientific poll of the Clojure community.</p>

<p>I posted the poll on
<a href="https://twitter.com/gigasquid/status/493891057906896896">twitter</a> to
the Cojure community who follow me.  The control group poll was viewed
by those who do not follow me, and/or, are not on twitter.</p>

<p>The results were startling.</p>

<p><img class="<a" src="href="https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg">https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg</a>"></p>

<ul>
<li>assosh &ndash; 10</li>
<li>assok  &ndash; 8</li>
<li>assose &ndash; 2</li>
<li>Jeremy &ndash; 1</li>
<li>asoaksh &ndash; 1</li>
</ul>


<p>The community is clearly deeply divided on this important question.</p>

<p>After sifting through the raw data, I remembered my statistical analysis and threw out the extremes.</p>

<p><img class="<a" src="href="https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg">https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg</a>"></p>

<p>The conclusion was still a stark reality.</p>

<p><em>We do not as a community know how to pronounce assoc.</em></p>

<h2>Solution</h2>

<p>I can only see one way forward.  We must address this as a community.
I propose that the community documentation of <a href="http://clojuredocs.org/">Clojure Docs</a>
and <a href="http://grimoire.arrdem.com/">Grimoire</a> modify their sites to include audio pronunciation like <a href="http://www.macmillandictionary.com/us/media/british/uk_pron/l/lla/llama/llama_British_English_pronunciation.mp3">this</a>.</p>

<p>Remember, I&rsquo;m pulling for you.  We are all in this together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure X-Men]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/27/clojure-x-men/"/>
    <updated>2014-07-27T20:12:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/27/clojure-x-men</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg">https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg</a>"></p>

<p>Nobody knows how it happened.  Some people think it was due to the rapid expansion and adoption of Clojure.  Other people say that the language itself was caused by something deeper and more magical.  No one knows for sure.  All that we really know is that people starting being born with extraordinary powers.  Powers that no human had had before.  They were strange and unique to each person they touched.  The only thing that they all had in common, was that each was an aspect of the Clojure programming language.</p>

<h2>Luke (AKA Lazy Luke)</h2>

<p>Luke was a teenager when his powers came to him.  His mother always complained that he was lazy.  It was true, he did prefer to sleep until noon.  He also had a habit of putting everything off to the last minute, like saving all his papers for the night before they were due.  One day, though, he noticed something very strange.  He could start to see the future.  Well not really “see” it.  But he could see the infinite possibilities  of the future.  Not very far into the future, but enough.  It was a few milliseconds at first.  But now it was up to a full second.  He checked the Clojure Docs as soon as he realized his gift.  It was lazy evaluation and power to deal with infinite sequences.</p>

<h2>Spress</h2>

<p>Spress, whose real name is Emily, came into her power early.  She was
only 5 years old.  Her mother had taken her to a farm to visit with
the animals.  Her mother had pointed at the cow and told her daughter
that it said “Moo”.  Then, at the horse, saying “Neigh”.  Spress
smiled and  pointed at a bucket and said “cow”.  Her mother shook her head at her, but Spress only smiled bigger.  She said “cow” again.  Then, suddenly, the bucked went “Moo”.  She was immediately taken to the Clojure X-Men school, where they identified her power as protocols.  She trained her power and now is so good at solving the “expression problem”, she is known as “Spress”.</p>

<h2>Multi</h2>

<p>Nobody knows Multi’s background.  He came to notice in his early twenties with his powers.  Ordinary humans process sensory input, (like sight, touch, and sound), in an asynchronous fashion.  However, when it gets processed in the brain, it runs into a single pipeline bottleneck  &ndash; consciousness.  Multi’s power is that he can concurrently process his higher level consciousness and reasoning to all this sensory input.  The result is that he can move, think, and perform super fast  and in a super smart way.
He got the power of Clojure’s concurrency.</p>

<h2>Dot</h2>

<p>Dot always had a way with animals.  She had many pets growing up.  Later, she would go into the forest and the animals would seek her out.  She would be found resting by a tree surrounded by deer and birds.  One time, on her walk, she fell down a ditch and had her leg trapped under a log.  Her mother arrived, after searching for her, to see a Bear reach down and gently remove the log.   She stood dumbfounded, as her daughter thanked the bear and it nodded in reply as it turned away.   She could talk with animals effortlessly.  She had the power of Clojure’s Interop.</p>

<h2>Bob</h2>

<p>Bob is the leader of the Clojure X-Men.  He seeks out people with the
power of Clojure and helps train and educate them.  He also is the
most powerful.  He can come into any argument, problem, or challenge
and immediately separate out what is most important to focus on.  He
always knows the right thing to do, without getting bogged down in
unnecessary details .  His power is Clojure’s simplicity.</p>

<p>There might be others out there, we don’t know.  We can only hope, that they are found by Bob and the Clojure X-Men and use their powers for good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[World Domination with Hexapods and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure/"/>
    <updated>2014-03-20T21:00:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure</id>
    <content type="html"><![CDATA[<p>Once you have your <a href="http://gigasquidsoftware.com/blog/2014/03/19/walking-with-hexapods/">hexapod assembled and running using the hand held
controller</a>,
of course, your thoughts naturally turn to world domination.</p>

<h2>The most powerful tool in the world is the Clojure REPL</h2>

<p>World domination requires the most powerful tools available.  That of
course calls for Clojure and the Clojure REPL.  I recommend Emacs
as the editor of choice of such an endeavor.  However, it if you are
content with city, state, or single country domination, other editors
that support Clojure are also fine.</p>

<h2>Connect the XBee to your computer</h2>

<p>First, we need to get the computer to talk to the hexapod wirelessly.
We can do this with a <a href="http://www.trossenrobotics.com/uartsbee">USB to Serial adapter</a>
that uses the paired XBee from the handheld commander.</p>

<p>Take the XBee from the handheld commander</p>

<p><img class="<a" src="href="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg">http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg</a>"></p>

<p>and move it to the USB to serial adapter</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg">http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg</a>"></p>

<p>Now plug the usb into your computer.</p>

<h2>Get your Clojure ready</h2>

<p>In your clojure project, the only magic you need is the <a href="https://github.com/samaaron/serial-port">Serial Port library</a>. Import the library and list your serial ports.  Then open the one that shows up for you.</p>

<p>```clojure
(ns clj-hexapod.core
  (require [serial-port :as serial]))</p>

<p>;; Use this command to see what port your serial port
;; is assinged to
(serial/list-ports)</p>

<p>;; replace the USB0 with whater it shows
(def port (serial/open &ldquo;/dev/ttyUSB0&rdquo; 38400))
```</p>

<p>Since we are going to be talking to the hexapod.  We need to send the commands in the same format that it is expecting. Basically, a packet of where the postions of the joystick are, as well as what buttons are pushed.</p>

<p>```clojure
(defn checksum [v]
  (mod (&ndash; 255 (reduce + v)) 256))</p>

<p>(defn vec->bytes [v]
  (byte-array (map #(&ndash;> % (Integer.) (.byteValue) (byte)) v)))</p>

<p>(defn build-packet [r-vert r-horz l-vert l-horz buttons]
  [255 ;header
   r-vert
   r-horz
   l-vert
   l-horz
   buttons
   0
   (checksum [r-vert r-horz l-vert l-horz buttons])])</p>

<p>(defn send [packet]
  (serial/write port (vec->bytes packet)))
```</p>

<p>From here, we can simply make functions for the joystick controls to go up and down</p>

<p>```clojure
;;values between 129-254
(defn up [speed]
  &ldquo;joystick up for speed between 1-100&rdquo;
  (if (good-range? speed)</p>

<pre><code>(int (+ 129 (* 125 (/ speed 100.0))))
CENTER))
</code></pre>

<p>;;values between 0 and 125
(defn down [speed]
  &ldquo;joystick down speed between 1-100&rdquo;
  (if (good-range? speed)</p>

<pre><code>(int (- 125 (* 125 (/ speed 100.0))))
CENTER))
</code></pre>

<p>```</p>

<p>Then we can do things like walk, turn, and change the gait</p>

<p>```clojure
(defn walk-forward [speed]
  &ldquo;walk forward speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER (up speed) CENTER 0)))</p>

<p>(defn walk-backwards [speed]
  &ldquo;walk backwards speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER (down speed) CENTER 0)))</p>

<p>(defn walk-right [speed]
  &ldquo;walk right speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER CENTER (up speed) 0)))</p>

<p>(defn walk-left [speed]
  &ldquo;walk right speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER CENTER (down speed) 0)))</p>

<p>(defn turn-right [speed]
  &ldquo;turn right speed between 1-100&rdquo;
  (send (build-packet CENTER (up speed) CENTER CENTER 0)))</p>

<p>(defn turn-left [speed]
  &ldquo;turn left speed between 1-100&rdquo;
  (send (build-packet CENTER (down speed) CENTER CENTER 0)))</p>

<p>(defn change-gait [gait-key]
  (let [gait-num (gait-key gaits)]</p>

<pre><code>(send (build-packet CENTER CENTER CENTER CENTER gait-num))))
</code></pre>

<p>(defn stop []
  &ldquo;stop hexapod&rdquo;
  (send (build-packet CENTER CENTER CENTER CENTER 0)))
```</p>

<p>You can control it from the REPL with some simple commands</p>

<p><code>clojure
(walk-forward 20)
(walk-backwards 10)
(walk-right 10)
(walk-left 10)
(turn-right 10)
(turn-left 10)
(change-gait :ripple-smooth)
(change-gait :tripod-normal)
(change-gait :ripple)
(change-gait :amble)
(stop)
</code></p>

<p>If you want to see the code, it is out on github as <a href="https://github.com/gigasquid/clj-hexapod">clj-hexapod</a>.  Please keep in mind that it is early days still, and I am still just exploring.</p>

<h2>Phoneix Code Firmware</h2>

<p>It is worth noting the the above code was meant to run with the default hexapod firmware.  That is the &ldquo;Nuke&rdquo; firmware.  There is another firmware, the <a href="https://github.com/KurtE/Arduino_Phoenix_Parts">Phoenix code</a>, that gives the hexapod more lifelike moves and allows it to twist and shift is rather creepy ways.</p>

<p>I just loaded it on the hexapod yesterday.  The commander software changed too, so I will of course need to revisit the code, to add in the new moves.  But here is a sneak preview of what it can do:</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('PmBGt9T-yvI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/PmBGt9T-yvI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/PmBGt9T-yvI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=PmBGt9T-yvI" id="PmBGt9T-yvI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Hexapod with Phoenix Code</div>
</a>
<div class="video-info" ></div>
</div>

</p>

<p><em>That is my daughter singing in the background</em></p>

<h2>That&rsquo;s all for now</h2>

<p>I hope I have given you pointers for getting started on your own world domination with Clojure and Hexapods. Remember to practice your laugh &hellip;. Muhahaha :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Clojure has a New Home]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home/"/>
    <updated>2014-02-16T14:57:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/16/hitchhikers-clojure-has-a-new-home</id>
    <content type="html"><![CDATA[<p>The Hitchhiker&rsquo;s Guide to Clojure posts now have a new home to make it
easier to read them in a chronological fashion.</p>

<p><a href="http://hitchhikersclojure.com/">http://hitchhikersclojure.com/</a></p>

<p>There is also a public <a href="https://github.com/gigasquid/hitchhikers-clojure">repo</a> &ndash; feel free to contribute spelling and
grammar fixes, or your great ideas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitchhiker's Guide to Clojure - Part 3]]></title>
    <link href="http://gigasquid.github.io/blog/2014/02/15/hitchhikers-guide-to-clojure-part-3/"/>
    <updated>2014-02-15T13:48:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/02/15/hitchhikers-guide-to-clojure-part-3</id>
    <content type="html"><![CDATA[<p>Amy and Frank fled down the stairs from her office and met an
unexpected obstacle to their exit, a locked door.  As
they peered out the window, they saw yesterday&rsquo;s Amy pull up in the
parking space, get out, retrieve her laptop, and start to head in
the front door.</p>

<p>&ldquo;Oh good, we can take your car&rdquo;, said Frank.</p>

<p>Amy took a second to recover from the shock of seeing what her hair really
looked like from behind and then asked, &ldquo;But, how can we get to it?
The door is locked, and we
can&rsquo;t go back up to the office&hellip; I would meet myself.&rdquo;</p>

<p>Frank smiled, pulled out the <em>Hitchhiker&rsquo;s Guide to Clojure</em> and
pulled up a page with the heading <em>Locked Doors and Other Small
Bothers</em>.</p>

<p><img class="<a" src="href="http://farm4.staticflickr.com/3346/3191331375_a773bff1b7_n.jpg">http://farm4.staticflickr.com/3346/3191331375_a773bff1b7_n.jpg</a>"></p>

<p><em>One of the reasons for the surprising success of <strong>The Hitchhiker&rsquo;s Guide
to Clojure</strong> is helpful advice of on an assortment of practical
matters.</em></p>

<p><em>Locked doors are a common nuisance in modern times.  Fortunately,
Clojure provides a very handy function for such occasions, <a href="http://clojuredocs.org/clojure_core/1.2.0/clojure.core/fnil">fnil</a>.
This commonly overlooked function, takes an existing function and
returns a new function that allows you to specify a default
for a nil parameter. For example, take this locked door:</em></p>

<p>```clojure
(defn locked-door [key]</p>

<pre><code>    (if key "open" "nope - staying shut"))
</code></pre>

<p>(locked-door :key) ;=> &ldquo;open&rdquo;
(locked-door nil) ;=> &ldquo;nope &ndash; staying shut&rdquo;
```</p>

<p><em>In this case, the simple application of fnil will help remove this
pesky obstacle.</em></p>

<p>```clojure
(def this-door (fnil locked-door :another-key-that-works))</p>

<p>(this-door :key) ;=> &ldquo;open&rdquo;
(this-door nil) ;=> open
```</p>

<p><em>Please be advised, that some doors are locked for a good reason. It
is left to the user&rsquo;s discretion. But it is highly recommended in Norway&rsquo;s
moose regions, to think twice.</em></p>

<p>They unlocked the door and headed for Amy&rsquo;s car.  She couldn&rsquo;t decide
whether she was surprised or not to find her keys in her pocket, so
she gave up and just got in instead.  After a short drive, they
arrived at the zoo and navigated their way through various
school groups and arrive at the Aquarium.</p>

<p>Amy at this point, having prided herself on her adaptable nature, was
still having trouble processing the latest events. She had
discovered that Frank was a Datomic time traveller,  the  world was
made of Clojure, and it was also about to be destroyed in a short
future that she just came from.  Her rational brain, (which was
currently working way too hard), was quite
relieved to be distracted by the sight of two really adorable otters.  They were floating
contentedly around the pool, occasionally stopping to crack an Abalone
shell on their fuzzy tummies.</p>

<p><img class="<a" src="href="http://cdn.zmescience.com/wp-content/uploads/2012/09/sea-otters.jpg">http://cdn.zmescience.com/wp-content/uploads/2012/09/sea-otters.jpg</a>"></p>

<p>Her rational brain, after having a nice breather, finally re-asserted
itself and made Amy ask Frank:</p>

<p>&ldquo;Why are we here?&rdquo;</p>

<p>&ldquo;Otters are the front-line Chrono-guards, of course.&rdquo;</p>

<p>He went on to explain that otters are tasked with the important job of
keeping a close watch on human civilization and making critical, minor
adjustments to keep things on an even track.  All those nature videos
of otters cracking shells with rocks?  They are really evaluating
Clojure expressions crucial to our way of life. Most of the time, they
prefer to do their work remote.  They find floating on their backs in
the peaceful waters the most productive work environment.  However,
sometimes they will construct zoos or aquariums, when their work
requires them to keep a closer watch on some areas.  In times of great
need, they might even take a human form for a short while.  Recently,
one of their agents was inadvertently
<a href="https://i.chzbgr.com/maxW500/6003866624/h0B1E03BF/">exposed</a> and
required a few extra Abalone shells to straighten out.</p>

<p>Frank opened his pack and handed his evaluator to Amy to hold
while fished out four mini-marshmallows.  He gave two to Amy and then
proceeded to put one in his ear and the other in his mouth.  More
remarkably still, he appeared to be speaking with the otters.</p>

<p><em>Mini-marshmallows are the best way to create portable Clojure
<a href="https://github.com/clojure/core.async">core.async</a> channels that
won&rsquo;t melt in your hands.</em></p>

<p><em>To construct a channel simply use <em>chan</em></em></p>

<p><code>clojure
(def talk-to-otters-chan (chan))
</code></p>

<p><em>Channels by default are unbuffered, which keeps them at the
mini-marshmallow size.  It requires a rendezvous of a channel producer
and consumer to communicate.  In the case of otters, someone to talk to
the otters and the otters, themselves, to listen. Be advised that with
a regular blocking put <strong>>!!</strong>, the main thread will be blocked.
That is, if you try to speak to the otter, you will be stuck there
until it gets around to listening. This isn&rsquo;t the best case for the talker if the
otter was busy, so one approach would be to use a
<a href="http://clojuredocs.org/clojure_core/clojure.core/future">future</a> to
talk to the otter with a blocking put <em>>!!</em>.</em></p>

<p><code>clojure
(future (&gt;!! talk-to-otters-chan "Hello otters.")) ;=&gt;#&lt;Future@3c371c41: :pending&gt;
(&lt;!! talk-to-otters-chan) ;=&gt; "Hello otters."
</code></p>

<p>One could also use a buffered channel, but that increases the size of
the marshmallow.</p>

<p>```clojure
(def talk-to-otters-chan (chan 10)) ;;create channel with buffer size 10
(>!! talk-to-otters-chan &ldquo;Hello otters.&rdquo;) ;=> nil
(>!! talk-to-otters-chan &ldquo;Do you know anything about the world ending?&rdquo;) ;=> nil</p>

<p>(&lt;!! talk-to-otters-chan) ;=> &ldquo;Hello otters.&rdquo;
(&lt;!! talk-to-otters-chan) ;=> &ldquo;Do you know anything about the world ending?&rdquo;
```</p>

<p><em>The best way to conserve space and time is to use asynchronous
communication with <em>go</em> blocks that wont' block the threads. Inside
these go blocks one can use regular non-blocking puts <strong>>!</strong> and gets
<strong>&lt;!</strong>.</em></p>

<p>```clojure
(def talk-to-otters-chan (chan))
(go (while true</p>

<pre><code>  (println (&lt;! talk-to-otters-chan))))
</code></pre>

<p>(>!! talk-to-otters-chan &ldquo;Hello otters&rdquo;)
(>!! talk-to-otters-chan &ldquo;Do you know anything about the world ending?&rdquo;)
(>!! talk-to-otters-chan &ldquo;Also, you are really fuzzy and cute.&rdquo;)</p>

<p>;; (This prints out in the REPL as you talk to the otters)
Hello otters
Do you know anything about the world ending?
Also, you are really fuzzy and cute.
```</p>

<p><em>This compact, lightweight, and asynchronous method of communication is
well suited to conversations and messaging of all sorts, including
conversing with human, animals, and other Clojure-based life forms.</em></p>

<p>```clojure
(def talk-chan (chan))
(def listen-chan (chan))
(go (while true</p>

<pre><code>  (println (&lt;! listen-chan))))
</code></pre>

<p>(go (while true</p>

<pre><code>  (&gt;! listen-chan
      (str "You said: "(&lt;! talk-chan)
            " " "Do you have any Abalone?" ))))
</code></pre>

<p>(>!! talk-chan &ldquo;Hello otters&rdquo;)
(>!! talk-chan &ldquo;Do you know anything about the world ending?&rdquo;)
(>!! talk-chan &ldquo;Also, you are really fuzzy and cute.&rdquo;)</p>

<p>;; (This prints out in the REPL as you talk to the otters)
You said: Hello otters Do you have any Abalone?
You said: Do you know anything about the world ending? Do you have any Abalone?
You said: Also, you are really fuzzy and cute. Do you have any Abalone?
```</p>

<p>Amy put one of the mini-marshmallows in her ear.  She immediately
began to hear the conversation that Frank was having with the otters.</p>

<p>&ldquo;But who would want to destroy the entire world?  That is really kinda
over-board.&rdquo;</p>

<p>&ldquo;I don&rsquo;t really know, but there was someone on Galactic Hacker News
the other day that was quite tiffed over the idea that Clojure was considered
a Lisp.&rdquo;</p>

<p>Amy reached to put the other marshmallow in her mouth to ask a very
important question.  But unfortunately, as she moved her hand, she
accidentally pushed the big red <em>Source</em> button on the evaluator.
Suddenly, she and Frank were swept up in a vortex that spun them
around and sucked them down into the ground.</p>
]]></content>
  </entry>
  
</feed>
