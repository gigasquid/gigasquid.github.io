<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2015-12-19T14:56:25-05:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speech Act Classification for Text with Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2015/10/20/speech-act-classification-for-text-with-clojure/"/>
    <updated>2015-10-20T13:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/10/20/speech-act-classification-for-text-with-clojure</id>
    <content type="html"><![CDATA[<p>We humans are quite wonderful.  We do amazing things every day without even realizing it.  One of them, you are doing right now.  You are reading text.  Your brain is taking these jumbles of letters and spaces in this sentence, which in linguist terms is called an <a href="https://en.wikipedia.org/wiki/Utterance">utterance</a>, and making sense out of it.  The individual meanings of sentences might be quite complex.</p>

<p>Take for example the utterance, &ldquo;I like cheese&rdquo;.  To understand it properly, you need to know the meanings of the individual words.  In particular, you would need to know that cheese is a tasty food stuff that is made from milk.  This would be a detailed and full understanding.  But there is a higher level of understanding that we can look at called <a href="https://en.wikipedia.org/wiki/Utterance">Speech Acts</a>.</p>

<p>Speech Acts are way of classifying our communication according to purposes.  We perform speech acts when we ask questions, make statements, requests, promises, or even just say thanks.  These speech acts cross languages.  When I ask a question in English, it is the same speech act as if I ask it in French.  In fact, if we were to travel to another planet with aliens, we can assume if they had a language, it would involve speech acts.  It should be no surprise then, to communicate effectively with machines, it will have to understand speech acts.</p>

<p>To explore this communication we are going to consider only three speech acts:</p>

<ul>
<li>Statements &ndash; &ldquo;I like cheese.&rdquo;</li>
<li>Questions &ndash; &ldquo;How do you make cheese?&rdquo;</li>
<li>Expressives &ndash; &ldquo;Thank you&rdquo;</li>
</ul>


<p><em>Our goal is to have our program be able to tell the difference between these three speech acts &ndash; without punctuation.</em></p>

<p>Why not use punctuation?  If you are having a conversation with a human over Slack or some other chat channel, you may or may not put in a question mark or period.  To have a computer be able to converse as naturally with a human as another human, it will have to understand the speech act without the aid of punctuation.</p>

<p>Generally, we want to have the computer:</p>

<ol>
<li>Read in an utterance/text that may or may not have punctuation.</li>
<li>Classify whether the result is a statement, question, or expressive.</li>
</ol>


<p>To tackle this problem, we are going to have to break this up into two main parts.  The first is <em>parsing</em> the text and annotating it with data.  The second is to classify the text based on the data from the parsing.</p>

<h2>Parsing and Annotating Text with Stanford CoreNLP</h2>

<p>The <a href="http://nlp.stanford.edu/software/corenlp.shtml">Stanford CoreNLP</a> is considering the state of the art for POS, (Part of Speech), tagging and other linguistic annotations.  It also is a Java library, so very easy to use from Clojure.</p>

<p>Here we are using a simple wrapper library called <a href="https://github.com/gigasquid/stanford-talk">stanford-talk</a> to take in some text and process it.  The result is a list of <em>tokens</em> for each word in the <code>:token-data</code> map.  Each token is annotated with the POS tag.  There is a lot more data in the annotations that we can look at to give us insight into this text.  But, to keep things simple, we are just going to look at the POS speech tag at the moment.</p>

<p>```clojure
(process-text &ldquo;I like cheese&rdquo;)</p>

<p>;{:token-data
; ({:sent-num 0, :token &ldquo;I&rdquo;, :pos &ldquo;PRP&rdquo;, :net &ldquo;O&rdquo;, :lemma &ldquo;I&rdquo;, :sentiment &ldquo;Neutral&rdquo;}
;  {:sent-num 0, :token &ldquo;like&rdquo;, :pos &ldquo;VBP&rdquo;, :net &ldquo;O&rdquo;, :lemma &ldquo;like&rdquo;, :sentiment &ldquo;Neutral&rdquo;}
;  {:sent-num 0, :token &ldquo;cheese&rdquo;, :pos &ldquo;NN&rdquo;, :net &ldquo;O&rdquo;, :lemma &ldquo;cheese&rdquo;, :sentiment &ldquo;Neutral&rdquo;}),
; :refs [[{:sent-num 0, :token &ldquo;I&rdquo;, :gender &ldquo;UNKNOWN&rdquo;, :mention-type &ldquo;PRONOMINAL&rdquo;, :number &ldquo;SINGULAR&rdquo;, :animacy &ldquo;ANIMATE&rdquo;};]]}
```</p>

<p>So the text &ldquo;I like cheese&rdquo; has the following POS tags <a href="https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">list of all POS tags</a>:</p>

<ul>
<li>I = PRP Personal Pronoun</li>
<li>like = VBP Verb, non-3rd person singular present</li>
<li>cheese &ndash; Noun, singular or mass</li>
</ul>


<p>This is great.  We have some data about the text we can analyze.  The next thing to do is to figure out how to classify the text based on this data.</p>

<h2>Classification with Weka</h2>

<p><a href="http://www.cs.waikato.ac.nz/~ml/weka/">Weka</a> is a collection of machine learning algorithms.  There is a program for interactive exploration of data sets, as well as a java library so you can use it programatically.  Speaking of data sets, we need some.  Just having one sentence about liking cheese is not going to get us very far with any machine learning.</p>

<p>So where can you go to get conversational questions and statements on the internet?  Well, one place that is pretty good for that is <a href="http://www.answers.com/Q/FAQ/2528-9">answers.com</a>.  We can scrape some pages for questions and answers.  Enough so that we can collect and cleanup some input files of</p>

<ul>
<li>~ 200 statements</li>
<li>~ 200 questions</li>
</ul>


<p>The expressives were a bit more difficult.  Let&rsquo;s just make a list of about 80 of them.</p>

<p>Now, we have a list of text data.  We need to decide on some features and generate some input files to train the classifiers on.</p>

<h3>Choosing Features for Classification</h3>

<p>First, what is a feature?  A feature is some sort of encoding of the data that the computer is going to consider for classification. For example, the number of nouns in a sentence could be a feature.  There is a whole field of study dedicated to figuring out what the best features for data for machine learning are.  Again, to keep things simple, we can take an educated guess on some features based on a good <a href="https://www.cs.utah.edu/~riloff/pdfs/emnlp11-speechacts.pdf">paper</a>:</p>

<ul>
<li>Sentence length</li>
<li>Number of nouns in the sentence (NN, NNS, NNP, NNPS)</li>
<li>If the sentence ends in a noun or adjective (NN, NNS, NNP, NNPS, JJ, JJR, JJS)</li>
<li>If the sentence begins in a verb (VB, VBD, VBG, VBP, VPZ)</li>
<li>The count of the wh, (like who, what) markers (WDT, WRB, WP, WP$)</li>
</ul>


<p>We can now go through our data file, generate our feature data, and output .arff file format to ready it as training file for weka.</p>

<p>Raw question file example:</p>

<p><code>
What is floater exe
Is bottled water or tap water better for your dog
How do you treat lie bumps on the tongue
Can caffeine be used in powder form
</code></p>

<p>Arff file with features</p>

<p>```
@relation speechacts</p>

<p>@attribute       sen_len            numeric
@attribute       nn_num             numeric
@attribute       end_in_n           numeric
@attribute       begin_v            numeric
@attribute       wh_num             numeric
@attribute       type               {assertion,question,expressive}</p>

<p>@data
4,2,1,0,1,question
10,4,1,0,0,question
9,3,1,0,1,question
7,3,1,0,0,question
```</p>

<p>Now that we have our input file to training our machine learning algorithms, we can start looking at classifiers.</p>

<h3>Choosing the Classifier</h3>

<p><img class="<a" src="href="http://c2.staticflickr.com/6/5794/22338401315_1abf0ffb2d_z.jpg">http://c2.staticflickr.com/6/5794/22338401315_1abf0ffb2d_z.jpg</a>"></p>

<p>Using the weka explorer, we can try out different classification models.  For this data, the best one seems to be the <a href="https://en.wikipedia.org/wiki/Random_forest">Random Forest</a>.  In the explorer, it beat out Naive Bayes and J48.  It is also worth mentioning that we are not using a separate source of test data, we are cross validating on the original training set.  If we wanted to be more rigorous, we could collect more data and cut it in half, using one set for the training and one set for the testing.</p>

<p>Now that we have a classifier, we can create some Clojure code with the java library to use it.</p>

<h3>Using the Weka Classifier from our Clojure Code</h3>

<p>After importing the needed Java classes into our Clojure code, we can create the Random Forest classifier.</p>

<p><code>clojure
(def classifier (new RandomForest))
</code></p>

<p>We then create a function that will load our arff input file as a datasource</p>

<p>```clojure
(defn get-datasource [fname]
  (new ConverterUtils$DataSource</p>

<pre><code>   (.getResourceAsStream (clojure.lang.RT/baseLoader) fname)))
</code></pre>

<p>```</p>

<p>And another uses it to train the classifier, returning a map of the <em>evaluator</em> and <em>data</em> that we will need for our predictions.</p>

<p>```clojure
(defn train-classifier [fname]
  (let [source (get-datasource fname)</p>

<pre><code>    data (.getDataSet source)
    _ (.setClassIndex data (dec (.numAttributes data)))
    _  (.buildClassifier classifier data)
    e (new Evaluation data)]
(.crossValidateModel e classifier data (.intValue (int 10)) (new Random 1) (into-array []))
(println (.toSummaryString e))
{:evaluator e
 :data data}))
</code></pre>

<p>```</p>

<p>Now, we need to be able to ask about a classification for a particular instance of new data.  This is going to be where we are parsing new text and asking for an answer from our trained model.  To do this, we need to generate an <em>instance</em> for the evaluation to look at.  It is constructed from numbers in the same order as our arff file.  The exception is that we are not going to provide a value for the final field of the speech act type.  We will assign that to the a missing value.</p>

<p>```clojure
(defn gen-instance [dataset [val0 val1 val2 val3 val4]]
  (let [i (new Instance 6)]</p>

<pre><code>(doto i
  (.setValue 0 (double val0))
  (.setValue 1 (double val1))
  (.setValue 2 (double val2))
  (.setValue 3 (double val3))
  (.setValue 4 (double val4))
  (.setValue 5 (Instance/missingValue))
  (.setDataset dataset))))
</code></pre>

<p>```</p>

<p>Now we can use this function in a prediction function to get our answer back</p>

<p>```clojure
(defn predict [ev d vals]
  (let [v  (.evaluateModelOnce ev classifier (gen-instance d vals))]</p>

<pre><code>(case v
  0.0 :statement
  1.0 :question
  2.0 :expressive)))
</code></pre>

<p>```</p>

<p>Calling the predict function would look something like:</p>

<p><code>clojure
(def results (train-classifier "speech-acts-input-all.arff"))
(def predictor (:evaluator results))
(def data (:data results))
(predict predictor data [1 1 1 0 0])
;; -&gt; :expressive
</code></p>

<p>Now that we have the parsing piece and the classification piece, we can put everything together.</p>

<h3>Putting it all together</h3>

<p>We finally have all the details we need write a <code>classify-text</code> function.</p>

<p>```clojure
(defn classify-text [text]
  (let [stats (parser/gen-stats text)</p>

<pre><code>    features [(:sen-len stats)
              (:nn-num stats)
              (:end-in-n stats)
              (:begin-v stats)
              (:wh-num stats)]]
(weka/predict predictor data features)))
</code></pre>

<p>(classify-text &ldquo;I like cheese&rdquo;)
;; &ndash;> :statement
(classify-text &ldquo;How do you make cheese&rdquo;)
;; &ndash;> :question
(classify-text &ldquo;Right on&rdquo;)
;; &ndash;> :expressive
```</p>

<p>Yea! It worked.  We finally have something that will read in text and tell us its best guess of a speech act, all without punctuation.  Let&rsquo;s quickly review what we have done.</p>

<h3>Summary</h3>

<ul>
<li>Gather data sets of statements, questions, and expressives</li>
<li>Parse text and annotate it with POS tags using Stanford CoreNLP</li>
<li>Choose features of the data to analyze and generate arff files</li>
<li>Use Weka explorer to try out the best classification algorithims</li>
<li>Programatically use weka to train classifier and predict a new instance</li>
<li>Write a program to tie it all together</li>
</ul>


<p>It&rsquo;s funny how a simple thing like asking whether something is a statement or question gets you knee deep in Natural Language Processing and Machine Learning pretty fast.</p>

<p>We&rsquo;ve learned a lot, now let&rsquo;s have a bit of fun.  Now that we can classify speech acts, we can make a sort of proto chat bot with a really limited responses.</p>

<h3>Proto Chat Bot</h3>

<p>Here we are going to be a bit loose and actually check if a question mark is used.  If it is, we will automatically mark it as a question.  Otherwise, we will classify it.</p>

<p>```clojure
(defn respond [text]
  (let [question-mark? (re-find  #&ldquo;\?$&rdquo; text)</p>

<pre><code>    type (if question-mark?
           :question
           (classify-text text))]
(case type
  :question "That is an interesting question."
  :statement "Nice to know."
  :expressive ":)")))
</code></pre>

<p>```</p>

<p>We just need a quick repl and main function now:</p>

<p>```clojure
(defn repl []
  (do</p>

<pre><code>(print "&gt;&gt; ")
(flush))
</code></pre>

<p>  (let [input (read-line)]</p>

<pre><code>(if-not (= input "quit")
 (do
   (println (try (c/respond input)
                 (catch Exception e (str "Sorry: " e " - " (.getMessage e)))))
   (recur))
 (do (println "Bye!")
     (System/exit 0)))))
</code></pre>

<p>(defn -main [&amp; args]
  (println &ldquo;Hello.  Let&rsquo;s chat.&rdquo;)
  (flush)
  (repl))
```</p>

<p>Testing it out with <code>lein run</code>, we can have a little chat:</p>

<p>```
Hello.  Let&rsquo;s chat.</p>

<blockquote><blockquote><p>Hi
:)
Do you know where I can go to buy cheese
That is an interesting question.
I am a big cheese fan
Nice to know.
you are quite smart
Nice to know.
bye
:)
```</p></blockquote></blockquote>

<p>Want more?  Check out the code <a href="https://github.com/gigasquid/speech-acts-classifier">https://github.com/gigasquid/speech-acts-classifier</a>.</p>

<p><em>Special thanks to <a href="https://twitter.com/ohpauleez">Paul deGrandis</a> for allowing me to pick his awesome brain on AI things</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic - Part 3]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/25/converstations-with-datomic-3/"/>
    <updated>2015-08-25T10:28:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/25/converstations-with-datomic-3</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200">https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200</a>"></p>

<p><em>This is a continuation of the <a href="http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/">first</a> and
<a href="http://gigasquidsoftware.com/blog/2015/08/19/conversations-with-datomic-part-2/">second</a> conversations in which topics such as creating databases,
learning facts, querying, and time traveling were discussed.  Today&rsquo;s topics include architecture, caching, and scaling.</em></p>

<p><strong>Human:</strong>  Hello again <a href="http://www.datomic.com/">Datomic</a>. Ready to talk again?</p>

<p><strong>Datomic:</strong> Sure.  I think you wanted to ask me some questions about how I would fit in with your other systems.</p>

<p><strong>Human:</strong> Yes.  Like I was saying earlier, I think your abilities to learn facts, reason about them, and keep track of the history of all those facts is really great.
I am interested in having you work with me every day, but first I want to understand your components so that I can make sure you are a good fit for us.</p>

<p><strong>Datomic:</strong> I would be happy to explain my architecture to you.  Perhaps showing you this picture is the best way to start.</p>

<p><img class="<a" src="href="http://c2.staticflickr.com/6/5723/20819693686_f9ec3852c3_z.jpg">http://c2.staticflickr.com/6/5723/20819693686_f9ec3852c3_z.jpg</a>"></p>

<p>I am made of three main parts: my <em>transactors</em>, my <em>peers</em>, and my <em>storage</em>.</p>

<p><strong>Human</strong>:  What is a <em>peer</em>?</p>

<p><strong>Datomic</strong>:  A <em>peer</em> is an application that is using the peer library.  In our last conversations,  we were talking through the Clojure api with <code>datomic.api</code>.  The application, or process, that is running this api is called a peer.  There can be many of these, all having conversations with me.</p>

<p><strong>Human</strong>: The peers then talk to your <em>transactor</em>?</p>

<p><strong>Datomic</strong> Yes. The peers talk to my transactor whenever you call <code>transact</code> with the peer library.  It is the central coordinator between all the peers and processes the requests using <em>ACID</em> transactions, and then sends the facts off to storage.</p>

<p><strong>Human:</strong>  Could you remind me what <em>ACID</em> stands for again?  I always forget.  The first one is <em>Atomic</em> right?</p>

<p><strong>Datomic:</strong> That is right.  I am <em>Atomic</em> in that every transaction you send to me is all or nothing.  If for some reason, one part of it fails, I will reject the entire transaction and leave my database unchanged.</p>

<p>The C is for <em>Consistency</em>.  This means that I provide every peer with a consistent view of facts over time and transactions.  I provide a global ordering of transactions across all the peers with my transactor and peers will always see all the transactions up to their current time without any gaps.</p>

<p><strong>Human:</strong> What if a peer is behind the global time?  How do they catch up to know about the new facts that were transacted by a different peer?</p>

<p><strong>Datomic:</strong> After one peer sends me a successful transaction with some new facts, I will notify all the peers about them.</p>

<p><strong>Human:</strong> Cool. That takes care of the A and C in ACID. What about the I?</p>

<p><strong>Datomic:</strong> It stands for Isolated.  It makes sure that even through there are many peers having conversations with me, transactions are executed serially.  This happens naturally with my transactor.  Since there is only one transactor, transactions are always executed serially.</p>

<p><strong>Human</strong>:  In the picture, why are there are two transactors then?</p>

<p><strong>Datomic</strong>:  Oh, that is for High Availability.  When I startup my system, I can launch two running transactors, but hold one in reserve.  Just on the off chance something happens to the main one, I will swap in the failover one to keep things running smoothly.</p>

<p>The final D in <em>ACID</em> is for Durability.  Once a transaction has been committed by my transactor, it is shipped off to storage for safe keeping.</p>

<p><strong>Human:</strong> What exactly is this storage?</p>

<p><strong>Datomic:</strong> Instead of storing datoms, I send <em>segments</em>, which are closely related datoms,  to storage.  I have quite a few options for storage:</p>

<ul>
<li>Dev mode &ndash; which just runs within my transactor and writes to the local file system.</li>
<li>SQL database</li>
<li>DynamoDB</li>
<li>Cassandra</li>
<li>Riak</li>
<li>Couchbase</li>
<li>Infinispan memory cluster</li>
</ul>


<p><strong>Human:</strong> Which one is the best to use?</p>

<p><strong>Datomic:</strong> <em>The best one to use is the one that you are already have in place at work</em>.  This way, I can integrate seamlessly with your other systems.</p>

<p><strong>Human:</strong> Oh, we didn&rsquo;t really talk about caching.  Can you explain how you do that?</p>

<p><strong>Datomic:</strong> Certainly.  It is even worth another picture.</p>

<p><img class="<a" src="href="http://c2.staticflickr.com/6/5630/20852217305_90506481fe.jpg">http://c2.staticflickr.com/6/5630/20852217305_90506481fe.jpg</a>"></p>

<p>Each peer has a its own <em>working set</em> of recent datoms along with a index to all the rest of the datoms in storage in memory.  When the peer has a query for a datom, it first checks to see if it has it locally in its memory cache.  If it can&rsquo;t find it there, then it will ask for a segment of that datom from storage.  Storage will return that datom along with other related datoms in that segment so that the peer can cache that in memory to make it faster for the next query.</p>

<p><strong>Human:</strong> That seems really different from other databases, where the client constantly requests queries from a server.</p>

<p><strong>Datomic:</strong> Yes.  When most questions can be answered from the local memory, responses are really fast.  You don&rsquo;t need to hit storage unless you really need too.  You can even add an extra layer of caching with memcached.</p>

<p><strong>Human:</strong> That sounds great.  I can&rsquo;t wait tell you about all of our data.  We talked a bit about your querying ability earlier, can you do the same queries that our other standard relational databases do, like joins?</p>

<p><strong>Datomic:</strong> Oh yes.  In fact, with me, you don&rsquo;t need to specify your joins explicitly.  I use <em>Datalog</em>, which is based on logic, so my joins are implicit.  I will figure out exactly what I need to put together to answer your query without you having to spell it out for me.</p>

<p><strong>Human:</strong> Ok.  I know that I can map some of my data that is already in other database tables to you.  What about other types of irregular data, like graphs, or sparse data.</p>

<p><strong>Datomic:</strong> I am actually very proud of my data model.  It is extremely flexible.  Since I store things on such a granular datom level, you don&rsquo;t need to map your logical data model to my physical model.  I can handle <em>rectangular</em> table shaped data quite happily along with graph data, sparse data, or other <em>non-rectangular</em> data.</p>

<p><strong>Human:</strong> That sounds great.  What do I need to know about your scaling?</p>

<p><strong>Datomic:</strong> I really excel at reads.  All you have to do is elastically add another peer to me for querying.  I am not really a good fit for write scale, like big data, or log file analysis.  You will find me most happy with data that is valuable information of record and has history that is important, like transaction, medical, or inventory data.  I am also really good at being flexible for development and operations since I can use many different types of storage.  I have worked with many web and cloud apps.</p>

<p><strong>Human:</strong> Thanks for answering all my questions.  I think you might fit in quite well with our other systems.</p>

<p><strong>Datomic:</strong> Great!</p>

<p><strong>Human:</strong> One more thing, this conversation has been great, but do you have any training resources for me and my other human coworkers?</p>

<p><strong>Datomic:</strong> Sure thing. There are a few really good resources on the <a href="http://www.datomic.com/training.html">Datomic Training Site</a>.  I would suggest watching the videos there and pairing them with:</p>

<ul>
<li><a href="https://github.com/stuarthalloway/presentations/blob/master/Nov2014/DayOfDatomicNov2014.pdf?raw=true">The slides for the videos</a> which have the labs to work through form the videos.</li>
<li><a href="https://github.com/Datomic/day-of-datomic">The Day of Datomic Repo</a> which has lots of great examples to play with.</li>
<li><a href="http://docs.datomic.com/">Tne Datomic Development Resources</a>, which include the docs on the <a href="http://docs.datomic.com/clojure/index.html">Clojure API</a></li>
</ul>


<p>Also, if you want to confirm that your data is good fit for me, I suggest you describe your data to the <a href="https://groups.google.com/forum/#!forum/datomic">Datomic Google Group</a>.  They are nice and knowledgeable group of humans.</p>

<p><strong>Human:</strong> Thanks again Datomic!  I will grab another cookie and check it out!</p>

<p><strong>Datomic:</strong> What is it with humans and cookies?&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic Part 2]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/19/conversations-with-datomic-part-2/"/>
    <updated>2015-08-19T08:56:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/19/conversations-with-datomic-part-2</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200">https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200</a>"></p>

<p><em>The following is a continuation of the first <a href="http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/">conversation</a> which touched on schema creation and querying.  This conversation includes learning new facts, time, and the sometimes unfortunate reality of lawyers.</em></p>

<p><strong>Human:</strong>  Hi <a href="http://www.datomic.com/">Datomic</a>.  I am back from my tea and cookies break.  I really enjoyed talking with you, could we continue our conversation?</p>

<p><strong>Datomic:</strong> Certainly.  Let me see, where did we leave off?</p>

<p><strong>Human:</strong> Let me check my <a href="https://gist.github.com/gigasquid/92a1effb14fe4f6ced59">notes</a>.  Oh yes, we had created a database and filled it with facts about some dogs and owners.  You showed me how to ask you things about the facts, like which dogs liked cheese.</p>

<p><strong>Datomic:</strong> Ah yes.  We were just getting to the really interesting part about how I learn new facts without forgetting the past ones.</p>

<p><strong>Human:</strong> Can you please explain a bit more about how you learn new facts?</p>

<p><strong>Datomic:</strong> Sure.  I learn facts when you tell me to <em>add</em> a new fact about some entity, or to <em>retract</em> a fact about it.  It will probably make more sense with an example.  Let&rsquo;s take the dog with the name &ldquo;Tiny&rdquo; that I know about.  Could you please ask me about the dog and all of the attributes?</p>

<p><strong>Human:</strong> Alright.</p>

<p><code>clojure
(d/pull (d/db conn) '[*] [:dog/name "Tiny"])
</code></p>

<p><strong>Datomic:</strong></p>

<p><code>clojure
{:db/id 17592186045423
 :dog/name "Tiny"
 :dog/breed "Great Dane"
 :dog/favorite-treat "Cheese"}
</code>
There is an entity (dog) with the name &ldquo;Tiny&rdquo; who is a Great Dane and his favorite-treat is Cheese.  I am not really sure why the Cheese is capitalized, but I am sure it makes sense to a human.</p>

<p><strong>Human:</strong> Oh right.  Well, now that you mention it, I am not really sure about the cheese thing either. Can I just remove that fact?</p>

<p><strong>Datomic:</strong> Well, you can tell me to <em>retract</em> that fact by sending me a transaction in the form of <code>[:db/retract entity-id attribute value]</code>.  In the case of the dog, since the name attribute is unique, you can just give me the selector for Tiny like this <code>[:dog/name "Tiny"]</code>.</p>

<p><strong>Human:</strong> Like this?</p>

<p><code>clojure
(d/transact conn [[:db/retract [:dog/name "Tiny"] :dog/favorite-treat "Cheese"]])
</code></p>

<p><strong>Datomic:</strong> Exactly.  I have retracted that fact about &ldquo;Tiny&rdquo;.  Go ahead and ask me about all of Tiny&rsquo;s attributes again.</p>

<p><strong>Human:</strong>  Ok.  I use <code>(d/db conn)</code> for the current database value right?</p>

<p><strong>Datomic:</strong> Yes. But if you are going to be asking me multiple questions about this database value, you should not repeat the <code>(d/db conn)</code> all the time.</p>

<p><strong>Human:</strong> Oh. What should I do instead?</p>

<p><strong>Datomic:</strong> The connection with me is like a ref.  Just like other refs, you should deref it once to get the database value and then use the value repeatedly. This single database value will provide consistency for all your queries.</p>

<p><strong>Human:</strong> That makes sense.</p>

<p>```clojure
(def db-tiny-no-cheese (d/db conn))</p>

<p>(d/pull db-tiny-no-cheese &lsquo;[*] [:dog/name &ldquo;Tiny&rdquo;])
```</p>

<p><strong>Datomic:</strong></p>

<p><code>clojure
{:db/id 17592186045423, :dog/name "Tiny", :dog/breed "Great Dane"}
</code></p>

<p>Tiny is a Great Dane.</p>

<p><strong>Human:</strong> So you don&rsquo;t know anything about the <code>:dog/favorite-treat</code> for &ldquo;Tiny&rdquo;?</p>

<p><strong>Datomic:</strong> At this particular time, I do not have anything to assert about the favorite-treat of Tiny.  However, I still remember everything about all the facts that you have told me.  For each transaction that you send me, I have a notion of a point in time like <em>t0</em>, <em>t1</em>, <em>t2</em>.  I have a complete database value for each one of those points in time.  In fact, you can look at <em>all</em> of my assertions and retractions that I have learned about using the <code>d/history</code> function on the database value.  This asks me to expose my history, which is normally hidden in favor of the <em>present</em>. I will return back a special database containing all the assertions and retractions across time.  Any queries that you ask me will have a fifth <em>datom</em> field to help you distinguish the difference.</p>

<p><strong>Human:</strong>  A fifth datom field?</p>

<p><strong>Datomic:</strong> A <em>datom</em> consists of the following parts: the entity, the attribute, the value, transaction, and an operation which tells you if the fact was added or retracted (e a v tx op).  Why don&rsquo;t you try using the <code>d/history</code> function to ask me about all the facts having to do with Tiny?  I suggest using the datalog query</p>

<p>```clojure
&lsquo;[:find ?e ?a ?v ?tx ?op
  :in $
  :where [?e :dog/name &ldquo;Tiny&rdquo;]</p>

<pre><code>     [?e ?a ?v ?tx ?op]]
</code></pre>

<p>```</p>

<p>which will return all the entity, attribute, value, transaction, and operation facts I ever knew about Tiny.</p>

<p><strong>Human:</strong> Ok.  Here goes.</p>

<p>```clojure
(d/q &lsquo;[:find ?e ?a ?v ?tx ?op</p>

<pre><code>   :in $
   :where [?e :dog/name "Tiny"]
   [?e ?a ?v ?tx ?op]]
</code></pre>

<p>  (d/history db-tiny-no-cheese))
```</p>

<p><strong>Datomic:</strong></p>

<p>```clojure</p>

<h1>{[17592186045423 63 &ldquo;Tiny&rdquo;       13194139534314 true]</h1>

<p>  [17592186045423 64 &ldquo;Great Dane&rdquo; 13194139534314 true]
  [17592186045423 65 &ldquo;Cheese&rdquo;     13194139534314 true]
  [17592186045423 65 &ldquo;Cheese&rdquo;     13194139534320 false]}
```</p>

<p>During one transaction, you told me to add three facts about an entity:</p>

<ul>
<li>The <code>:dog/name</code> attribute, (which I refer to as 63), has the value of &ldquo;Tiny&rdquo;.</li>
<li>The <code>:dog/breed</code> attribute, (which I refer to as 64), has the value of &ldquo;Great Dane&rdquo;.</li>
<li>The <code>:dog/favorite-treat</code> attribute, (which I refer to as 65), has the value of &ldquo;Cheese&rdquo;.</li>
</ul>


<p>During another transaction, you told me to retract a fact regarding the attribute <code>:dog/favorite-treat</code> about the same entity.</p>

<p><strong>Human:</strong> Wow, that is really cool.  Is there a way that I can <em>travel back in time</em> to see the world as it was during that first transaction?</p>

<p><strong>Datomic:</strong> Yes.  I am practically a Tardis.  You can use the <code>d/as-of</code> function with a database value and the transaction number and you can time travel.  Using that <em>time traveled</em> database value, you can ask me about all the facts I knew as of that time.</p>

<p><strong>Human:</strong> I can&rsquo;t wait to try this.  Ok, let&rsquo;s go back to the time when I first asserted the fact that Tiny liked cheese.</p>

<p><code>clojure
(d/pull (d/as-of db-tiny-no-cheese 13194139534314) '[*] [:dog/name "Tiny"])
</code></p>

<p><strong>Datomic:</strong>  Hold on.  We are time traveling!</p>

<p><code>clojure
{:db/id 17592186045423
 :dog/name "Tiny"
 :dog/breed "Great Dane"
 :dog/favorite-treat "Cheese"}
</code></p>

<p>Tiny is a Great Dane whose favorite treat is Cheese.</p>

<p><strong>Human:</strong> Fantastic! Let&rsquo;s go back to the future now, ummm I mean present. Time is a bit wibbly wobbly.</p>

<p><strong>Datomic:</strong> Just take the <code>as-of</code> function off of the database value and you will be back in the <em>present</em>.</p>

<p><strong>Human:</strong> Hmmm&hellip; Do I have to do a <em>retract</em> every time I want to change a value?  For example, the dog named Fido has a favorite treat of a Bone right now, right?</p>

<p><code>clojure
(d/pull db-tiny-no-cheese '[*] [:dog/name "Fido"])
</code></p>

<p><strong>Datomic:</strong></p>

<p><code>clojure
{:db/id 17592186045421
 :dog/name "Fido"
 :dog/breed "Mix"
 :dog/favorite-treat "Bone"}
</code></p>

<p>Yes, it is a &ldquo;Bone&rdquo;.</p>

<p><strong>Human:</strong> So, if I want to change it to be &ldquo;Eggs&rdquo;,  do I need to retract the current value of &ldquo;Bone&rdquo; first and then add the fact of &ldquo;Eggs&rdquo;?</p>

<p><strong>Datomic:</strong> You certainly could do that and I would understand you perfectly.  However, if you simply assert a new value for an existing attribute, I will automatically add the retraction for you.</p>

<p><strong>Human:</strong> Cool.</p>

<p>```clojure
(d/transact conn [{:db/id [:dog/name &ldquo;Fido&rdquo;]</p>

<pre><code>               :dog/favorite-treat "Eggs"}])
</code></pre>

<p>(d/pull (d/db conn) &lsquo;[*] [:dog/name &ldquo;Fido&rdquo;])
```</p>

<p><strong>Datomic</strong></p>

<p><code>clojure
{:db/id 17592186045421
 :dog/name "Fido"
 :dog/breed "Mix"
 :dog/favorite-treat "Eggs"}
</code></p>

<p>Fido now has a favorite-treat of &ldquo;Eggs&rdquo;.</p>

<p><strong>Human:</strong> This is really neat.  You <em>never</em> forget any facts?</p>

<p><strong>Datomic:</strong> Nope. Well, except in really exceptional circumstances that usually involve lawyers.</p>

<p><strong>Human:</strong> Lawyers?</p>

<p><strong>Datomic:</strong> Sigh.  Yes, well in some unique situations, you might be under a legal obligation to really <em>forget</em> certain facts and totally remove them from the database. There is a special tool that you can use to <em>excise</em> the data.  However, I will store a fact that <em>something</em> was deleted at that time. I just won&rsquo;t be able to remember <em>what</em>.</p>

<p><strong>Human:</strong> That doesn&rsquo;t sound fun.</p>

<p><strong>Datomic:</strong> I prefer to keep all my facts intact.</p>

<p><strong>Human:</strong> I can definitely see that. Well, on a happier subject, I have been very impressed with you during our conversations.  Having a time traveling database that can reason about facts seems like a really useful thing.  Also, you are also really nice.</p>

<p><strong>Datomic:</strong> Awww shucks, thanks.  For a human, you are really nice too.</p>

<p><strong>Human:</strong> I was thinking about the possibility of you coming and working with me every day. Would you mind chatting some more to me about your architecture?  I want to understand how your would fit with our other systems.</p>

<p><strong>Datomic:</strong> Certainly. I would love that.  Do you want to talk about it now, or have another cookie break first?</p>

<p><strong>Human:</strong> Now that you mention cookies&hellip; Let&rsquo;s take a short break and we will talk again soon.</p>

<p><em>(P.S. Humans, there are some great <a href="http://www.datomic.com/training.html">Datomic Training Videos</a> if you want to learn more)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conversations with Datomic]]></title>
    <link href="http://gigasquid.github.io/blog/2015/08/15/conversations-with-datomic/"/>
    <updated>2015-08-15T10:29:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/08/15/conversations-with-datomic</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200">https://avatars0.githubusercontent.com/u/1478702?v=3&amp;s=200</a>"></p>

<p><strong>Human:</strong> Hi <a href="http://www.datomic.com/">Datomic</a>.   I have been hearing good things about you.  I would like to talk to you and get to know you.  Is that alright?</p>

<p><strong>Datomic:</strong> Sure!  I would be happy to talk with you.  What language would you like to converse in?</p>

<p><strong>Human:</strong>  I like Clojure.</p>

<p><strong>Datomic:</strong>  That is one of my favorites too.  You know how to setup a Leiningen project right?</p>

<p><strong>Human:</strong> Oh yes.  What dependency should I use?</p>

<p><strong>Datomic:</strong> Just use <code>[com.datomic/datomic-free "0.9.5206"]</code>.</p>

<p><strong>Human:</strong> Got it.  Do you mind if I record our conversation in a namespaced file, so that I can refer back to it later?</p>

<p><strong>Datomic:</strong>  Not a problem.  Make sure to require <code>datomic.api</code> when you set it up.</p>

<p><code>clojure
(ns conversations.datomic
  (require [datomic.api :as d]))
</code></p>

<p><strong>Human:</strong>  All right.  I am all setup up.  I don&rsquo;t really know where to start, so maybe you can tell me a little about yourself.</p>

<p><strong>Datomic:</strong>  I would be happy to.  I am a database of facts.  Would you like to create a database with me?</p>

<p><strong>Human:</strong>  Sure.  How do I do that?</p>

<p><strong>Datomic:</strong> For a casual conversation like this, we can use a in memory database with a uri like this:</p>

<p><code>clojure
(def uri "datomic:mem://first-conversation")
</code>
Then we can create the database and simply connect to it.</p>

<p><code>clojure
(d/create-database uri)
(def conn (d/connect uri))
</code></p>

<p><strong>Human:</strong> So, being a database, obviously you store things.  What sort of things to you store?</p>

<p><strong>Datomic:</strong>  I store facts about things, which I call <em>datoms</em>.</p>

<p><strong>Human:</strong>  That sound neat.  How do I tell you a fact to store?  For example, what if I want you to store a fact about a dog, like its name?</p>

<p><strong>Datomic:</strong>  Ah.  Well the name of a dog is an attribute.  First, you need to tell me about the name attribute, so that I can use it to store the fact for you .  You can describe the attribute in the form of a map like this:</p>

<p><code>clojure
{:db/id (d/tempid :db.part/db)
 :db/ident :dog/name
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/unique :db.unique/identity
 :db/doc "Name of the Dog"
 :db.install/_attribute :db.part/db}
</code>
 This map is a set of facts, (called <em>datoms</em>),  about an entity.  In this
 case, the entity is an attribute. Attributes, in turn, can be used to describe other entities, like a dog. I will explain the different parts to you.</p>

<ul>
<li><code>db/id</code> is the internal id of the fact. With <code>(d/tempid :db.part/db)</code>, I will generate it for you, so you don&rsquo;t have to worry about it.</li>
<li><code>db/ident</code> is the human readable reference for it. While I am fine just referring to the attribute by an id, humans prefer text.  This says that you can refer to this attribute by the namespaced keyword <code>:dog/name</code>.</li>
<li><code>db/valueType</code> tells me the type of the attribute.  The dog&rsquo;s name is a string.</li>
<li><code>db/cardinality</code> lets me know if there is a one-to-one relationship with the entity or not. In our case, a dog has only one name.</li>
<li><code>db/unique</code> is if that attribute is unique for an entity.  In our example case, we are saying that a dog can be uniquely identified by its name.</li>
<li><code>db/doc</code> is some documentation for humans that explains a bit more about the attribute.</li>
<li><code>db.install/_attribute</code> tells me that this is an schema attribute that I should store with the other things like it.</li>
</ul>


<p><strong>Human:</strong> I think I understand. Let me try one out for myself.  So dog breed would be this?</p>

<p><code>clojure
{:db/id (d/tempid :db.part/db)
 :db/ident :dog/breed
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/doc "Breed of the Dog"
 :db.install/_attribute :db.part/db}
</code></p>

<p><strong>Datomic:</strong>  Yes!  I think you got it.  Let&rsquo;s try one more.</p>

<p><strong>Human:</strong> Ok.  How about the dog&rsquo;s favorite treat?</p>

<p><code>clojure
{:db/id (d/tempid :db.part/db)
 :db/ident :dog/favorite-treat
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/doc "Dog's Favorite Treat to Eat"
 :db.install/_attribute :db.part/db}
</code></p>

<p><strong>Datomic:</strong> You got it.  Now, that you have these attributes, you can give them to me using a transaction with the connection.</p>

<p><strong>Human:</strong> Ok.  Do you want that in a specific format?</p>

<p><strong>Datomic:</strong>  Yes.  Please send it to me using the form:</p>

<p><code>clojure
(d/transact conn [....facts....])
</code></p>

<p><strong>Human:</strong> Sounds good.  I will put the dog schema datoms we discussed in a vector and call it <code>dog-schema</code> and then send it to you.</p>

<p>```clojure
(def dog-schema  [{:db/id (d/tempid :db.part/db)</p>

<pre><code>               :db/ident :dog/name
               :db/valueType :db.type/string
               :db/cardinality :db.cardinality/one
               :db/unique :db.unique/identity
               :db/doc "Name of the Dog"
               :db.install/_attribute :db.part/db}
              {:db/id (d/tempid :db.part/db)
               :db/ident :dog/breed
               :db/valueType :db.type/string
               :db/cardinality :db.cardinality/one
               :db/doc "Breed of the Dog"
               :db.install/_attribute :db.part/db}
              {:db/id (d/tempid :db.part/db)
               :db/ident :dog/favorite-treat
               :db/valueType :db.type/string
               :db/cardinality :db.cardinality/one
               :db/doc "Dog's Favorite Treat to Eat"
               :db.install/_attribute :db.part/db}])
</code></pre>

<p>(d/transact conn dog-schema)
```</p>

<p><strong>Datomic:</strong> The transaction was fine.  I know all about those dog attributes now.</p>

<p><strong>Human:</strong>  I would like to also add a schema for owners for the dogs now.  I think I know how to describe the name of the owner, but I don&rsquo;t know how to express how the owner has dogs.</p>

<p><strong>Datomic:</strong> Ah. I that case you can specify the <code>db:valueType</code> as a <code>ref</code> type.  This lets me know that it references another entity.</p>

<p><strong>Human:</strong>  Do I need to tell you that is a type of dog somehow?</p>

<p><strong>Datomic:</strong> No.  I am pretty smart that way.  I will figure it out
  once you try to tell me about some real entities.  In fact, entities don&rsquo;t have types. A ref attribute can reference <em>any</em> entity.</p>

<p><strong>Human:</strong>  Cool.  Well, in that case, here is the owner schema.  The owner has a name and some dogs.</p>

<p>```clojure
(def owner-schema [{:db/id (d/tempid :db.part/db)</p>

<pre><code>                :db/ident :owner/name
                :db/valueType :db.type/string
                :db/cardinality :db.cardinality/one
                :db/unique :db.unique/identity
                :db/doc "Name of the Owner"
                :db.install/_attribute :db.part/db}
               {:db/id (d/tempid :db.part/db)
                :db/ident :owner/dogs
                :db/valueType :db.type/ref
                :db/cardinality :db.cardinality/many
                :db/doc "Dogs of the Owner"
                :db.install/_attribute :db.part/db}])
</code></pre>

<p>(d/transact conn owner-schema)
```</p>

<p><strong>Datomic:</strong>  The transaction is fine.  I now know about the attributes that dogs and owners have.  Would you like to tell me some facts about specific dogs and owners?</p>

<p><strong>Human:</strong>  Yes. Bob is an owner.  He has two dogs. Fluffy is a poodle whose favorite treat is cheese, and Fido is a mixed breed, whose favorite treat is a bone.  Lucy is also an owner who has one dog named Tiny.  Tiny is a Great Dane whose favorite treat is cheese.</p>

<p>I am a bit confused how to represent the dogs of the owners. How do I do that?</p>

<p><strong>Datomic:</strong>  That is easy, just nest the datoms for dogs under the <code>:owner/dogs</code> attribute. You just need to create datoms for them.  Each dog or owner will by its own map.  Use <code>:db/id</code> set to <code>(d/tempid :db.part/user)</code> so I can generate it for you.  Then use each attribute from the schema as the key and let me know the value.</p>

<p><strong>Human:</strong>  Like this?</p>

<p>```clojure
(d/transact conn [{:db/id (d/tempid :db.part/user)</p>

<pre><code>               :owner/name "Bob"
               :owner/dogs [{:db/id (d/tempid :db.part/user)
                             :dog/name "Fluffy"
                             :dog/breed "Poodle"
                             :dog/favorite-treat "Cheese"}
                            {:db/id (d/tempid :db.part/user)
                             :dog/name "Fido"
                             :dog/breed "Mix"
                             :dog/favorite-treat "Bone"}]}
              {:db/id (d/tempid :db.part/user)
               :owner/name "Lucy"
               :owner/dogs [{:db/id (d/tempid :db.part/user)
                             :dog/name "Tiny"
                             :dog/breed "Great Dane"
                             :dog/favorite-treat "Cheese"}]}])
</code></pre>

<p>```</p>

<p><strong>Datomic:</strong>  Exactly right.  I now know the facts about Bob and Lucy and their dogs.</p>

<p><strong>Human:</strong>  Umm, how do I query you about the facts that your know?  For example, how do I ask you about the dog named Tiny?</p>

<p><strong>Datomic:</strong>  There are a couple a ways to inquire about facts I know.  To find out about the attributes of a specific dog, or entity, I would recommend using <code>d/pull</code>.  You can ask me in the form of this to get all the attributes for a given dog name.  Note that this works since the dog name is a way to uniquely identify the dog:</p>

<p><code>clojure
(d/pull (d/db conn) '[*] [:dog/name "Tiny"])
</code></p>

<p><strong>Human:</strong>  What is the <code>(d/db conn)</code> all about?</p>

<p><strong>Datomic:</strong>  That function returns the current database value of the connection. The facts I know change during time.  Every time there is a transaction, I consider the time to be different and there is a new database value.  The <code>d/db</code> function gives you the most recent value that I know about.</p>

<p><strong>Human:</strong> I am assuming the <code>[*]</code> is a wildcard that means give me all the attributes for that dog?</p>

<p><strong>Datomic:</strong>  Exactly right.</p>

<p><strong>Human:</strong> Ok.  Tell me about Tiny.</p>

<p><code>clojure
(d/pull (d/db conn) '[*] [:dog/name "Tiny"])
</code></p>

<p><strong>Datomic:</strong>
<code>clojure
{:db/id 17592186045424
 :dog/name "Tiny"
 :dog/breed "Great Dane"
 :dog/favorite-treat "Cheese"}
</code></p>

<p>Tiny is a Great Dane that has a favorite treat of Cheese.</p>

<p><strong>Human:</strong>  This is fun.  What about more complicated questions.  How do I ask about the name of the owner of the dog &ldquo;Tiny&rdquo;?</p>

<p><strong>Datomic:</strong>  For that I would ask using the <em>datalog</em> query <code>d/q</code>.  It uses logic to unify your query with all of my facts and give you the result.  The query itself would be a vector with logic statements inside like:</p>

<p>```clojure
&lsquo;[:find ?owner-name
  :where [?dog :dog/name &ldquo;Tiny&rdquo;]</p>

<pre><code>     [?owner :owner/dogs ?dog]
     [?owner :owner/name ?owner-name]]
</code></pre>

<p>```</p>

<p><strong>Human:</strong>  Whoa.  What is the deal with those question marks?</p>

<p><strong>Datomic:</strong> The things with the question marks are considered as variables that we will <em>unify</em> to find the answer.  For example, we are looking for something that we are going to call <code>?owner-name</code>. I am going the use the following constraints with my facts to try to find the answer:</p>

<ul>
<li>There is an entity that we are going to call <code>?dog</code> that has the attribute <code>:dog/name</code> that is &ldquo;Tiny&rdquo;</li>
<li>There is an entity that we are going to call <code>?owner</code> that has an attribute <code>:owner/dogs</code> that is the same as the <code>?dog</code> entity</li>
<li>That same <code>?owner</code> entity also has an attribute <code>:owner/name</code> that has the value <code>?owner-name</code></li>
</ul>


<p><strong>Human:</strong>  Alright, so when I ask for this query, do I need to give you a database value too?</p>

<p><strong>Datomic:</strong>  Yes.  They should have the form of:</p>

<p><code>clojure
(d/q '[datalog-query] db-value)
</code></p>

<p>Remember, to get the current db value use <code>(d/db conn)</code>.</p>

<p><strong>Human:</strong>  Ok.  Here we go.</p>

<p>```clojure
(d/q &lsquo;[:find ?owner-name</p>

<pre><code>   :where [?dog :dog/name "Tiny"]
          [?owner :owner/dogs ?dog]
          [?owner :owner/name ?owner-name]]
 (d/db conn))
</code></pre>

<p>```</p>

<p><strong>Datomic:</strong></p>

<p>The answer is:</p>

<p>```clojure</p>

<h1>{[&ldquo;Lucy&rdquo;]}</h1>

<p>```</p>

<p><strong>Human:</strong>  What if I want to pass the dog name as a parameter?  How do I communicate that to you?</p>

<p><strong>Datomic:</strong>  You will need to use an <code>in</code> clause in the query like this:</p>

<p><code>clojure
'[:find [blah]
   :in $ ?dog-name
   :where [blah]]
</code></p>

<p>The $ is shorthand for the database value and the <code>?dog-name</code> is what you will pass in as a parameter in the query after the db-value.</p>

<p><strong>Human:</strong>  Like this?</p>

<p>```clojure
(d/q &lsquo;[:find ?owner-name</p>

<pre><code>   :in $ ?dog-name
   :where [?dog :dog/name ?dog-name]
          [?owner :owner/dogs ?dog]
          [?owner :owner/name ?owner-name]]
 (d/db conn) "Tiny")
</code></pre>

<p>```</p>

<p><strong>Datomic:</strong>  Exactly right.  The answer is Lucy again.</p>

<p>```clojure</p>

<h1>{[&ldquo;Lucy&rdquo;]}</h1>

<p>```</p>

<p><strong>Human:</strong>  I think I am getting the hang of this!  Another quick question.  How would I go about asking you which dogs have cheese as their favorite treat?  I would want the dog&rsquo;s name and breed back.</p>

<p><strong>Datomic:</strong>  You would simply construct another datalog query.  This time I would recommend that you combine the <code>pull</code> syntax within the <code>find</code> part of the query.  The <code>pull</code> syntax is great at selecting attributes from an entity.  So the <code>find</code> part would look something like this:</p>

<p><code>clojure
[(pull ?dog [:dog/name :dog/breed]) ...]
</code></p>

<p>This will return the attributes of the <code>:dog/name</code> and the <code>:dog/breed</code>.  The three dots on the end will let me know that you want a collection returned, so I will give you back a simple vector with the entity attributes requested, instead of the set of vectors I normally give back.</p>

<p>The <code>where</code> section of the query is going to look for the <code>?dog</code> entity that matches the <code>:dog/favorite-treat</code> attribute with &ldquo;Cheese&rdquo;.</p>

<p><code>clojure
'[:find [(pull ?dog [:dog/name :dog/breed]) ...]
  :where [?dog :dog/favorite-treat "Cheese"]]
</code></p>

<p><strong>Human:</strong>  Then I put it together with the current database value in a <code>d/q</code> function?</p>

<p>```clojure
(d/q &lsquo;[:find [(pull ?dog [:dog/name :dog/breed]) &hellip;]</p>

<pre><code>   :where [?dog :dog/favorite-treat "Cheese"]]
 (d/db conn))
</code></pre>

<p>```</p>

<p><strong>Datomic:</strong> Yup.  The answer is:</p>

<p><code>clojure
[{:dog/name "Fluffy", :dog/breed "Poodle"}
 {:dog/name "Tiny", :dog/breed "Great Dane"}]
</code></p>

<p><strong>Human:</strong>  Thanks so much.  I think I beginning to get the hang of schemas and queries.  What other things do I need to know about you?</p>

<p><strong>Datomic:</strong>  Well, you have just scratched the surface really.  One of the most interesting things about me is that I never forget facts.  You can add new facts, like Tiny&rsquo;s favorite food is now hotdogs, but I won&rsquo;t forget that he liked cheese at another point in time.</p>

<p><strong>Human:</strong> That sounds really interesting.  I think I need some tea and cookies before I delve into that.  Let&rsquo;s take a short break and talk again soon.</p>

<p><strong>Datomic:</strong>  My pleasure.  I look forward to it.</p>

<p><em>Special thanks to <a href="https://twitter.com/ohpauleez">Paul deGrandis</a> for
the conversation idea :)</em></p>

<p><em>(P.S. Humans, there are some great <a href="http://www.datomic.com/training.html">Datomic Training Videos</a> if you want to learn more)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Panic While Writing a Clojure Book]]></title>
    <link href="http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book/"/>
    <updated>2015-05-22T09:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book</id>
    <content type="html"><![CDATA[<p>I made it to that magical moment when the Clojure book I had been working on so long was published and I could actually hold it in my hand.</p>

<p><img class="<a" src="href="https://pbs.twimg.com/media/CDWsQPCUgAERViK.jpg">https://pbs.twimg.com/media/CDWsQPCUgAERViK.jpg</a>"></p>

<p>It was an immense project and I am very happy that it is finally done.  Since then, I met some people that are interested in writing books as well.
They asked if I had any insights or tips having gone through the process as a first time author.  I have collected them in this post in hopes that they will be helpful to those going through the process themselves.</p>

<p>The very first thing to do is to get an outline for your book.</p>

<h3>Start with an Outline</h3>

<p>Ideas are soft and squishy.  They drift into different shapes like clouds, and can melt away just as quickly.  One of the hardest things to do was trying to arrange all those ideas in my head into an initial form that would serve as the structure for the entire book.  I would pick up a pen and paper, start feeling overwhelmed, and suddenly remember I had something else very pressing to do.  I successfully avoided starting a book for quite a while, until one day I cornered myself.  I decided that I write my book outline on a long plane flight.  With salted peanuts as fuel, and nowhere to escape, I finally wrote an outline.  It wasn&rsquo;t perfect but it was a start and looking back and it was not too far off.  Here it is in all of its original roughness.</p>

<p>```
Title: Living Clojure</p>

<p>From beginning steps to thriving in a functional world</p>

<p>(Each Chapter will follow quotes from Alice in Wonderland and very use ideas from some examples)</p>

<p>Book 1 &ndash; Beginner steps</p>

<p>Chapter 1 &ndash; Are you comfortable?  Talk about how OO is comfortable but there is another world out there and new way of thinking functionally.</p>

<pre><code>        White Rabbit goes by
</code></pre>

<p>Chapter 2 &ndash; Forms &amp; Functions &ndash; Falling down the rabbit hole
Chapter 3 &ndash; Functional Transformations &ndash; Growing bigger and smaller &ndash; Key to thinking functionally is about transforming data from one shape to another shape.</p>

<pre><code>        Map &amp; Reduce
</code></pre>

<p>Chapter 4 &ndash; Embracing side effects  &ndash; Clojure is impure functional language (The rabbit&rsquo;s glove)  &ndash; Cover do and io stuff. Also basic stuff about</p>

<pre><code>        STM atoms and agents/ Protocols
</code></pre>

<p>Chapter 5 &ndash; Libraries, Libraries  &ndash; &ndash; how to use Leiningen</p>

<pre><code>        build system. Where to find clojure libraries, how to use
        Serpents - camel-snake-kebab
</code></pre>

<p>Chapter 6 &ndash; core.asyc &ndash; Tea Party introduction to the core.async library
Chapter 7 &ndash; Clojure web &ndash; Chesire cat  &ndash; introduction to Ring, Cheshire library, ClojureScript and OM</p>

<p>Book 2 &ndash; From here to there &ndash; thriving in a functional world</p>

<p>Training plan for thriving in a functional world.</p>

<p>Chapter 8 &ndash; Join the community &ndash; Surround yourself with other Clojure enthusiats
  &ndash; Twitter clojure
  &ndash; Github account
  &ndash; Clojure mailing list
  &ndash; Prismatic clojure news
  &ndash; Meetup for local community group.  If there is not one in your area. start one!
  &ndash; Attend a Clojure conj</p>

<p>Chatpter 9 &ndash; Practice and build up
Like Couch to 5K 7 week training program to work up to
practicing Clojure</p>

<p>```</p>

<p>Now that I had an outline.  I just needed to figure out how long it would take me to write the book.</p>

<h3>However Long You Think It Will Take &ndash; You Are Wrong</h3>

<p>Having never written a book before, I had <em>no idea</em> how much work it would be.  The closest thing I had to compare it to was writing a blog post.  I figured writing a chapter would be roughly equivalent to writing a blog post.  If I could go back in time, this is the moment where my future self would pour a glass of ice water on my past self.  Writing a book is nothing like that.  It is a lot of time and work.  If I <em>had</em> to compare it now to writing blog posts, the process would be this.</p>

<pre><code>- You write a blog post.
- You rewrite the blog post.
- You write a second blog post.
- You rewrite that blog post and the first one too.
- You write another blog post.
- You rewrite all three post .....
</code></pre>

<p>So, if you have to commit to deadlines, make sure you remember how hard it will be, and then double the number.</p>

<p>Speaking of deadlines, they suck, but you should have them.</p>

<h3>Make Deadlines</h3>

<p>Deadlines are not fun.  In fact, deadlines might even be a source of potential panic.  But for me, they were necessary evil.  There were a few beautiful times when inspiration came knocking at my door and I couldn&rsquo;t wait to start writing.  But most of the time, inspiration was off somewhere else eating biscuits.  The only thing that actually moved the book along was me knowing that I needed to get the next chunk done by a certain date.</p>

<p>I found the best thing to do was to set aside a small bit of time on a daily basis to write something.</p>

<h3>Routine, Routine, Routine</h3>

<p>A daily routine was the most crucial thing for me.  Life is really busy with work and family.  It is so easy to get overwhelmed with daily life.  I decided that mornings would work best for me.  So I would stumble in to my computer an hour before work, with a hot cup of tea in hand, and write something.  Some days I actually did quite a bit.  Other days, I would write one sentence and declare it done.  But, I would always do <em>something</em>.  Even though those small slices of time didn&rsquo;t seem like a lot, they added up over the course of a week.</p>

<p>Another curious thing happens when you do something, even a little bit, day after day.  You start to get better at it.</p>

<h3>Writing is a Different Skill from Coding</h3>

<p>I was used to writing code all day.  I found that the code writing skills are not the same as writing about code.  In fact, I found it really hard to do at the start.  But, just like writing code, you get better with practice.  And to get better at anything, feedback is really important.</p>

<h3>Get and Trust Feedback</h3>

<p>After each chapter, I would get feedback from my editor.  She was awesome and provided ways for me to improve the experience for the reader.  I lost track of how many times I rewrote that first chapter, but each time it would get a bit better and I would improve as well.  After the book was about half done it was sent out to others for technical review.  They provided feedback not only on the writing style but also the technical content, making sure that it all made sense.</p>

<p>The feedback loop is much slower for writing a book than writing code, but it is just as vital.  The great people providing feedback are you closest partners in this.  You need to trust them.  Especially during the roughest time, the middle of the book.</p>

<h3>The Middle Bit is the Hardest</h3>

<p>I found the hardest time was about halfway through the book.  The initial excitement of the new endeavor had long since worn off.  It seemed like such a mountain of a task, with no end in sight.  I questioned my decision to continue with it daily.  My routine and deadlines kept me moving forward.  But my circle of friends and family kept me sane.  It was great to have an outlet, not only to vent my frustration with my slow progress, but to get kind encouragement to keep my spirits up.</p>

<p>During these dark days, I also ate cheese.</p>

<h3>Celebrate Your Small Victories</h3>

<p>At the end of every chapter or deadline I would fix myself a nice plate of cheese and crackers.  You have to celebrate the small wins.  Cheese is also very tasty.</p>

<p>When the book was finally done.  I had a really tasty plate, complete with Stilton, Brie, and a dependable Cheddar.  I was incredibly happy to be finished. But I knew that I definitely could have not done it without the help of others.</p>

<h3>Thank Everyone that Supported You</h3>

<p>Writing a book is a huge undertaking that is utterly impossible to do alone.  I could have not done it without the help and support of my editor, reviewers, family, friends, as well as the entire Clojure Community.  I am so thankful to all of you that helped my in this project.  You are great.</p>

<p>So, should you go ahead and write that book?</p>

<h3>Do It</h3>

<p>Yes, you should write that book and share your knowledge.  Don&rsquo;t panic, remember to breathe, get some cheese and tea, and go for it!  It will be awesome.</p>
]]></content>
  </entry>
  
</feed>
