<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2015-05-30T11:08:59-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Not to Panic While Writing a Clojure Book]]></title>
    <link href="http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book/"/>
    <updated>2015-05-22T09:11:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2015/05/22/how-not-to-panic-while-writing-a-clojure-book</id>
    <content type="html"><![CDATA[<p>I made it to that magical moment when the Clojure book I had been working on so long was published and I could actually hold it in my hand.</p>

<p><img class="<a" src="href="https://pbs.twimg.com/media/CDWsQPCUgAERViK.jpg">https://pbs.twimg.com/media/CDWsQPCUgAERViK.jpg</a>"></p>

<p>It was an immense project and I am very happy that it is finally done.  Since then, I met some people that are interested in writing books as well.
They asked if I had any insights or tips having gone through the process as a first time author.  I have collected them in this post in hopes that they will be helpful to those going through the process themselves.</p>

<p>The very first thing to do is to get an outline for your book.</p>

<h3>Start with an Outline</h3>

<p>Ideas are soft and squishy.  They drift into different shapes like clouds, and can melt away just as quickly.  One of the hardest things to do was trying to arrange all those ideas in my head into an initial form that would serve as the structure for the entire book.  I would pick up a pen and paper, start feeling overwhelmed, and suddenly remember I had something else very pressing to do.  I successfully avoided starting a book for quite a while, until one day I cornered myself.  I decided that I write my book outline on a long plane flight.  With salted peanuts as fuel, and nowhere to escape, I finally wrote an outline.  It wasn&rsquo;t perfect but it was a start and looking back and it was not too far off.  Here it is in all of its original roughness.</p>

<p>```
Title: Living Clojure</p>

<p>From beginning steps to thriving in a functional world</p>

<p>(Each Chapter will follow quotes from Alice in Wonderland and very use ideas from some examples)</p>

<p>Book 1 &ndash; Beginner steps</p>

<p>Chapter 1 &ndash; Are you comfortable?  Talk about how OO is comfortable but there is another world out there and new way of thinking functionally.</p>

<pre><code>        White Rabbit goes by
</code></pre>

<p>Chapter 2 &ndash; Forms &amp; Functions &ndash; Falling down the rabbit hole
Chapter 3 &ndash; Functional Transformations &ndash; Growing bigger and smaller &ndash; Key to thinking functionally is about transforming data from one shape to another shape.</p>

<pre><code>        Map &amp; Reduce
</code></pre>

<p>Chapter 4 &ndash; Embracing side effects  &ndash; Clojure is impure functional language (The rabbit&rsquo;s glove)  &ndash; Cover do and io stuff. Also basic stuff about</p>

<pre><code>        STM atoms and agents/ Protocols
</code></pre>

<p>Chapter 5 &ndash; Libraries, Libraries  &ndash; &ndash; how to use Leiningen</p>

<pre><code>        build system. Where to find clojure libraries, how to use
        Serpents - camel-snake-kebab
</code></pre>

<p>Chapter 6 &ndash; core.asyc &ndash; Tea Party introduction to the core.async library
Chapter 7 &ndash; Clojure web &ndash; Chesire cat  &ndash; introduction to Ring, Cheshire library, ClojureScript and OM</p>

<p>Book 2 &ndash; From here to there &ndash; thriving in a functional world</p>

<p>Training plan for thriving in a functional world.</p>

<p>Chapter 8 &ndash; Join the community &ndash; Surround yourself with other Clojure enthusiats
  &ndash; Twitter clojure
  &ndash; Github account
  &ndash; Clojure mailing list
  &ndash; Prismatic clojure news
  &ndash; Meetup for local community group.  If there is not one in your area. start one!
  &ndash; Attend a Clojure conj</p>

<p>Chatpter 9 &ndash; Practice and build up
Like Couch to 5K 7 week training program to work up to
practicing Clojure</p>

<p>```</p>

<p>Now that I had an outline.  I just needed to figure out how long it would take me to write the book.</p>

<h3>However Long You Think It Will Take &ndash; You Are Wrong</h3>

<p>Having never written a book before, I had <em>no idea</em> how much work it would be.  The closest thing I had to compare it to was writing a blog post.  I figured writing a chapter would be roughly equivalent to writing a blog post.  If I could go back in time, this is the moment where my future self would pour a glass of ice water on my past self.  Writing a book is nothing like that.  It is a lot of time and work.  If I <em>had</em> to compare it now to writing blog posts, the process would be this.</p>

<pre><code>- You write a blog post.
- You rewrite the blog post.
- You write a second blog post.
- You rewrite that blog post and the first one too.
- You write another blog post.
- You rewrite all three post .....
</code></pre>

<p>So, if you have to commit to deadlines, make sure you remember how hard it will be, and then double the number.</p>

<p>Speaking of deadlines, they suck, but you should have them.</p>

<h3>Make Deadlines</h3>

<p>Deadlines are not fun.  In fact, deadlines might even be a source of potential panic.  But for me, they were necessary evil.  There were a few beautiful times when inspiration came knocking at my door and I couldn&rsquo;t wait to start writing.  But most of the time, inspiration was off somewhere else eating biscuits.  The only thing that actually moved the book along was me knowing that I needed to get the next chunk done by a certain date.</p>

<p>I found the best thing to do was to set aside a small bit of time on a daily basis to write something.</p>

<h3>Routine, Routine, Routine</h3>

<p>A daily routine was the most crucial thing for me.  Life is really busy with work and family.  It is so easy to get overwhelmed with daily life.  I decided that mornings would work best for me.  So I would stumble in to my computer an hour before work, with a hot cup of tea in hand, and write something.  Some days I actually did quite a bit.  Other days, I would write one sentence and declare it done.  But, I would always do <em>something</em>.  Even though those small slices of time didn&rsquo;t seem like a lot, they added up over the course of a week.</p>

<p>Another curious thing happens when you do something, even a little bit, day after day.  You start to get better at it.</p>

<h3>Writing is a Different Skill from Coding</h3>

<p>I was used to writing code all day.  I found that the code writing skills are not the same as writing about code.  In fact, I found it really hard to do at the start.  But, just like writing code, you get better with practice.  And to get better at anything, feedback is really important.</p>

<h3>Get and Trust Feedback</h3>

<p>After each chapter, I would get feedback from my editor.  She was awesome and provided ways for me to improve the experience for the reader.  I lost track of how many times I rewrote that first chapter, but each time it would get a bit better and I would improve as well.  After the book was about half done it was sent out to others for technical review.  They provided feedback not only on the writing style but also the technical content, making sure that it all made sense.</p>

<p>The feedback loop is much slower for writing a book than writing code, but it is just as vital.  The great people providing feedback are you closest partners in this.  You need to trust them.  Especially during the roughest time, the middle of the book.</p>

<h3>The Middle Bit is the Hardest</h3>

<p>I found the hardest time was about halfway through the book.  The initial excitement of the new endeavor had long since worn off.  It seemed like such a mountain of a task, with no end in sight.  I questioned my decision to continue with it daily.  My routine and deadlines kept me moving forward.  But my circle of friends and family kept me sane.  It was great to have an outlet, not only to vent my frustration with my slow progress, but to get kind encouragement to keep my spirits up.</p>

<p>During these dark days, I also ate cheese.</p>

<h3>Celebrate Your Small Victories</h3>

<p>At the end of every chapter or deadline I would fix myself a nice plate of cheese and crackers.  You have to celebrate the small wins.  Cheese is also very tasty.</p>

<p>When the book was finally done.  I had a really tasty plate, complete with Stilton, Brie, and a dependable Cheddar.  I was incredibly happy to be finished. But I knew that I definitely could have not done it without the help of others.</p>

<h3>Thank Everyone that Supported You</h3>

<p>Writing a book is a huge undertaking that is utterly impossible to do alone.  I could have not done it without the help and support of my editor, reviewers, family, friends, as well as the entire Clojure Community.  I am so thankful to all of you that helped my in this project.  You are great.</p>

<p>So, should you go ahead and write that book?</p>

<h3>Do It</h3>

<p>Yes, you should write that book and share your knowledge.  Don&rsquo;t panic, remember to breathe, get some cheese and tea, and go for it!  It will be awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partition with Game of Thrones Pugs]]></title>
    <link href="http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs/"/>
    <updated>2015-01-26T18:55:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs</id>
    <content type="html"><![CDATA[<p>Clojure&rsquo;s <em>partition</em> and <em>partition-all</em> functions are very useful.
However, I have been bitten a few times using <em>partition</em> when I
really wanted <em>partition-all</em>.  So to help myself and all of you to
remember it, I have made some diagrams with <a href="http://www.designswan.com/archives/the-pugs-of-westeros-cute-pugs-dressed-up-like-characters-in-game-of-thrones.html">pugs from the Game of Thrones</a></p>

<p>In code, <a href="http://clojuredocs.org/clojure.core/partition">partition</a> takes a collection and returns a lazy sequence of
lists, each containing n items.</p>

<p>To demonstrate this with pugs, we will partition 5 pugs into groups of
twos.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7301/15757758964_570d260a31_c.jpg">https://c4.staticflickr.com/8/7301/15757758964_570d260a31_c.jpg</a>"></p>

<p>This partition will give you two groups of two pugs.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7350/16380203235_91c8c4e9ee_c.jpg">https://c4.staticflickr.com/8/7350/16380203235_91c8c4e9ee_c.jpg</a>"></p>

<p>Notice, (and here is the important part), the last pug is missing.  The Joffrey pug is not included because <em>partition</em> will not include items that do not make a complete partition.  In this case, because there is no group of 2 pugs for the Joffrey pug to be in, it gets dropped.</p>

<p><em>This is the thing that has bitten me in the past.</em></p>

<p>A common use for wanting to partition things is to control the number
of things that you process at one time.  An example of this is sending only 500 items to be processed in a batch job at one time.  If you have a few thousand items to be processed, partitioning them is a good way of chuncking.  However, if you have an arbitrary number of items, you most certainly want to process them <em>all</em> and not drop any.  This is where you should use <em>partition-all</em> instead.</p>

<p><a href="http://clojuredocs.org/clojure.core/partition-all">Partition-all</a> chunks the items as well, but also includes any leftovers.  Demonstrating again with pugs.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7427/15757758884_20bfd014eb_c.jpg">https://c4.staticflickr.com/8/7427/15757758884_20bfd014eb_c.jpg</a>"></p>

<p>This <em>partition-all</em> will give you three groups of pugs.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7323/16193980179_229343f7f3_c.jpg">https://c4.staticflickr.com/8/7323/16193980179_229343f7f3_c.jpg</a>"></p>

<p>This time pug Joffrey is not left out!</p>

<p>Remember, think carefully before using <em>partition</em>.  Don&rsquo;t leave a pug out.</p>

<p>By the way, I can&rsquo;t wait till the next season of Game of Thrones.  Until then ..</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('2EoQCtPR2-I');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/2EoQCtPR2-I?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/2EoQCtPR2-I/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=2EoQCtPR2-I" id="2EoQCtPR2-I" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">https://youtube.com/devicesupport</div>
</a>
<div class="video-info" >https://youtube.com/devicesupport
http://m.youtube.com</div>
</div>

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure FizzBuzz without Conditionals]]></title>
    <link href="http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals/"/>
    <updated>2014-11-13T21:43:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://c1.staticflickr.com/5/4136/4825113119_9630b7927f.jpg">https://c1.staticflickr.com/5/4136/4825113119_9630b7927f.jpg</a>"></p>

<p>Sure you may have done FizzBuzz before.  Maybe you have even done it
in Clojure.  But have you done it without the use of <em>any</em>
conditionals?</p>

<p>As your brain starts to work on the <em>how</em> this we be done, you might
be wondering <em>why</em> you should do this in the first place?</p>

<p>There are two very good reasons for this.  The first is that it is a
<em>kata</em>.</p>

<h2>Katas build your code practice</h2>

<p><img class="<a" src="href="https://c4.staticflickr.com/4/3552/3434757877_711709da58_b.jpg">https://c4.staticflickr.com/4/3552/3434757877_711709da58_b.jpg</a>"></p>

<p>Code katas build your skill through practice.  It doesn&rsquo;t matter if
you are a beginner or an expert.  Just, like in all those martial arts
movies with the swordsman practicing, so must we.  We stretch and
flex our coding muscles with katas to grow them and keep them in shape.</p>

<p>Yes, you may code every day at work.  But it is not the same as kata
practice.  So much of <em>day to day</em> work involves complexity
with large interconnected concerns.  Our  kata practice cuts the extra
complexity out and leaves you alone with a focused small problem.</p>

<p>The second reason involves why you
should try it, this time,  <em>without conditionals</em>.  The answer is <em>creativity</em>.</p>

<h2>Constraints build creativity.</h2>

<p>It turns out that constraints are a
<a href="http://www.forbes.com/sites/groupthink/2013/07/12/creativity-how-constraints-drive-genius/">key way to drive creativity</a>.
Programming does not only require technical skills, but also
creativity. We are seldom asked to build software without constraints.
It drives design.  Sure, it can be annoying when we have to communicate with
a server that is only active on Tuesday and emits its response in
Morse Code.  But it gives us boundaries to unleash our creative
spirit.</p>

<p>So go for it.</p>

<h2>Give it a try</h2>

<p>Ready?  Here are the details.</p>

<ul>
<li>Given a number, if it number is divisible by 3 return &ldquo;fizz&rdquo;.</li>
<li>If it is divisible by 5 return &ldquo;buzz&rdquo;.</li>
<li>If it is divisible by 3 and 5 return &ldquo;fizzbuzz&rdquo;.</li>
<li>Otherwise, just return the number.</li>
<li>Don&rsquo;t use any conditionals like <em>if</em> <em>else</em> <em>case</em> <em>cond</em>.</li>
</ul>


<p>When you are done, you can check out some of the other solutions. Try
not to peek until you have done your version first though.</p>

<p>(There are some really awesome ones so far).</p>

<p><em>Feel free to link to yours in the comments too</em> :)</p>

<h2>Solutions</h2>

<p><a href="https://twitter.com/adereth/status/530740818420957184">From @aderth</a></p>

<p><a href="https://twitter.com/IamDrowsy/status/530900853855899648">From @IamDrowsy</a></p>

<p><a href="https://twitter.com/bryanwoods/status/530822584963584000">From @Bryanwoods</a></p>

<p><a href="https://twitter.com/defndaines/status/532368201472950272">From @defndaines</a></p>

<p><a href="https://gist.github.com/gigasquid/dc4686e8245154482be8">From <em>me</em></a></p>

<p><a href="https://twitter.com/hyPiRion/status/530718638064828416">From @hyPiRion</a> &ndash;
a couple of notes for this one is that:</p>

<p><code>clojure
(+)
;; -&gt; 0
</code>
and</p>

<p><code>clojure
(*)
;; -&gt; 1
</code></p>

<p>And once you think about that, you might want to read <a href="https://gist.github.com/igstan/c3797e51aa0784a5d275">this</a> :)</p>

<p>Happy Clojure Kataing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Green Eggs and Transducers]]></title>
    <link href="http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers/"/>
    <updated>2014-09-06T15:47:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/c/c2/Greenegg.gif">http://upload.wikimedia.org/wikipedia/en/c/c2/Greenegg.gif</a>"></p>

<p>A quick tour of Clojure Transducers with core.async with Dr. Seuss as a guide.</p>

<p>Follow along at home by:</p>

<ul>
<li><code>lein new green-eggs</code></li>
<li>modify your project.clj to include the following:
<code>clojure
(defproject green-eggs "0.1.0-SNAPSHOT"
:description "try them"
:url "http://en.wikipedia.org/wiki/Green_Eggs_and_Ham"
:license {:name "Eclipse Public License"
          :url "http://www.eclipse.org/legal/epl-v10.html"}
:dependencies [[org.clojure/clojure "1.7.0-alpha1"]
               [org.clojure/core.async "0.1.338.0-5c5012-alpha"]])
</code></li>
<li>Start up a repl and hack in!</li>
</ul>


<h2>Green Eggs and Ham</h2>

<p>Transducers are a new feature of Clojure 1.7.  Instead of trying to explain them with words, let&rsquo;s take a look of them in action.  First we need some data.  Let&rsquo;s def a vector of all the places you could try green eggs and ham.</p>

<p>```clojure
(ns green-eggs.core
  (:require [clojure.core.async :as async]))</p>

<p>(def green-eggs-n-ham
  [&ldquo;in the rain&rdquo;
   &ldquo;on a train&rdquo;
   &ldquo;in a box&rdquo;
   &ldquo;with a fox&rdquo;
   &ldquo;in a house&rdquo;
   &ldquo;with a mouse&rdquo;
   &ldquo;here or there&rdquo;
   &ldquo;anywhere&rdquo;])
```</p>

<p>Next, let&rsquo;s create a function that will transform the places into a &ldquo;I would not eat them &hellip;&rdquo; sentence.</p>

<p>```clojure
(defn i-do-not-like-them [s]
  (format &ldquo;I would not eat them %s.&rdquo; s))</p>

<p>(i-do-not-like-them &ldquo;in the rain&rdquo;)
;; &ndash;> &ldquo;I would not eat them in the rain.&rdquo;
```</p>

<p>We also need a function to take this result and actually try the green eggs and ham.</p>

<p>```clojure
(defn try-them [s]
  (clojure.string/replace s  #&ldquo; not&rdquo; &ldquo;&rdquo;))</p>

<p>(try-them &ldquo;I would not eat them in the rain.&rdquo;)
;; &ndash;> &ldquo;I would eat them in the rain.&rdquo;
```</p>

<p>Now we have two transformations that we can apply to the vector of green-eggs-n-ham strings.
One of the really nice things about transducers is that you can describe and compose this transformation without a data structure present.</p>

<p><code>clojure
(def sam-i-am-xform
  (comp
   (map i-do-not-like-them)
   (map try-them)))
</code></p>

<p>We can run the transformation of the transducers against the data in a few ways.</p>

<ul>
<li><em>into</em>: Non-lazy turn the transformation into a collection</li>
<li><em>sequence</em>: Same thing but lazy</li>
<li><em>transduce</em>: Acts like reduce on the all the transformed elements</li>
<li>With <em>core.async</em> channels doing the transformations.</li>
</ul>


<p>Let&rsquo;s look at the green eggs and ham example for each one of these ways:</p>

<h3>Into</h3>

<p>Into takes a transducer and collection to work on and returns the vector we asked for:</p>

<p><code>clojure
(into [] sam-i-am-xform green-eggs-n-ham)
;; -&gt; ["I would eat them in the rain."
;;     "I would eat them on a train."
;;     "I would eat them in a box."
;;     "I would eat them with a fox."
;;     "I would eat them in a house."
;;     "I would eat them with a mouse."
;;     "I would eat them here or there."
;;     "I would eat them anywhere."]
</code></p>

<h3>Sequence</h3>

<p>Sequence takes similar arguments, but as promised, returns a lazy sequence that we can interact with.</p>

<p>```clojure
(class (sequence sam-i-am-xform green-eggs-n-ham))
;; &ndash;> clojure.lang.LazyTransformer</p>

<p>(take 1 (sequence sam-i-am-xform green-eggs-n-ham))
;; &ndash;> (&ldquo;I would eat them in the rain.&rdquo;)</p>

<p>```</p>

<h3>Transduce</h3>

<p>If we want to finally arrange all our sentences in the vectors into one string, we would use reduce.  The way to do this with transducers is to use <em>transduce</em>.  It takes a function of two arguments to perform the reduce, as well as an initial data input.</p>

<p>```clojure
(transduce sam-i-am-xform #(str %1 %2 &ldquo; &rdquo;) &ldquo;&rdquo; green-eggs-n-ham)
;; &ndash;> &ldquo;I would eat them in the rain.
;;     I would eat them on a train.
;;     I would eat them in a box.
;;     I would eat them with a fox.
;;     I would eat them in a house.
;;     I would eat them with a mouse.
;;     I would eat them here or there.
;;     I would eat them anywhere.&rdquo;</p>

<p>;;_note: In  1.7.0-alpha2, transduce changed and you need to use a
;;(transduce sam-i-am-xform (completing #(str %1 %2 &ldquo; &rdquo;)) &ldquo;&rdquo; green-eggs-n-ham)
;;instead.</p>

<p>```</p>

<h3>Core.async</h3>

<p>Core.async has a really nice way to define channels with a transducer that will transform each element on the channel.</p>

<p><code>clojure
(def sam-i-am-chan (async/chan 1 sam-i-am-xform))
</code></p>

<p>Let&rsquo;s define another channel to reduce the results of the sam-i-am-chan to a string.</p>

<p><code>clojure
(def result-chan (async/reduce #(str %1 %2 " ") "" sam-i-am-chan))
</code></p>

<p>Finally, let&rsquo;s actually put the green-eggs-n-ham data onto the sam-i-am-chan and let the data transformations flow&hellip;.</p>

<p><code>clojure
(async/onto-chan sam-i-am-chan green-eggs-n-ham)
</code></p>

<p>At last,
we can get our result off the result channel and revel in the beauty of asynchronous data transducers.</p>

<p>```clojure
(def i-like-them (async/&lt;!! result-chan))</p>

<p>i-like-them
;; &ndash;> &ldquo;I would eat them in the rain.
;;     I would eat them on a train.
;;     I would eat them in a box.
;;     I would eat them with a fox.
;;     I would eat them in a house.
;;     I would eat them with a mouse.
;;     I would eat them here or there.
;;     I would eat them anywhere.&rdquo;</p>

<p>```</p>

<p>Transducers are elegant and powerful, just like the rest of Clojure.  Try them, you will like them :)</p>

<p><img class="<a" src="href="http://ecx.images-amazon.com/images/I/51JqhoQCtgL.jpg">http://ecx.images-amazon.com/images/I/51JqhoQCtgL.jpg</a>"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Proper Pronunciation of Clojure's Assoc]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc/"/>
    <updated>2014-07-28T20:27:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc</id>
    <content type="html"><![CDATA[<p>Sometimes I pause before talking to someone about Clojure code. Not because I am unsure of the code, but because I am unsure of
how to pronounce the code.  The particular code in question is
Clojure&rsquo;s <em>assoc</em>.  I have heard it pronounced two ways. One is
&ldquo;assosh&rdquo;, the other is &ldquo;assok&rdquo;.  So, to determine it, I decided to conduct a
scientific poll of the Clojure community.</p>

<p>I posted the poll on
<a href="https://twitter.com/gigasquid/status/493891057906896896">twitter</a> to
the Cojure community who follow me.  The control group poll was not viewed
by those who do not follow me, and/or, are not on twitter.</p>

<p>The results were startling.</p>

<p><img class="<a" src="href="https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg">https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg</a>"></p>

<ul>
<li>assosh &ndash; 10</li>
<li>assok  &ndash; 8</li>
<li>assose &ndash; 2</li>
<li>Jeremy &ndash; 1</li>
<li>asoaksh &ndash; 1</li>
</ul>


<p>The community is clearly deeply divided on this important question.</p>

<p>After sifting through the raw data, I remembered my statistical analysis and threw out the extremes.</p>

<p><img class="<a" src="href="https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg">https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg</a>"></p>

<p>The conclusion was still a stark reality.</p>

<p><em>We do not as a community know how to pronounce assoc.</em></p>

<h2>Solution</h2>

<p>I can only see one way forward.  We must address this as a community.
I propose that the community documentation of <a href="http://clojuredocs.org/">Clojure Docs</a>
and <a href="http://grimoire.arrdem.com/">Grimoire</a> modify their sites to include audio pronunciation like <a href="http://www.macmillandictionary.com/us/media/british/uk_pron/l/lla/llama/llama_British_English_pronunciation.mp3">this</a>.</p>

<p>Remember, I&rsquo;m pulling for you.  We are all in this together.</p>
]]></content>
  </entry>
  
</feed>
