<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2015-01-26T20:14:03-05:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Partition with Game of Thrones Pugs]]></title>
    <link href="http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs/"/>
    <updated>2015-01-26T18:55:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2015/01/26/partition-with-game-of-thrones-pugs</id>
    <content type="html"><![CDATA[<p>Clojure&rsquo;s <em>partition</em> and <em>partition-all</em> functions are very useful.
However, I have been bitten a few times using <em>partition</em> when I
really wanted <em>partition-all</em>.  So to help myself and all of you to
remember it, I have made some diagrams with <a href="http://www.designswan.com/archives/the-pugs-of-westeros-cute-pugs-dressed-up-like-characters-in-game-of-thrones.html">pugs from the Game of Thrones</a></p>

<p>In code, <a href="http://clojuredocs.org/clojure.core/partition">partition</a> takes a collection and returns a lazy sequence of
lists, each containing n items.</p>

<p>To demonstrate this with pugs, we will partition 5 pugs into groups of
twos.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7441/16190675727_8f8837b970_c.jpg">https://c4.staticflickr.com/8/7441/16190675727_8f8837b970_c.jpg</a>"></p>

<p>This partition will give you two groups of two pugs.</p>

<p><img class="<a" src="href="https://c4.staticflickr.com/8/7438/16374834221_cac3ee7bda_c.jpg">https://c4.staticflickr.com/8/7438/16374834221_cac3ee7bda_c.jpg</a>"></p>

<p>Notice, (and here is the important part), the last pug is missing.  The Joffrey pug is not included because <em>partition</em> will not include items that do not make a complete partition.  In this case, because there is no group of 2 pugs for the Joffrey pug to be in, it gets dropped.</p>

<p><em>This is thing that has bitten me in the past.</em></p>

<p>A common use for wanting to partition things is to control the number
of things that you process at one time.  An example of this is sending only 500 items to be processed in a batch job at one time.  If you have a few thousand items to be processed, partitioning them is a good way of chuncking.  However, if you have an arbitrary number of items, you most certainly want to process them <em>all</em> and not drop any.  This is where you should use <em>partition-all</em> instead.</p>

<p><a href="http://clojuredocs.org/clojure.core/partition-all">Partition-all</a> chunks the items as well, but also includes any leftovers.  Demonstrating again with pugs.</p>

<p><img class="<a" src="href="https://c1.staticflickr.com/9/8662/16189182110_4bbd002a74_c.jpg">https://c1.staticflickr.com/9/8662/16189182110_4bbd002a74_c.jpg</a>"></p>

<p>This <em>partition-all</em> will give you three groups of pugs.</p>

<p><img class="<a" src="href="https://c1.staticflickr.com/9/8662/16188930218_1f3262b250_c.jpg">https://c1.staticflickr.com/9/8662/16188930218_1f3262b250_c.jpg</a>"></p>

<p>This time pug Joffrey is not left out!</p>

<p>Remember, think carefully before using <em>partition</em>.  Don&rsquo;t leave a pug out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure FizzBuzz without Conditionals]]></title>
    <link href="http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals/"/>
    <updated>2014-11-13T21:43:00-05:00</updated>
    <id>http://gigasquid.github.io/blog/2014/11/13/clojure-fizzbuzz-without-conditionals</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://c1.staticflickr.com/5/4136/4825113119_9630b7927f.jpg">https://c1.staticflickr.com/5/4136/4825113119_9630b7927f.jpg</a>"></p>

<p>Sure you may have done FizzBuzz before.  Maybe you have even done it
in Clojure.  But have you done it without the use of <em>any</em>
conditionals?</p>

<p>As your brain starts to work on the <em>how</em> this we be done, you might
be wondering <em>why</em> you should do this in the first place?</p>

<p>There are two very good reasons for this.  The first is that it is a
<em>kata</em>.</p>

<h2>Katas build your code practice</h2>

<p><img class="<a" src="href="https://c4.staticflickr.com/4/3552/3434757877_711709da58_b.jpg">https://c4.staticflickr.com/4/3552/3434757877_711709da58_b.jpg</a>"></p>

<p>Code katas build your skill through practice.  It doesn&rsquo;t matter if
you are a beginner or an expert.  Just, like in all those martial arts
movies with the swordsman practicing, so must we.  We stretch and
flex our coding muscles with katas to grow them and keep them in shape.</p>

<p>Yes, you may code every day at work.  But it is not the same as kata
practice.  So much of <em>day to day</em> work involves complexity
with large interconnected concerns.  Our  kata practice cuts the extra
complexity out and leaves you alone with a focused small problem.</p>

<p>The second reason involves why you
should try it, this time,  <em>without conditionals</em>.  The answer is <em>creativity</em>.</p>

<h2>Constraints build creativity.</h2>

<p>It turns out that constraints are a
<a href="http://www.forbes.com/sites/groupthink/2013/07/12/creativity-how-constraints-drive-genius/">key way to drive creativity</a>.
Programming does not only require technical skills, but also
creativity. We are seldom asked to build software without constraints.
It drives design.  Sure, it can be annoying when we have to communicate with
a server that is only active on Tuesday and emits its response in
Morse Code.  But it gives us boundaries to unleash our creative
spirit.</p>

<p>So go for it.</p>

<h2>Give it a try</h2>

<p>Ready?  Here are the details.</p>

<ul>
<li>Given a number, if it number is divisible by 3 return &ldquo;fizz&rdquo;.</li>
<li>If it is divisible by 5 return &ldquo;buzz&rdquo;.</li>
<li>If it is divisible by 3 and 5 return &ldquo;fizzbuzz&rdquo;.</li>
<li>Otherwise, just return the number.</li>
<li>Don&rsquo;t use any conditionals like <em>if</em> <em>else</em> <em>case</em> <em>cond</em>.</li>
</ul>


<p>When you are done, you can check out some of the other solutions. Try
not to peek until you have done your version first though.</p>

<p>(There are some really awesome ones so far).</p>

<p><em>Feel free to link to yours in the comments too</em> :)</p>

<h2>Solutions</h2>

<p><a href="https://twitter.com/adereth/status/530740818420957184">From @aderth</a></p>

<p><a href="https://twitter.com/IamDrowsy/status/530900853855899648">From @IamDrowsy</a></p>

<p><a href="https://twitter.com/bryanwoods/status/530822584963584000">From @Bryanwoods</a></p>

<p><a href="https://twitter.com/defndaines/status/532368201472950272">From @defndaines</a></p>

<p><a href="https://gist.github.com/gigasquid/dc4686e8245154482be8">From <em>me</em></a></p>

<p><a href="https://twitter.com/hyPiRion/status/530718638064828416">From @hyPiRion</a> &ndash;
a couple of notes for this one is that:</p>

<p><code>clojure
(+)
;; -&gt; 0
</code>
and</p>

<p><code>clojure
(*)
;; -&gt; 1
</code></p>

<p>And once you think about that, you might want to read <a href="https://gist.github.com/igstan/c3797e51aa0784a5d275">this</a> :)</p>

<p>Happy Clojure Kataing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Green Eggs and Transducers]]></title>
    <link href="http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers/"/>
    <updated>2014-09-06T15:47:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/09/06/green-eggs-and-transducers</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/c/c2/Greenegg.gif">http://upload.wikimedia.org/wikipedia/en/c/c2/Greenegg.gif</a>"></p>

<p>A quick tour of Clojure Transducers with core.async with Dr. Seuss as a guide.</p>

<p>Follow along at home by:</p>

<ul>
<li><code>lein new green-eggs</code></li>
<li>modify your project.clj to include the following:
<code>clojure
(defproject green-eggs "0.1.0-SNAPSHOT"
:description "try them"
:url "http://en.wikipedia.org/wiki/Green_Eggs_and_Ham"
:license {:name "Eclipse Public License"
          :url "http://www.eclipse.org/legal/epl-v10.html"}
:dependencies [[org.clojure/clojure "1.7.0-alpha1"]
               [org.clojure/core.async "0.1.338.0-5c5012-alpha"]])
</code></li>
<li>Start up a repl and hack in!</li>
</ul>


<h2>Green Eggs and Ham</h2>

<p>Transducers are a new feature of Clojure 1.7.  Instead of trying to explain them with words, let&rsquo;s take a look of them in action.  First we need some data.  Let&rsquo;s def a vector of all the places you could try green eggs and ham.</p>

<p>```clojure
(ns green-eggs.core
  (:require [clojure.core.async :as async]))</p>

<p>(def green-eggs-n-ham
  [&ldquo;in the rain&rdquo;
   &ldquo;on a train&rdquo;
   &ldquo;in a box&rdquo;
   &ldquo;with a fox&rdquo;
   &ldquo;in a house&rdquo;
   &ldquo;with a mouse&rdquo;
   &ldquo;here or there&rdquo;
   &ldquo;anywhere&rdquo;])
```</p>

<p>Next, let&rsquo;s create a function that will transform the places into a &ldquo;I would not eat them &hellip;&rdquo; sentence.</p>

<p>```clojure
(defn i-do-not-like-them [s]
  (format &ldquo;I would not eat them %s.&rdquo; s))</p>

<p>(i-do-not-like-them &ldquo;in the rain&rdquo;)
;; &ndash;> &ldquo;I would not eat them in the rain.&rdquo;
```</p>

<p>We also need a function to take this result and actually try the green eggs and ham.</p>

<p>```clojure
(defn try-them [s]
  (clojure.string/replace s  #&ldquo; not&rdquo; &ldquo;&rdquo;))</p>

<p>(try-them &ldquo;I would not eat them in the rain.&rdquo;)
;; &ndash;> &ldquo;I would eat them in the rain.&rdquo;
```</p>

<p>Now we have two transformations that we can apply to the vector of green-eggs-n-ham strings.
One of the really nice things about transducers is that you can describe and compose this transformation without a data structure present.</p>

<p><code>clojure
(def sam-i-am-xform
  (comp
   (map i-do-not-like-them)
   (map try-them)))
</code></p>

<p>We can run the transformation of the transducers against the data in a few ways.</p>

<ul>
<li><em>into</em>: Non-lazy turn the transformation into a collection</li>
<li><em>sequence</em>: Same thing but lazy</li>
<li><em>transduce</em>: Acts like reduce on the all the transformed elements</li>
<li>With <em>core.async</em> channels doing the transformations.</li>
</ul>


<p>Let&rsquo;s look at the green eggs and ham example for each one of these ways:</p>

<h3>Into</h3>

<p>Into takes a transducer and collection to work on and returns the vector we asked for:</p>

<p><code>clojure
(into [] sam-i-am-xform green-eggs-n-ham)
;; -&gt; ["I would eat them in the rain."
;;     "I would eat them on a train."
;;     "I would eat them in a box."
;;     "I would eat them with a fox."
;;     "I would eat them in a house."
;;     "I would eat them with a mouse."
;;     "I would eat them here or there."
;;     "I would eat them anywhere."]
</code></p>

<h3>Sequence</h3>

<p>Sequence takes similar arguments, but as promised, returns a lazy sequence that we can interact with.</p>

<p>```clojure
(class (sequence sam-i-am-xform green-eggs-n-ham))
;; &ndash;> clojure.lang.LazyTransformer</p>

<p>(take 1 (sequence sam-i-am-xform green-eggs-n-ham))
;; &ndash;> (&ldquo;I would eat them in the rain.&rdquo;)</p>

<p>```</p>

<h3>Transduce</h3>

<p>If we want to finally arrange all our sentences in the vectors into one string, we would use reduce.  The way to do this with transducers is to use <em>transduce</em>.  It takes a function of two arguments to perform the reduce, as well as an initial data input.</p>

<p>```clojure
(transduce sam-i-am-xform #(str %1 %2 &ldquo; &rdquo;) &ldquo;&rdquo; green-eggs-n-ham)
;; &ndash;> &ldquo;I would eat them in the rain.
;;     I would eat them on a train.
;;     I would eat them in a box.
;;     I would eat them with a fox.
;;     I would eat them in a house.
;;     I would eat them with a mouse.
;;     I would eat them here or there.
;;     I would eat them anywhere.&rdquo;</p>

<p>;;_note: In  1.7.0-alpha2, transduce changed and you need to use a
;;(transduce sam-i-am-xform (completing #(str %1 %2 &ldquo; &rdquo;)) &ldquo;&rdquo; green-eggs-n-ham)
;;instead.</p>

<p>```</p>

<h3>Core.async</h3>

<p>Core.async has a really nice way to define channels with a transducer that will transform each element on the channel.</p>

<p><code>clojure
(def sam-i-am-chan (async/chan 1 sam-i-am-xform))
</code></p>

<p>Let&rsquo;s define another channel to reduce the results of the sam-i-am-chan to a string.</p>

<p><code>clojure
(def result-chan (async/reduce #(str %1 %2 " ") "" sam-i-am-chan))
</code></p>

<p>Finally, let&rsquo;s actually put the green-eggs-n-ham data onto the sam-i-am-chan and let the data transformations flow&hellip;.</p>

<p><code>clojure
(async/onto-chan sam-i-am-chan green-eggs-n-ham)
</code></p>

<p>At last,
we can get our result off the result channel and revel in the beauty of asynchronous data transducers.</p>

<p>```clojure
(def i-like-them (async/&lt;!! result-chan))</p>

<p>i-like-them
;; &ndash;> &ldquo;I would eat them in the rain.
;;     I would eat them on a train.
;;     I would eat them in a box.
;;     I would eat them with a fox.
;;     I would eat them in a house.
;;     I would eat them with a mouse.
;;     I would eat them here or there.
;;     I would eat them anywhere.&rdquo;</p>

<p>```</p>

<p>Transducers are elegant and powerful, just like the rest of Clojure.  Try them, you will like them :)</p>

<p><img class="<a" src="href="http://ecx.images-amazon.com/images/I/51JqhoQCtgL.jpg">http://ecx.images-amazon.com/images/I/51JqhoQCtgL.jpg</a>"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Proper Pronunciation of Clojure's Assoc]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc/"/>
    <updated>2014-07-28T20:27:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/28/the-proper-pronunciation-of-clojures-assoc</id>
    <content type="html"><![CDATA[<p>Sometimes I pause before talking to someone about Clojure code. Not because I am unsure of the code, but because I am unsure of
how to pronounce the code.  The particular code in question is
Clojure&rsquo;s <em>assoc</em>.  I have heard it pronounced two ways. One is
&ldquo;assosh&rdquo;, the other is &ldquo;assok&rdquo;.  So, to determine it, I decided to conduct a
scientific poll of the Clojure community.</p>

<p>I posted the poll on
<a href="https://twitter.com/gigasquid/status/493891057906896896">twitter</a> to
the Cojure community who follow me.  The control group poll was not viewed
by those who do not follow me, and/or, are not on twitter.</p>

<p>The results were startling.</p>

<p><img class="<a" src="href="https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg">https://c1.staticflickr.com/3/2928/14585605540_6d0ce6169f_n.jpg</a>"></p>

<ul>
<li>assosh &ndash; 10</li>
<li>assok  &ndash; 8</li>
<li>assose &ndash; 2</li>
<li>Jeremy &ndash; 1</li>
<li>asoaksh &ndash; 1</li>
</ul>


<p>The community is clearly deeply divided on this important question.</p>

<p>After sifting through the raw data, I remembered my statistical analysis and threw out the extremes.</p>

<p><img class="<a" src="href="https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg">https://c2.staticflickr.com/6/5559/14792182503_12aa682260_n.jpg</a>"></p>

<p>The conclusion was still a stark reality.</p>

<p><em>We do not as a community know how to pronounce assoc.</em></p>

<h2>Solution</h2>

<p>I can only see one way forward.  We must address this as a community.
I propose that the community documentation of <a href="http://clojuredocs.org/">Clojure Docs</a>
and <a href="http://grimoire.arrdem.com/">Grimoire</a> modify their sites to include audio pronunciation like <a href="http://www.macmillandictionary.com/us/media/british/uk_pron/l/lla/llama/llama_British_English_pronunciation.mp3">this</a>.</p>

<p>Remember, I&rsquo;m pulling for you.  We are all in this together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure X-Men]]></title>
    <link href="http://gigasquid.github.io/blog/2014/07/27/clojure-x-men/"/>
    <updated>2014-07-27T20:12:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/07/27/clojure-x-men</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg">https://c2.staticflickr.com/6/5557/14761955842_6a8bf4a66a_n.jpg</a>"></p>

<p>Nobody knows how it happened.  Some people think it was due to the rapid expansion and adoption of Clojure.  Other people say that the language itself was caused by something deeper and more magical.  No one knows for sure.  All that we really know is that people starting being born with extraordinary powers.  Powers that no human had had before.  They were strange and unique to each person they touched.  The only thing that they all had in common, was that each was an aspect of the Clojure programming language.</p>

<h2>Luke (AKA Lazy Luke)</h2>

<p>Luke was a teenager when his powers came to him.  His mother always complained that he was lazy.  It was true, he did prefer to sleep until noon.  He also had a habit of putting everything off to the last minute, like saving all his papers for the night before they were due.  One day, though, he noticed something very strange.  He could start to see the future.  Well not really “see” it.  But he could see the infinite possibilities  of the future.  Not very far into the future, but enough.  It was a few milliseconds at first.  But now it was up to a full second.  He checked the Clojure Docs as soon as he realized his gift.  It was lazy evaluation and power to deal with infinite sequences.</p>

<h2>Spress</h2>

<p>Spress, whose real name is Emily, came into her power early.  She was
only 5 years old.  Her mother had taken her to a farm to visit with
the animals.  Her mother had pointed at the cow and told her daughter
that it said “Moo”.  Then, at the horse, saying “Neigh”.  Spress
smiled and  pointed at a bucket and said “cow”.  Her mother shook her head at her, but Spress only smiled bigger.  She said “cow” again.  Then, suddenly, the bucket went “Moo”.  She was immediately taken to the Clojure X-Men school, where they identified her power as protocols.  She trained her power and now is so good at solving the “expression problem”, she is known as “Spress”.</p>

<h2>Multi</h2>

<p>Nobody knows Multi’s background.  He came to notice in his early twenties with his powers.  Ordinary humans process sensory input, (like sight, touch, and sound), in an asynchronous fashion.  However, when it gets processed in the brain, it runs into a single pipeline bottleneck  &ndash; consciousness.  Multi’s power is that he can concurrently process his higher level consciousness and reasoning to all this sensory input.  The result is that he can move, think, and perform super fast  and in a super smart way.
He got the power of Clojure’s concurrency.</p>

<h2>Dot</h2>

<p>Dot always had a way with animals.  She had many pets growing up.  Later, she would go into the forest and the animals would seek her out.  She would be found resting by a tree surrounded by deer and birds.  One time, on her walk, she fell down a ditch and had her leg trapped under a log.  Her mother arrived, after searching for her, to see a Bear reach down and gently remove the log.   She stood dumbfounded, as her daughter thanked the bear and it nodded in reply as it turned away.   She could talk with animals effortlessly.  She had the power of Clojure’s Interop.</p>

<h2>Bob</h2>

<p>Bob is the leader of the Clojure X-Men.  He seeks out people with the
power of Clojure and helps train and educate them.  He also is the
most powerful.  He can come into any argument, problem, or challenge
and immediately separate out what is most important to focus on.  He
always knows the right thing to do, without getting bogged down in
unnecessary details .  His power is Clojure’s simplicity.</p>

<p>There might be others out there, we don’t know.  We can only hope, that they are found by Bob and the Clojure X-Men and use their powers for good.</p>
]]></content>
  </entry>
  
</feed>
