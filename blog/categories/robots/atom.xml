<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Robots | Squid's Blog]]></title>
  <link href="http://gigasquid.github.io/blog/categories/robots/atom.xml" rel="self"/>
  <link href="http://gigasquid.github.io/"/>
  <updated>2018-07-05T19:49:02-04:00</updated>
  <id>http://gigasquid.github.io/</id>
  <author>
    <name><![CDATA[Carin Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[World Domination with Hexapods and Clojure]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure/"/>
    <updated>2014-03-20T21:00:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/20/world-domination-with-hexapods-and-clojure</id>
    <content type="html"><![CDATA[<p>Once you have your <a href="http://gigasquidsoftware.com/blog/2014/03/19/walking-with-hexapods/">hexapod assembled and running using the hand held
controller</a>,
of course, your thoughts naturally turn to world domination.</p>

<h2>The most powerful tool in the world is the Clojure REPL</h2>

<p>World domination requires the most powerful tools available.  That of
course calls for Clojure and the Clojure REPL.  I recommend Emacs
as the editor of choice of such an endeavor.  However, it if you are
content with city, state, or single country domination, other editors
that support Clojure are also fine.</p>

<h2>Connect the XBee to your computer</h2>

<p>First, we need to get the computer to talk to the hexapod wirelessly.
We can do this with a <a href="http://www.trossenrobotics.com/uartsbee">USB to Serial adapter</a>
that uses the paired XBee from the handheld commander.</p>

<p>Take the XBee from the handheld commander</p>

<p><img class="<a" src="href="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg">http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg</a>"></p>

<p>and move it to the USB to serial adapter</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg">http://farm8.staticflickr.com/7067/13298779543_f69a14b42c_n.jpg</a>"></p>

<p>Now plug the usb into your computer.</p>

<h2>Get your Clojure ready</h2>

<p>In your clojure project, the only magic you need is the <a href="https://github.com/samaaron/serial-port">Serial Port library</a>. Import the library and list your serial ports.  Then open the one that shows up for you.</p>

<p>```clojure
(ns clj-hexapod.core
  (require [serial-port :as serial]))</p>

<p>;; Use this command to see what port your serial port
;; is assinged to
(serial/list-ports)</p>

<p>;; replace the USB0 with whater it shows
(def port (serial/open &ldquo;/dev/ttyUSB0&rdquo; 38400))
```</p>

<p>Since we are going to be talking to the hexapod.  We need to send the commands in the same format that it is expecting. Basically, a packet of where the postions of the joystick are, as well as what buttons are pushed.</p>

<p>```clojure
(defn checksum [v]
  (mod (&ndash; 255 (reduce + v)) 256))</p>

<p>(defn vec->bytes [v]
  (byte-array (map #(&ndash;> % (Integer.) (.byteValue) (byte)) v)))</p>

<p>(defn build-packet [r-vert r-horz l-vert l-horz buttons]
  [255 ;header
   r-vert
   r-horz
   l-vert
   l-horz
   buttons
   0
   (checksum [r-vert r-horz l-vert l-horz buttons])])</p>

<p>(defn send [packet]
  (serial/write port (vec->bytes packet)))
```</p>

<p>From here, we can simply make functions for the joystick controls to go up and down</p>

<p>```clojure
;;values between 129-254
(defn up [speed]
  &ldquo;joystick up for speed between 1-100&rdquo;
  (if (good-range? speed)</p>

<pre><code>(int (+ 129 (* 125 (/ speed 100.0))))
CENTER))
</code></pre>

<p>;;values between 0 and 125
(defn down [speed]
  &ldquo;joystick down speed between 1-100&rdquo;
  (if (good-range? speed)</p>

<pre><code>(int (- 125 (* 125 (/ speed 100.0))))
CENTER))
</code></pre>

<p>```</p>

<p>Then we can do things like walk, turn, and change the gait</p>

<p>```clojure
(defn walk-forward [speed]
  &ldquo;walk forward speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER (up speed) CENTER 0)))</p>

<p>(defn walk-backwards [speed]
  &ldquo;walk backwards speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER (down speed) CENTER 0)))</p>

<p>(defn walk-right [speed]
  &ldquo;walk right speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER CENTER (up speed) 0)))</p>

<p>(defn walk-left [speed]
  &ldquo;walk right speed between 1-100&rdquo;
  (send (build-packet CENTER CENTER CENTER (down speed) 0)))</p>

<p>(defn turn-right [speed]
  &ldquo;turn right speed between 1-100&rdquo;
  (send (build-packet CENTER (up speed) CENTER CENTER 0)))</p>

<p>(defn turn-left [speed]
  &ldquo;turn left speed between 1-100&rdquo;
  (send (build-packet CENTER (down speed) CENTER CENTER 0)))</p>

<p>(defn change-gait [gait-key]
  (let [gait-num (gait-key gaits)]</p>

<pre><code>(send (build-packet CENTER CENTER CENTER CENTER gait-num))))
</code></pre>

<p>(defn stop []
  &ldquo;stop hexapod&rdquo;
  (send (build-packet CENTER CENTER CENTER CENTER 0)))
```</p>

<p>You can control it from the REPL with some simple commands</p>

<p><code>clojure
(walk-forward 20)
(walk-backwards 10)
(walk-right 10)
(walk-left 10)
(turn-right 10)
(turn-left 10)
(change-gait :ripple-smooth)
(change-gait :tripod-normal)
(change-gait :ripple)
(change-gait :amble)
(stop)
</code></p>

<p>If you want to see the code, it is out on github as <a href="https://github.com/gigasquid/clj-hexapod">clj-hexapod</a>.  Please keep in mind that it is early days still, and I am still just exploring.</p>

<h2>Phoneix Code Firmware</h2>

<p>It is worth noting the the above code was meant to run with the default hexapod firmware.  That is the &ldquo;Nuke&rdquo; firmware.  There is another firmware, the <a href="https://github.com/KurtE/Arduino_Phoenix_Parts">Phoenix code</a>, that gives the hexapod more lifelike moves and allows it to twist and shift is rather creepy ways.</p>

<p>I just loaded it on the hexapod yesterday.  The commander software changed too, so I will of course need to revisit the code, to add in the new moves.  But here is a sneak preview of what it can do:</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('PmBGt9T-yvI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/PmBGt9T-yvI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/PmBGt9T-yvI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=PmBGt9T-yvI" id="PmBGt9T-yvI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>

</p>

<p><em>That is my daughter singing in the background</em></p>

<h2>That&rsquo;s all for now</h2>

<p>I hope I have given you pointers for getting started on your own world domination with Clojure and Hexapods. Remember to practice your laugh &hellip;. Muhahaha :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Walking with Hexapods]]></title>
    <link href="http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods/"/>
    <updated>2014-03-19T21:06:00-04:00</updated>
    <id>http://gigasquid.github.io/blog/2014/03/19/walking-with-hexapods</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm4.staticflickr.com/3804/13278398783_0bedfa7b40.jpg">http://farm4.staticflickr.com/3804/13278398783_0bedfa7b40.jpg</a>"></p>

<p>Here we see the <a href="http://www.trossenrobotics.com/phantomx-ax-hexapod.aspx">PhantomX Hexapod</a> thriving in the natural habitat of a
cozy, climate controlled, modern house. But there was a time before
the hexapod.  In particular, there was a time of many hexapod parts
and a high level software developer that somehow, despite her natural
lack of mechanical skills, managed to bring it to life. This blog post
endeavors to chronicle the high and low points of this journey. And
perhaps, will make it easier for any other brave souls that would like
to bring the <em>Age of Hexapods</em> into their homes.</p>

<h2>Oh My! So Many Parts</h2>

<p>I wasn&rsquo;t really mentally prepared for the vast amounts of parts in the
kit.  Here is a sampling:</p>

<ul>
<li>18 AX-12A Servos</li>
<li>Top/ Bottom Body Plate</li>
<li>20 Brackets</li>
<li>Arbotix Board</li>
<li>2 Xbees</li>
<li>Lipo Battery &amp; Charger</li>
<li>Arbotix programmer</li>
<li>19 Cables</li>
<li><strong>50,000 nuts and screws </strong> (Really only about 850 &ndash; but you get my
 point)</li>
</ul>


<h2>First Things First</h2>

<p>The very first thing to do is to make sure that you have all the
parts.  Once I went through the checklist and double counted all my
screws, I was relieved to go onto the next task of programming the
Arbotix and assign ids to servos and center them. These steps
consisted of:</p>

<ul>
<li>Getting the Arduino IDE going</li>
<li>Loading the Drivers and Libraries</li>
<li>Loading the ROS (Robot Operating System) on the Arbotix Board, so
that it could be used to program the servos.</li>
</ul>


<p>Each of the servos have to be assigned a number. This will let the
program know which part of the leg is which, so that it will
eventually &ndash; hopefully, be able to walk. Once the id is given, a
sticker is labeled on the servo for future use. Centering the servos
is a VERY important step not to overlook.  If you do not center the
servos, you will get into the unfortunate circumstance of having to
dissemble the robot, cry, recenter the servos, and then reassemble the
robot. Please avoid.</p>

<h2>Putting It Together</h2>

<p>The assembly starts with the feet and legs first.
I was so pleased when I got the feet assembled, that I considered
knitting little baby hexapod booties.</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7298/13278059445_562bb9ce4b.jpg">http://farm8.staticflickr.com/7298/13278059445_562bb9ce4b.jpg</a>"></p>

<p>Next a servo and the tibia is added</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7311/13278197583_599f030bab.jpg">http://farm8.staticflickr.com/7311/13278197583_599f030bab.jpg</a>"></p>

<p>Another servo and the tibia and femur is assembled</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7185/13278392294_8986c14e5b.jpg">http://farm8.staticflickr.com/7185/13278392294_8986c14e5b.jpg</a>"></p>

<p>Finally, another servo and the whole leg is assembled</p>

<p><img class="<a" src="href="http://farm8.staticflickr.com/7033/13278197683_cfd9a4870f.jpg">http://farm8.staticflickr.com/7033/13278197683_cfd9a4870f.jpg</a>"></p>

<h2>Newbie Advice</h2>

<p>I would like to pause for a minute to share some advice from my trial
and errors in assembly thus far:</p>

<ul>
<li><strong>Don&rsquo;t overtighten screws </strong> &ndash; More is not better. It makes things
like plexiglass frames crack and break.</li>
<li><strong>Seating nuts in servos is hard</strong> &ndash; This isn&rsquo;t really advice. Just
moral support in your struggle.  There are 18 servos and up to 20
nuts to seat in each servo.</li>
</ul>


<p><img class="<a" src="href="http://farm4.staticflickr.com/3833/13278059175_91699a9704_n.jpg">http://farm4.staticflickr.com/3833/13278059175_91699a9704_n.jpg</a>"></p>

<h2>Assembling the body</h2>

<p>The body is where the board, battery and and cables go.</p>

<p><img class="<a" src="href="http://farm4.staticflickr.com/3755/13278197953_44717aea96.jpg">http://farm4.staticflickr.com/3755/13278197953_44717aea96.jpg</a>"></p>

<p>At long last, the legs can be attached to the body &ndash; with 120 screws
of course.</p>

<h2>Round two of Newbie Advice</h2>

<ul>
<li>For those who have never stripped wires and attached them to power
supplies, like me, please mind that the wires are twisted so that
the edges don&rsquo;t fray out and short out everything requiring you to
re-assign all the servos that lost their ids and much unscrewing,
crying, and reassembling.</li>
<li>When programming the Arbotix board.  You must remove the Xbee, or it
will not work.</li>
<li>Also, did I mention not over-tightening screws? Also, the order in
which you tighten the screws is important too.  Try to tighten them
all loosely in order, so you don&rsquo;t stress the fiberglass parts and
have something like this happen.</li>
</ul>


<p><img class="<a" src="href="http://farm4.staticflickr.com/3749/13278392754_cde8d9e10f_n.jpg">http://farm4.staticflickr.com/3749/13278392754_cde8d9e10f_n.jpg</a>"></p>

<h2>It is Alive!</h2>

<p>Finally, the moment of truth. The hexapod is assembled and it is time
to upload a test check on the board to make sure that everything is
working alright.</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('i9St8kDuyqU');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/i9St8kDuyqU?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/i9St8kDuyqU/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=i9St8kDuyqU" id="i9St8kDuyqU" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>

</p>

<h2>Walking with Hexapods</h2>

<p>The kit comes with a commander that you assemble of course.  You can
use it to control the hexapod with hand-held joysticks.</p>

<p><img class="<a" src="href="http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg">http://farm4.staticflickr.com/3698/13278059985_f5b5c01819_n.jpg</a>"></p>

<p>The moment of truth, when it finally took its very first steps, and the Age of Hexapods began.</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('pUrZeJ39xjs');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/pUrZeJ39xjs?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/pUrZeJ39xjs/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=pUrZeJ39xjs" id="pUrZeJ39xjs" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info"></div>
</a>
<div class="video-info" ></div>
</div>

</p>

<p><em>Stay tuned for the next post of how to control the hexapod with your
Clojure code and loading the Phoenix firmware that gives it a
life-like moves</em></p>
]]></content>
  </entry>
  
</feed>
